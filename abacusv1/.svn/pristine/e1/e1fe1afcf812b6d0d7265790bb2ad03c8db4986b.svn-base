
'------------------------------------------------------------------------------
' This file was generated by Cooperator Modeler, version 1.3.3.0
' Created: 20/08/2013 - 01:49 p.m.
' This is a partial class file. The other one is rutaMapper.cs
' You should not modifiy this file, please edit the other partial class file.
'------------------------------------------------------------------------------

Imports System
Imports abacusRules.Entities
Imports abacusRules.Objects
Imports Cooperator.Framework.Data
Imports Cooperator.Framework.Data.Exceptions
Imports Cooperator.Framework.Core
Imports System.Data.Common
Imports System.Reflection
Imports System.Web


Namespace Mappers
    

    Public Partial Class rutaMapper
        Inherits BaseGateway(Of ruta, rutaList)
        Implements IGenericGateway

#Region "Singleton"

        Private Shared _instance As rutaMapper

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As rutaMapper
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New rutaMapper()
                Else
                    Dim inst As rutaMapper = TryCast(HttpContext.Current.Items("abacusRules.rutaMapperSingleton"), rutaMapper)
                    If inst Is Nothing Then
                        inst = New rutaMapper()
                        HttpContext.Current.Items.Add("abacusRules.rutaMapperSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function


#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim  s() as String={"Idruta"}
            return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return GetType(ruta)
        End Function


        ''' <summary>
        ''' Return the mapped table name
        ''' </summary>
        Protected Overrides ReadOnly Property TableName() As String 
            Get
                Return "ruta"
            End Get
        End Property

        ''' <summary>
        ''' Return the rutaGateway type FullName
        ''' </summary>
        Protected Overrides ReadOnly Property RuleName() As String
            Get
                Return GetType(rutaMapper).FullName
            End Get
        End Property


        

        

        ''' <summary>
        ''' Assign properties values based on DataReader
        ''' </summary>
        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As ruta)
            Dim _codigoruta As String
If reader.IsDBNull(1) Then 
	 _codigoruta = ""
Else
	 _codigoruta = reader.GetString(1)
End If
Dim _nombreruta As String
If reader.IsDBNull(2) Then 
	 _nombreruta = ""
Else
	 _nombreruta = reader.GetString(2)
End If
Dim _observacionruta As String
If reader.IsDBNull(3) Then 
	 _observacionruta = ""
Else
	 _observacionruta = reader.GetString(3)
End If
Dim _iddistrito As System.Nullable(Of System.Int32) 
If reader.IsDBNull(4) Then 
	 _iddistrito = New System.Nullable(Of System.Int32)
Else
	 _iddistrito = reader.GetInt32(4)
End If
Dim _DistritosString As String
If reader.IsDBNull(5) Then 
	 _DistritosString = ""
Else
	 _DistritosString = reader.GetString(5)
End If

            Dim ruta As IMappeablerutaObject  = CType(entity, IMappeablerutaObject)
            ruta.HydrateFields(reader.GetInt32(0), _
_codigoruta, _
_nombreruta, _
_observacionruta, _
_iddistrito, _
_DistritosString)
        End Sub

        ''' <summary>
        ''' Get field values to call insertion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForInsert(ByVal entity As ruta) As Object()
            Dim ruta As IMappeablerutaObject = CType(entity, IMappeablerutaObject)
            Return ruta.GetFieldsForInsert()
        End Function

        ''' <summary>
        ''' Get field values to call update stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForUpdate(ByVal entity As ruta) As Object()
            Dim ruta As IMappeablerutaObject = CType(entity, IMappeablerutaObject)
            Return ruta.GetFieldsForUpdate()
        End Function

        ''' <summary>
        ''' Get field values to call deletion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForDelete(ByVal entity As ruta) As Object()
            Dim ruta As IMappeablerutaObject = CType(entity, IMappeablerutaObject)
            Return ruta.GetFieldsForDelete()
        End Function

        ''' <summary>
        ''' Raised after insert and update. Update properties from Output parameters
        ''' </summary>
        Protected Overrides Sub UpdateObjectFromOutputParams(ByVal entity As ruta, ByVal parameters As Object())
            ' Update properties from Output parameters
            CType(entity, IMappeablerutaObject).UpdateObjectFromOutputParams(parameters)
        End Sub

        ''' <summary>
        ''' StoredProceduresPrefix, for example: coop_
        ''' </summary>
        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function


        


        

        ''' <summary>
        ''' Complete the aggregations for this entity. 
        ''' </summary>
        Protected Overrides Sub CompleteEntity(ByVal entity As ruta)
            Dim DistritosEntity As Objects.DistritosObject = Nothing 'Lazy load
            CType(entity, IMappeableruta).CompleteEntity(DistritosEntity)
        End Sub


        # Region "CRUD Operations"
        

        # End Region
        
        ''' <summary>
        ''' Delete children for this entity
        ''' </summary>
        Public Sub DeleteChildren(ByVal transaction As DbTransaction, ByVal entity As IUniqueIdentifiable)
                        
        End Sub


          



        ''' <summary>
        ''' Get a ruta by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As ruta
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a rutaList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As rutaList
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetOne(Idruta As System.Int32) As ruta
            Return MyBase.GetOne(New ruta(Idruta))
        End Function

        

        ' GetOne By Objects and Params
            

        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByDistritos(iddistrito As System.Int32) As rutaList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ruta_GetByDistritos", iddistrito)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByDistritos(ByVal Distritos As IUniqueIdentifiable) As rutaList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ruta_GetByDistritos", Distritos.Identifier())
        End Function

    


        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByDistritos(ByVal transaction As DbTransaction,iddistrito As System.Int32) As rutaList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ruta_GetByDistritos", iddistrito)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByDistritos(ByVal transaction As DbTransaction, ByVal Distritos As IUniqueIdentifiable) As rutaList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ruta_GetByDistritos", Distritos.Identifier())
        End Function

    

        





        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(Idruta As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ruta_Delete", Idruta)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(ByVal transaction As DbTransaction ,Idruta As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ruta_Delete", Idruta)
        End Sub

        ' Delete By Objects and Params
            



        

    

    

    

    

    

    

    

    

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByDistritos(iddistrito As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ruta_DeleteByDistritos", iddistrito)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByDistritos(ByVal transaction As DbTransaction , iddistrito As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ruta_DeleteByDistritos", iddistrito)
        End Sub


        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByDistritos(ByVal Distritos As IUniqueIdentifiable)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ruta_DeleteByDistritos", Distritos.Identifier())
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByDistritos(ByVal transaction As DbTransaction, ByVal Distritos As IUniqueIdentifiable)        
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ruta_DeleteByDistritos", Distritos.Identifier())
        End Sub

        

    


        'Database Queries 
        






        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace


Namespace Wrappers
    ''' <summary>
    ''' 
    ''' </summary>
    Public Class rutaMapperWrapper

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            return Instance().GetPKPropertiesNames()
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return Instance().GetMappingType()
        End Function


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function Instance() As abacusRules.Mappers.rutaMapper
            Return abacusRules.Mappers.rutaMapper.Instance()
        End Function

        
        ''' <summary>
        ''' Get a ruta Entity by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetOne(ByVal Idruta As System.Int32) As Entities.ruta         
            Return Instance().GetOne( Idruta)
        End Function
        

        ' GetBy Objects and Params
            

        

        ''' <summary>
        ''' Get a rutaList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByDistritos( ByVal iddistrito As System.Int32) As Entities.rutaList 
            Return Instance().GetByDistritos(iddistrito)
        End Function

        ''' <summary>
        ''' Get a rutaList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByDistritos(ByVal  Distritos As IUniqueIdentifiable) As Entities.rutaList
            Return Instance().GetByDistritos(Distritos)
        End Function

    

        ''' <summary>
        ''' GetAll ruta 
        ''' </summary>
        Public Function GetAll() As Entities.rutaList
            Return Instance().GetAll()
        End Function

        
        

        ''' <summary>
        ''' Delete children for ruta
        ''' </summary>
        Public Sub DeleteChildren(ByVal transaction As DbTransaction, ByVal entity As ruta)
            Instance().DeleteChildren(transaction, entity)
        End Sub

        


            

        

        ''' <summary>
        ''' Delete ruta by Distritos
        ''' </summary>
        Public Sub DeleteByDistritos( ByVal iddistrito As System.Int32)
            Instance().DeleteByDistritos(iddistrito)
        End Sub

        ''' <summary>
        ''' Delete ruta by Distritos
        ''' </summary>
        Public Sub DeleteByDistritos(ByVal Distritos As IUniqueIdentifiable )
            Instance().DeleteByDistritos(Distritos)
        End Sub

    

        ''' <summary>
        ''' Delete ruta 
        ''' </summary>
        Public Overloads Sub Delete(ByVal Idruta As System.Int32)
            Instance().Delete(Idruta)
        End Sub

        ''' <summary>
        ''' Delete ruta 
        ''' </summary>
        Public Overloads Sub Delete(ByVal entity As Entities.ruta)
            Instance().Delete(entity)
        End Sub

        ''' <summary>
        ''' Save ruta  
        ''' </summary>
        Public Overloads Sub Save(ByVal entity As Entities.ruta)
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert ruta 
        ''' </summary>
        Public Overloads Sub Insert(ByVal entity As Entities.ruta)
            Instance().Insert(entity)
        End Sub

        ''' <summary>
        ''' Save ruta 
        ''' </summary>
        Public Overloads Sub Save(ByVal Idruta As System.Int32, ByVal codigoruta As System.String, ByVal nombreruta As System.String, ByVal observacionruta As System.String, ByVal iddistrito As System.Int32, ByVal DistritosString As System.String)
            Dim entity As Entities.ruta = Instance().GetOne(Idruta)
            If entity Is Nothing Then
                Throw New ApplicationException(String.Format("Entity not found. IUniqueIdentifiable values: {0} = {1}", "Idruta", Idruta))
            End If

            entity.codigoruta = codigoruta
            entity.nombreruta = nombreruta
            entity.observacionruta = observacionruta
            entity.iddistrito = iddistrito
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert ruta
        ''' </summary>
        Public Overloads Sub Insert(ByVal codigoruta As System.String, ByVal nombreruta As System.String, ByVal observacionruta As System.String, ByVal iddistrito As System.Int32)
            Dim entity As Entities.ruta = New Entities.ruta

            entity.codigoruta = codigoruta
            entity.nombreruta = nombreruta
            entity.observacionruta = observacionruta
            entity.iddistrito = iddistrito
            Instance().Insert(entity)
        End Sub

        

        'Database Queries 
        


    End Class
End Namespace


Namespace Loaders

    ''' <summary>
    ''' 
    ''' </summary>
    Partial Public Class rutaLoader(Of T As {ruta, New})
        Inherits BaseLoader(Of T, ruta, ObjectList(Of T))
        Implements IGenericGateway



#Region "Singleton"

        Private Shared _instance As rutaLoader(Of T)

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As rutaLoader(Of T)
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New rutaLoader(Of T)
                Else
                    Dim inst As rutaLoader(Of T) = TryCast(HttpContext.Current.Items("abacusRules.rutaLoaderSingleton"), rutaLoader(Of T))
                    If inst Is Nothing Then
                        inst = New rutaLoader(Of T)
                        HttpContext.Current.Items.Add("abacusRules.rutaLoaderSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function

#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim s() as String={"Idruta"}
            Return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            Return GetType(ruta)
        End Function


        Protected Overrides ReadOnly Property TableName As String 
            Get
                Return "ruta"
            End Get
        End Property

        

        


        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As ruta)
            Dim _codigoruta As String
If reader.IsDBNull(1) Then 
	 _codigoruta = ""
Else
	 _codigoruta = reader.GetString(1)
End If
Dim _nombreruta As String
If reader.IsDBNull(2) Then 
	 _nombreruta = ""
Else
	 _nombreruta = reader.GetString(2)
End If
Dim _observacionruta As String
If reader.IsDBNull(3) Then 
	 _observacionruta = ""
Else
	 _observacionruta = reader.GetString(3)
End If
Dim _iddistrito As System.Nullable(Of System.Int32) 
If reader.IsDBNull(4) Then 
	 _iddistrito = New System.Nullable(Of System.Int32)
Else
	 _iddistrito = reader.GetInt32(4)
End If
Dim _DistritosString As String
If reader.IsDBNull(5) Then 
	 _DistritosString = ""
Else
	 _DistritosString = reader.GetString(5)
End If

            Dim ruta As IMappeablerutaObject  = CType(entity, IMappeablerutaObject)
            ruta.HydrateFields(reader.GetInt32(0), _
_codigoruta, _
_nombreruta, _
_observacionruta, _
_iddistrito, _
_DistritosString)
        End Sub


        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function

        

        

        ' Complete the aggregations for this entity.         
        Protected Overrides Sub CompleteEntity(ByVal entity As t)
            Dim DistritosEntity As Objects.DistritosObject = Nothing 'Lazy load
            CType(entity, IMappeableruta).CompleteEntity(DistritosEntity)
        End Sub

        


        ''' <summary>
        ''' Get a ruta by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As t
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a rutaList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As ObjectList(Of T)
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' GetOne By Params
        ''' </summary>
        Public Overloads Function GetOne(Idruta As System.Int32) As t
            Return MyBase.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "ruta_GetOne", Idruta)
        End Function
        


        ' GetOne By Objects and Params
            

        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByDistritos(iddistrito As System.Int32) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ruta_GetByDistritos", iddistrito)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByDistritos(ByVal Distritos As IUniqueIdentifiable) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ruta_GetByDistritos", Distritos.Identifier())
        End Function

    


        'Database Queries 
        


        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace




