
'------------------------------------------------------------------------------
' This file was generated by Cooperator Modeler, version 1.3.3.0
' Created: 20/08/2013 - 01:49 p.m.
' This is a partial class file. The other one is TransportistaMapper.cs
' You should not modifiy this file, please edit the other partial class file.
'------------------------------------------------------------------------------

Imports System
Imports abacusRules.Entities
Imports abacusRules.Objects
Imports Cooperator.Framework.Data
Imports Cooperator.Framework.Data.Exceptions
Imports Cooperator.Framework.Core
Imports System.Data.Common
Imports System.Reflection
Imports System.Web


Namespace Mappers
    

    Public Partial Class TransportistaMapper
        Inherits BaseGateway(Of TransportistaObject, TransportistaObjectList)
        Implements IGenericGateway

#Region "Singleton"

        Private Shared _instance As TransportistaMapper

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As TransportistaMapper
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New TransportistaMapper()
                Else
                    Dim inst As TransportistaMapper = TryCast(HttpContext.Current.Items("abacusRules.TransportistaMapperSingleton"), TransportistaMapper)
                    If inst Is Nothing Then
                        inst = New TransportistaMapper()
                        HttpContext.Current.Items.Add("abacusRules.TransportistaMapperSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function


#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim  s() as String={"IdTransportista"}
            return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return GetType(TransportistaObject)
        End Function


        ''' <summary>
        ''' Return the mapped table name
        ''' </summary>
        Protected Overrides ReadOnly Property TableName() As String 
            Get
                Return "Transportista"
            End Get
        End Property

        ''' <summary>
        ''' Return the TransportistaGateway type FullName
        ''' </summary>
        Protected Overrides ReadOnly Property RuleName() As String
            Get
                Return GetType(TransportistaMapper).FullName
            End Get
        End Property


        

        

        ''' <summary>
        ''' Assign properties values based on DataReader
        ''' </summary>
        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As TransportistaObject)
            Dim _RUC As String
If reader.IsDBNull(1) Then 
	 _RUC = ""
Else
	 _RUC = reader.GetString(1)
End If
Dim _RazonSocial As String
If reader.IsDBNull(2) Then 
	 _RazonSocial = ""
Else
	 _RazonSocial = reader.GetString(2)
End If
Dim _Direccion As String
If reader.IsDBNull(3) Then 
	 _Direccion = ""
Else
	 _Direccion = reader.GetString(3)
End If
Dim _Distrito As System.Nullable(Of System.Int32) 
If reader.IsDBNull(4) Then 
	 _Distrito = New System.Nullable(Of System.Int32)
Else
	 _Distrito = reader.GetInt32(4)
End If
Dim _Provincia As System.Nullable(Of System.Int32) 
If reader.IsDBNull(5) Then 
	 _Provincia = New System.Nullable(Of System.Int32)
Else
	 _Provincia = reader.GetInt32(5)
End If

            Dim Transportista As IMappeableTransportistaObject  = CType(entity, IMappeableTransportistaObject)
            Transportista.HydrateFields(reader.GetInt32(0), _
_RUC, _
_RazonSocial, _
_Direccion, _
_Distrito, _
_Provincia)
        End Sub

        ''' <summary>
        ''' Get field values to call insertion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForInsert(ByVal entity As TransportistaObject) As Object()
            Dim Transportista As IMappeableTransportistaObject = CType(entity, IMappeableTransportistaObject)
            Return Transportista.GetFieldsForInsert()
        End Function

        ''' <summary>
        ''' Get field values to call update stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForUpdate(ByVal entity As TransportistaObject) As Object()
            Dim Transportista As IMappeableTransportistaObject = CType(entity, IMappeableTransportistaObject)
            Return Transportista.GetFieldsForUpdate()
        End Function

        ''' <summary>
        ''' Get field values to call deletion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForDelete(ByVal entity As TransportistaObject) As Object()
            Dim Transportista As IMappeableTransportistaObject = CType(entity, IMappeableTransportistaObject)
            Return Transportista.GetFieldsForDelete()
        End Function

        ''' <summary>
        ''' Raised after insert and update. Update properties from Output parameters
        ''' </summary>
        Protected Overrides Sub UpdateObjectFromOutputParams(ByVal entity As TransportistaObject, ByVal parameters As Object())
            ' Update properties from Output parameters
            CType(entity, IMappeableTransportistaObject).UpdateObjectFromOutputParams(parameters)
        End Sub

        ''' <summary>
        ''' StoredProceduresPrefix, for example: coop_
        ''' </summary>
        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function


          



        ''' <summary>
        ''' Get a Transportista by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As TransportistaObject
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a TransportistaList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As TransportistaObjectList
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetOne(IdTransportista As System.Int32) As TransportistaObject
            Return MyBase.GetOne(New TransportistaObject(IdTransportista))
        End Function

        

        ' GetOne By Objects and Params
            

        


        

        





        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(IdTransportista As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Transportista_Delete", IdTransportista)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(ByVal transaction As DbTransaction ,IdTransportista As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Transportista_Delete", IdTransportista)
        End Sub

        ' Delete By Objects and Params
            



        

    

    

    

    

    

    

    

    


        'Database Queries 
        






        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace


Namespace Wrappers
    ''' <summary>
    ''' 
    ''' </summary>
    Public Class TransportistaMapperWrapper

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            return Instance().GetPKPropertiesNames()
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return Instance().GetMappingType()
        End Function


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function Instance() As abacusRules.Mappers.TransportistaMapper
            Return abacusRules.Mappers.TransportistaMapper.Instance()
        End Function

        
        ''' <summary>
        ''' Get a Transportista Entity by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetOne(ByVal IdTransportista As System.Int32) As Objects.TransportistaObject         
            Return Instance().GetOne( IdTransportista)
        End Function
        

        ' GetBy Objects and Params
            

        

        ''' <summary>
        ''' GetAll Transportista 
        ''' </summary>
        Public Function GetAll() As Objects.TransportistaObjectList
            Return Instance().GetAll()
        End Function

        
        


            

        

        ''' <summary>
        ''' Delete Transportista 
        ''' </summary>
        Public Overloads Sub Delete(ByVal IdTransportista As System.Int32)
            Instance().Delete(IdTransportista)
        End Sub

        ''' <summary>
        ''' Delete Transportista 
        ''' </summary>
        Public Overloads Sub Delete(ByVal entity As Objects.TransportistaObject)
            Instance().Delete(entity)
        End Sub

        ''' <summary>
        ''' Save Transportista  
        ''' </summary>
        Public Overloads Sub Save(ByVal entity As Objects.TransportistaObject)
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert Transportista 
        ''' </summary>
        Public Overloads Sub Insert(ByVal entity As Objects.TransportistaObject)
            Instance().Insert(entity)
        End Sub

        ''' <summary>
        ''' Save Transportista 
        ''' </summary>
        Public Overloads Sub Save(ByVal IdTransportista As System.Int32, ByVal RUC As System.String, ByVal RazonSocial As System.String, ByVal Direccion As System.String, ByVal Distrito As System.Int32, ByVal Provincia As System.Int32)
            Dim entity As Objects.TransportistaObject = Instance().GetOne(IdTransportista)
            If entity Is Nothing Then
                Throw New ApplicationException(String.Format("Entity not found. IUniqueIdentifiable values: {0} = {1}", "IdTransportista", IdTransportista))
            End If

            entity.RUC = RUC
            entity.RazonSocial = RazonSocial
            entity.Direccion = Direccion
            entity.Distrito = Distrito
            entity.Provincia = Provincia
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert Transportista
        ''' </summary>
        Public Overloads Sub Insert(ByVal RUC As System.String, ByVal RazonSocial As System.String, ByVal Direccion As System.String, ByVal Distrito As System.Int32, ByVal Provincia As System.Int32)
            Dim entity As Objects.TransportistaObject = New Objects.TransportistaObject

            entity.RUC = RUC
            entity.RazonSocial = RazonSocial
            entity.Direccion = Direccion
            entity.Distrito = Distrito
            entity.Provincia = Provincia
            Instance().Insert(entity)
        End Sub

        

        'Database Queries 
        


    End Class
End Namespace


Namespace Loaders

    ''' <summary>
    ''' 
    ''' </summary>
    Partial Public Class TransportistaLoader(Of T As {TransportistaObject, New})
        Inherits BaseLoader(Of T, TransportistaObject, ObjectList(Of T))
        Implements IGenericGateway



#Region "Singleton"

        Private Shared _instance As TransportistaLoader(Of T)

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As TransportistaLoader(Of T)
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New TransportistaLoader(Of T)
                Else
                    Dim inst As TransportistaLoader(Of T) = TryCast(HttpContext.Current.Items("abacusRules.TransportistaLoaderSingleton"), TransportistaLoader(Of T))
                    If inst Is Nothing Then
                        inst = New TransportistaLoader(Of T)
                        HttpContext.Current.Items.Add("abacusRules.TransportistaLoaderSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function

#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim s() as String={"IdTransportista"}
            Return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            Return GetType(TransportistaObject)
        End Function


        Protected Overrides ReadOnly Property TableName As String 
            Get
                Return "Transportista"
            End Get
        End Property

        

        


        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As TransportistaObject)
            Dim _RUC As String
If reader.IsDBNull(1) Then 
	 _RUC = ""
Else
	 _RUC = reader.GetString(1)
End If
Dim _RazonSocial As String
If reader.IsDBNull(2) Then 
	 _RazonSocial = ""
Else
	 _RazonSocial = reader.GetString(2)
End If
Dim _Direccion As String
If reader.IsDBNull(3) Then 
	 _Direccion = ""
Else
	 _Direccion = reader.GetString(3)
End If
Dim _Distrito As System.Nullable(Of System.Int32) 
If reader.IsDBNull(4) Then 
	 _Distrito = New System.Nullable(Of System.Int32)
Else
	 _Distrito = reader.GetInt32(4)
End If
Dim _Provincia As System.Nullable(Of System.Int32) 
If reader.IsDBNull(5) Then 
	 _Provincia = New System.Nullable(Of System.Int32)
Else
	 _Provincia = reader.GetInt32(5)
End If

            Dim Transportista As IMappeableTransportistaObject  = CType(entity, IMappeableTransportistaObject)
            Transportista.HydrateFields(reader.GetInt32(0), _
_RUC, _
_RazonSocial, _
_Direccion, _
_Distrito, _
_Provincia)
        End Sub


        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function

        


        ''' <summary>
        ''' Get a Transportista by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As t
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a TransportistaList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As ObjectList(Of T)
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' GetOne By Params
        ''' </summary>
        Public Overloads Function GetOne(IdTransportista As System.Int32) As t
            Return MyBase.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "Transportista_GetOne", IdTransportista)
        End Function
        


        ' GetOne By Objects and Params
            

        


        'Database Queries 
        


        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace




