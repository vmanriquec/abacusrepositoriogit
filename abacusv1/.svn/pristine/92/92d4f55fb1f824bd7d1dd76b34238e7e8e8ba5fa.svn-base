
'------------------------------------------------------------------------------
' This file was generated by Cooperator Modeler, version 1.3.3.0
' Created: 20/08/2013 - 01:48 p.m.
' This is a partial class file. The other one is TCGateway.vb
' You should not modifiy this file, please edit the other partial class file.
'------------------------------------------------------------------------------

Imports System
Imports abacusRules.Objects
Imports Cooperator.Framework.Data
Imports Cooperator.Framework.Data.Exceptions
Imports Cooperator.Framework.Core
Imports System.Data.Common
Imports System.Reflection
Imports System.Web

Namespace Gateways
        
    Public Partial Class TCGateway 
        Inherits BaseGateway(Of TCObject, TCObjectList)
        Implements IGenericGateway

#Region "Singleton"

        Private Shared _instance As TCGateway

        Private Sub New()
        End Sub

        Public Shared Function Instance() As TCGateway
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New TCGateway()
                Else
                    Dim inst As TCGateway = TryCast(HttpContext.Current.Items("abacusRules.TCGatewaySingleton"), TCGateway)
                    If inst Is Nothing Then
                        inst = New TCGateway()
                        HttpContext.Current.Items.Add("abacusRules.TCGatewaySingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function

#End Region

        ''' <summary>
        ''' Return the mapped table name
        ''' </summary>
        Protected Overrides ReadOnly Property TableName() As String
            Get
                Return "TC"
            End Get
        End Property

        ''' <summary>
        ''' Return the TCGateway type FullName
        ''' </summary>
        Protected Overrides ReadOnly Property RuleName() As String
            Get
                Return GetType(TCGateway ).FullName
            End Get
        End Property


        

        


        ''' <summary>
        ''' Assign properties values based on DataReader
        ''' </summary>
        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As TCObject )
            Dim _Compra As System.Nullable(Of System.Decimal) 
If reader.IsDBNull(1) Then 
	 _Compra = New System.Nullable(Of System.Decimal)
Else
	 _Compra = reader.GetDecimal(1)
End If
Dim _Venta As System.Nullable(Of System.Decimal) 
If reader.IsDBNull(2) Then 
	 _Venta = New System.Nullable(Of System.Decimal)
Else
	 _Venta = reader.GetDecimal(2)
End If
Dim _Fecha As System.Nullable(Of System.DateTime) 
If reader.IsDBNull(3) Then 
	 _Fecha = New System.Nullable(Of System.DateTime)
Else
	 _Fecha = reader.GetDateTime(3)
End If
Dim _upsize_ts As System.Nullable(Of System.DateTime) 
If reader.IsDBNull(4) Then 
	 _upsize_ts = New System.Nullable(Of System.DateTime)
Else
	 _upsize_ts = reader.GetDateTime(4)
End If

            Dim TC As IMappeableTCObject  = CType(entity, IMappeableTCObject)
            TC.HydrateFields(reader.GetInt32(0), _
_Compra, _
_Venta, _
_Fecha, _
_upsize_ts)
            CType(entity, IObject).State = ObjectState.Restored
        End Sub

        ''' <summary>
        ''' Get field values to call insertion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForInsert(ByVal entity As TCObject) As Object()
            Dim TC As IMappeableTCObject = CType(entity, IMappeableTCObject)
            Return TC.GetFieldsForInsert()
        End Function

        ''' <summary>
        ''' Get field values to call update stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForUpdate(ByVal entity As TCObject) As Object()
            Dim TC As IMappeableTCObject = CType(entity, IMappeableTCObject)
            Return TC.GetFieldsForUpdate()
        End Function

        ''' <summary>
        ''' Get field values to call deletion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForDelete(ByVal entity As TCObject) As Object()
            Dim TC As IMappeableTCObject = CType(entity, IMappeableTCObject)
            Return TC.GetFieldsForDelete()
        End Function

        ''' <summary>
        ''' Raised after insert and update. Update properties from Output parameters
        ''' </summary>
        Protected Overrides Sub UpdateObjectFromOutputParams(ByVal row As TCObject, parameters As Object())
            ' Update properties from Output parameters
            CType(row, IMappeableTCObject).UpdateObjectFromOutputParams(parameters)
            CType(row, IObject).State = ObjectState.Restored
        End Sub

        ''' <summary>
        ''' StoredProceduresPrefix, for example: coop_
        ''' </summary>
        Protected Overrides Function StoredProceduresPrefix() As String
            Return "coop_"
        End Function


        ''' <summary>
        ''' Get a TCObject by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As TCObject 
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a TCObjectList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As TCObjectList 
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function



        ''' <summary>
        ''' Get a TCObject by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetOne(ByVal IdTC As System.Int32) As TCObject         
            Return MyBase.GetOne(New TCObject(IdTC))
        End Function

            


        


        

        
        ''' <summary>
        ''' Delete TC 
        ''' </summary>
        Public Overloads Sub Delete(ByVal IdTC As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "TC_Delete", IdTC)
        End Sub

        ''' <summary>
        ''' Delete TC
        ''' </summary>
        Public Overloads Sub Delete(transaction As DbTransaction , ByVal IdTC As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "TC_Delete", IdTC)
        End Sub

            



        

    

    

    

    

    


        'Database Queries 
        



        #Region "IGenericGateway"

        Private Function GetOne2(identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GeyByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class
End Namespace




