
'------------------------------------------------------------------------------
' This file was generated by Cooperator Modeler, version 1.3.3.0
' Created: 20/08/2013 - 01:49 p.m.
' This is a partial class file. The other one is SalidasMapper.cs
' You should not modifiy this file, please edit the other partial class file.
'------------------------------------------------------------------------------

Imports System
Imports abacusRules.Entities
Imports abacusRules.Objects
Imports Cooperator.Framework.Data
Imports Cooperator.Framework.Data.Exceptions
Imports Cooperator.Framework.Core
Imports System.Data.Common
Imports System.Reflection
Imports System.Web


Namespace Mappers
    

    Public Partial Class SalidasMapper
        Inherits BaseGateway(Of Salidas, SalidasList)
        Implements IGenericGateway

#Region "Singleton"

        Private Shared _instance As SalidasMapper

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As SalidasMapper
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New SalidasMapper()
                Else
                    Dim inst As SalidasMapper = TryCast(HttpContext.Current.Items("abacusRules.SalidasMapperSingleton"), SalidasMapper)
                    If inst Is Nothing Then
                        inst = New SalidasMapper()
                        HttpContext.Current.Items.Add("abacusRules.SalidasMapperSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function


#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim  s() as String={"IdSalidasP"}
            return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return GetType(Salidas)
        End Function


        ''' <summary>
        ''' Return the mapped table name
        ''' </summary>
        Protected Overrides ReadOnly Property TableName() As String 
            Get
                Return "Salidas"
            End Get
        End Property

        ''' <summary>
        ''' Return the SalidasGateway type FullName
        ''' </summary>
        Protected Overrides ReadOnly Property RuleName() As String
            Get
                Return GetType(SalidasMapper).FullName
            End Get
        End Property


        

        

        ''' <summary>
        ''' Assign properties values based on DataReader
        ''' </summary>
        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As Salidas)
            Dim _IdAlmacen As System.Nullable(Of System.Int32) 
If reader.IsDBNull(1) Then 
	 _IdAlmacen = New System.Nullable(Of System.Int32)
Else
	 _IdAlmacen = reader.GetInt32(1)
End If
Dim _IdTrabjador As System.Nullable(Of System.Int32) 
If reader.IsDBNull(2) Then 
	 _IdTrabjador = New System.Nullable(Of System.Int32)
Else
	 _IdTrabjador = reader.GetInt32(2)
End If
Dim _IdSalidas As System.Nullable(Of System.Int32) 
If reader.IsDBNull(3) Then 
	 _IdSalidas = New System.Nullable(Of System.Int32)
Else
	 _IdSalidas = reader.GetInt32(3)
End If
Dim _IdTienda As System.Nullable(Of System.Int32) 
If reader.IsDBNull(4) Then 
	 _IdTienda = New System.Nullable(Of System.Int32)
Else
	 _IdTienda = reader.GetInt32(4)
End If
Dim _Fecha As System.Nullable(Of System.DateTime) 
If reader.IsDBNull(5) Then 
	 _Fecha = New System.Nullable(Of System.DateTime)
Else
	 _Fecha = reader.GetDateTime(5)
End If
Dim _TipDoc As System.Nullable(Of System.Int32) 
If reader.IsDBNull(6) Then 
	 _TipDoc = New System.Nullable(Of System.Int32)
Else
	 _TipDoc = reader.GetInt32(6)
End If
Dim _Tipo As String
If reader.IsDBNull(7) Then 
	 _Tipo = ""
Else
	 _Tipo = reader.GetString(7)
End If
Dim _Serie As String
If reader.IsDBNull(8) Then 
	 _Serie = ""
Else
	 _Serie = reader.GetString(8)
End If
Dim _Numero As String
If reader.IsDBNull(9) Then 
	 _Numero = ""
Else
	 _Numero = reader.GetString(9)
End If
Dim _IdCliente As System.Nullable(Of System.Int32) 
If reader.IsDBNull(10) Then 
	 _IdCliente = New System.Nullable(Of System.Int32)
Else
	 _IdCliente = reader.GetInt32(10)
End If
Dim _Moneda As System.Nullable(Of System.Int32) 
If reader.IsDBNull(11) Then 
	 _Moneda = New System.Nullable(Of System.Int32)
Else
	 _Moneda = reader.GetInt32(11)
End If
Dim _estado As String
If reader.IsDBNull(12) Then 
	 _estado = ""
Else
	 _estado = reader.GetString(12)
End If
Dim _totalvalor As System.Nullable(Of System.Decimal) 
If reader.IsDBNull(13) Then 
	 _totalvalor = New System.Nullable(Of System.Decimal)
Else
	 _totalvalor = reader.GetDecimal(13)
End If
Dim _AlmacenesString As String
If reader.IsDBNull(14) Then 
	 _AlmacenesString = ""
Else
	 _AlmacenesString = reader.GetString(14)
End If
Dim _ClientesString As String
If reader.IsDBNull(15) Then 
	 _ClientesString = ""
Else
	 _ClientesString = reader.GetString(15)
End If
Dim _TrabajadoresString As String
If reader.IsDBNull(16) Then 
	 _TrabajadoresString = ""
Else
	 _TrabajadoresString = reader.GetString(16)
End If

            Dim Salidas As IMappeableSalidasObject  = CType(entity, IMappeableSalidasObject)
            Salidas.HydrateFields(reader.GetInt32(0), _
_IdAlmacen, _
_IdTrabjador, _
_IdSalidas, _
_IdTienda, _
_Fecha, _
_TipDoc, _
_Tipo, _
_Serie, _
_Numero, _
_IdCliente, _
_Moneda, _
_estado, _
_totalvalor, _
_AlmacenesString, _
_ClientesString, _
_TrabajadoresString)
        End Sub

        ''' <summary>
        ''' Get field values to call insertion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForInsert(ByVal entity As Salidas) As Object()
            Dim Salidas As IMappeableSalidasObject = CType(entity, IMappeableSalidasObject)
            Return Salidas.GetFieldsForInsert()
        End Function

        ''' <summary>
        ''' Get field values to call update stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForUpdate(ByVal entity As Salidas) As Object()
            Dim Salidas As IMappeableSalidasObject = CType(entity, IMappeableSalidasObject)
            Return Salidas.GetFieldsForUpdate()
        End Function

        ''' <summary>
        ''' Get field values to call deletion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForDelete(ByVal entity As Salidas) As Object()
            Dim Salidas As IMappeableSalidasObject = CType(entity, IMappeableSalidasObject)
            Return Salidas.GetFieldsForDelete()
        End Function

        ''' <summary>
        ''' Raised after insert and update. Update properties from Output parameters
        ''' </summary>
        Protected Overrides Sub UpdateObjectFromOutputParams(ByVal entity As Salidas, ByVal parameters As Object())
            ' Update properties from Output parameters
            CType(entity, IMappeableSalidasObject).UpdateObjectFromOutputParams(parameters)
        End Sub

        ''' <summary>
        ''' StoredProceduresPrefix, for example: coop_
        ''' </summary>
        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function


        


        

        ''' <summary>
        ''' Complete the aggregations for this entity. 
        ''' </summary>
        Protected Overrides Sub CompleteEntity(ByVal entity As Salidas)
            Dim AlmacenesEntity As Objects.AlmacenesObject = Nothing 'Lazy load
Dim ClientesEntity As Objects.ClientesObject = Nothing 'Lazy load
Dim TrabajadoresEntity As Objects.TrabajadoresObject = Nothing 'Lazy load
            CType(entity, IMappeableSalidas).CompleteEntity(AlmacenesEntity, ClientesEntity, TrabajadoresEntity)
        End Sub


        # Region "CRUD Operations"
        

        # End Region
        
        ''' <summary>
        ''' Delete children for this entity
        ''' </summary>
        Public Sub DeleteChildren(ByVal transaction As DbTransaction, ByVal entity As IUniqueIdentifiable)
                        
        End Sub


          



        ''' <summary>
        ''' Get a Salidas by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As Salidas
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a SalidasList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As SalidasList
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetOne(IdSalidasP As System.Int32) As Salidas
            Return MyBase.GetOne(New Salidas(IdSalidasP))
        End Function

        

        ' GetOne By Objects and Params
            

        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByAlmacenes(IdAlmacen As System.Int32) As SalidasList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Salidas_GetByAlmacenes", IdAlmacen)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByAlmacenes(ByVal Almacenes As IUniqueIdentifiable) As SalidasList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Salidas_GetByAlmacenes", Almacenes.Identifier())
        End Function

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByClientes(IdCliente As System.Int32) As SalidasList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Salidas_GetByClientes", IdCliente)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByClientes(ByVal Clientes As IUniqueIdentifiable) As SalidasList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Salidas_GetByClientes", Clientes.Identifier())
        End Function

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByTrabajadores(IdTrabjador As System.Int32) As SalidasList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Salidas_GetByTrabajadores", IdTrabjador)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByTrabajadores(ByVal Trabajadores As IUniqueIdentifiable) As SalidasList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Salidas_GetByTrabajadores", Trabajadores.Identifier())
        End Function

    


        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByAlmacenes(ByVal transaction As DbTransaction,IdAlmacen As System.Int32) As SalidasList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Salidas_GetByAlmacenes", IdAlmacen)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByAlmacenes(ByVal transaction As DbTransaction, ByVal Almacenes As IUniqueIdentifiable) As SalidasList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Salidas_GetByAlmacenes", Almacenes.Identifier())
        End Function

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByClientes(ByVal transaction As DbTransaction,IdCliente As System.Int32) As SalidasList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Salidas_GetByClientes", IdCliente)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByClientes(ByVal transaction As DbTransaction, ByVal Clientes As IUniqueIdentifiable) As SalidasList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Salidas_GetByClientes", Clientes.Identifier())
        End Function

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByTrabajadores(ByVal transaction As DbTransaction,IdTrabjador As System.Int32) As SalidasList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Salidas_GetByTrabajadores", IdTrabjador)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByTrabajadores(ByVal transaction As DbTransaction, ByVal Trabajadores As IUniqueIdentifiable) As SalidasList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Salidas_GetByTrabajadores", Trabajadores.Identifier())
        End Function

    

        





        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(IdSalidasP As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Salidas_Delete", IdSalidasP)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(ByVal transaction As DbTransaction ,IdSalidasP As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Salidas_Delete", IdSalidasP)
        End Sub

        ' Delete By Objects and Params
            



        

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByAlmacenes(IdAlmacen As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Salidas_DeleteByAlmacenes", IdAlmacen)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByAlmacenes(ByVal transaction As DbTransaction , IdAlmacen As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Salidas_DeleteByAlmacenes", IdAlmacen)
        End Sub


        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByAlmacenes(ByVal Almacenes As IUniqueIdentifiable)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Salidas_DeleteByAlmacenes", Almacenes.Identifier())
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByAlmacenes(ByVal transaction As DbTransaction, ByVal Almacenes As IUniqueIdentifiable)        
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Salidas_DeleteByAlmacenes", Almacenes.Identifier())
        End Sub

        

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByClientes(IdCliente As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Salidas_DeleteByClientes", IdCliente)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByClientes(ByVal transaction As DbTransaction , IdCliente As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Salidas_DeleteByClientes", IdCliente)
        End Sub


        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByClientes(ByVal Clientes As IUniqueIdentifiable)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Salidas_DeleteByClientes", Clientes.Identifier())
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByClientes(ByVal transaction As DbTransaction, ByVal Clientes As IUniqueIdentifiable)        
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Salidas_DeleteByClientes", Clientes.Identifier())
        End Sub

        

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByTrabajadores(IdTrabjador As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Salidas_DeleteByTrabajadores", IdTrabjador)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByTrabajadores(ByVal transaction As DbTransaction , IdTrabjador As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Salidas_DeleteByTrabajadores", IdTrabjador)
        End Sub


        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByTrabajadores(ByVal Trabajadores As IUniqueIdentifiable)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Salidas_DeleteByTrabajadores", Trabajadores.Identifier())
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByTrabajadores(ByVal transaction As DbTransaction, ByVal Trabajadores As IUniqueIdentifiable)        
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Salidas_DeleteByTrabajadores", Trabajadores.Identifier())
        End Sub

        

    


        'Database Queries 
        






        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace


Namespace Wrappers
    ''' <summary>
    ''' 
    ''' </summary>
    Public Class SalidasMapperWrapper

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            return Instance().GetPKPropertiesNames()
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return Instance().GetMappingType()
        End Function


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function Instance() As abacusRules.Mappers.SalidasMapper
            Return abacusRules.Mappers.SalidasMapper.Instance()
        End Function

        
        ''' <summary>
        ''' Get a Salidas Entity by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetOne(ByVal IdSalidasP As System.Int32) As Entities.Salidas         
            Return Instance().GetOne( IdSalidasP)
        End Function
        

        ' GetBy Objects and Params
            

        

        ''' <summary>
        ''' Get a SalidasList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByAlmacenes( ByVal IdAlmacen As System.Int32) As Entities.SalidasList 
            Return Instance().GetByAlmacenes(IdAlmacen)
        End Function

        ''' <summary>
        ''' Get a SalidasList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByAlmacenes(ByVal  Almacenes As IUniqueIdentifiable) As Entities.SalidasList
            Return Instance().GetByAlmacenes(Almacenes)
        End Function

    

        ''' <summary>
        ''' Get a SalidasList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByClientes( ByVal IdCliente As System.Int32) As Entities.SalidasList 
            Return Instance().GetByClientes(IdCliente)
        End Function

        ''' <summary>
        ''' Get a SalidasList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByClientes(ByVal  Clientes As IUniqueIdentifiable) As Entities.SalidasList
            Return Instance().GetByClientes(Clientes)
        End Function

    

        ''' <summary>
        ''' Get a SalidasList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByTrabajadores( ByVal IdTrabjador As System.Int32) As Entities.SalidasList 
            Return Instance().GetByTrabajadores(IdTrabjador)
        End Function

        ''' <summary>
        ''' Get a SalidasList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByTrabajadores(ByVal  Trabajadores As IUniqueIdentifiable) As Entities.SalidasList
            Return Instance().GetByTrabajadores(Trabajadores)
        End Function

    

        ''' <summary>
        ''' GetAll Salidas 
        ''' </summary>
        Public Function GetAll() As Entities.SalidasList
            Return Instance().GetAll()
        End Function

        
        

        ''' <summary>
        ''' Delete children for Salidas
        ''' </summary>
        Public Sub DeleteChildren(ByVal transaction As DbTransaction, ByVal entity As Salidas)
            Instance().DeleteChildren(transaction, entity)
        End Sub

        


            

        

        ''' <summary>
        ''' Delete Salidas by Almacenes
        ''' </summary>
        Public Sub DeleteByAlmacenes( ByVal IdAlmacen As System.Int32)
            Instance().DeleteByAlmacenes(IdAlmacen)
        End Sub

        ''' <summary>
        ''' Delete Salidas by Almacenes
        ''' </summary>
        Public Sub DeleteByAlmacenes(ByVal Almacenes As IUniqueIdentifiable )
            Instance().DeleteByAlmacenes(Almacenes)
        End Sub

    

        ''' <summary>
        ''' Delete Salidas by Clientes
        ''' </summary>
        Public Sub DeleteByClientes( ByVal IdCliente As System.Int32)
            Instance().DeleteByClientes(IdCliente)
        End Sub

        ''' <summary>
        ''' Delete Salidas by Clientes
        ''' </summary>
        Public Sub DeleteByClientes(ByVal Clientes As IUniqueIdentifiable )
            Instance().DeleteByClientes(Clientes)
        End Sub

    

        ''' <summary>
        ''' Delete Salidas by Trabajadores
        ''' </summary>
        Public Sub DeleteByTrabajadores( ByVal IdTrabjador As System.Int32)
            Instance().DeleteByTrabajadores(IdTrabjador)
        End Sub

        ''' <summary>
        ''' Delete Salidas by Trabajadores
        ''' </summary>
        Public Sub DeleteByTrabajadores(ByVal Trabajadores As IUniqueIdentifiable )
            Instance().DeleteByTrabajadores(Trabajadores)
        End Sub

    

        ''' <summary>
        ''' Delete Salidas 
        ''' </summary>
        Public Overloads Sub Delete(ByVal IdSalidasP As System.Int32)
            Instance().Delete(IdSalidasP)
        End Sub

        ''' <summary>
        ''' Delete Salidas 
        ''' </summary>
        Public Overloads Sub Delete(ByVal entity As Entities.Salidas)
            Instance().Delete(entity)
        End Sub

        ''' <summary>
        ''' Save Salidas  
        ''' </summary>
        Public Overloads Sub Save(ByVal entity As Entities.Salidas)
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert Salidas 
        ''' </summary>
        Public Overloads Sub Insert(ByVal entity As Entities.Salidas)
            Instance().Insert(entity)
        End Sub

        ''' <summary>
        ''' Save Salidas 
        ''' </summary>
        Public Overloads Sub Save(ByVal IdSalidasP As System.Int32, ByVal IdAlmacen As System.Int32, ByVal IdTrabjador As System.Int32, ByVal IdSalidas As System.Int32, ByVal IdTienda As System.Int32, ByVal Fecha As System.DateTime, ByVal TipDoc As System.Int32, ByVal Tipo As System.String, ByVal Serie As System.String, ByVal Numero As System.String, ByVal IdCliente As System.Int32, ByVal Moneda As System.Int32, ByVal estado As System.String, ByVal totalvalor As System.Decimal, ByVal AlmacenesString As System.String, ByVal ClientesString As System.String, ByVal TrabajadoresString As System.String)
            Dim entity As Entities.Salidas = Instance().GetOne(IdSalidasP)
            If entity Is Nothing Then
                Throw New ApplicationException(String.Format("Entity not found. IUniqueIdentifiable values: {0} = {1}", "IdSalidasP", IdSalidasP))
            End If

            entity.IdAlmacen = IdAlmacen
            entity.IdTrabjador = IdTrabjador
            entity.IdSalidas = IdSalidas
            entity.IdTienda = IdTienda
            entity.Fecha = Fecha
            entity.TipDoc = TipDoc
            entity.Tipo = Tipo
            entity.Serie = Serie
            entity.Numero = Numero
            entity.IdCliente = IdCliente
            entity.Moneda = Moneda
            entity.estado = estado
            entity.totalvalor = totalvalor
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert Salidas
        ''' </summary>
        Public Overloads Sub Insert(ByVal IdAlmacen As System.Int32, ByVal IdTrabjador As System.Int32, ByVal IdSalidas As System.Int32, ByVal IdTienda As System.Int32, ByVal Fecha As System.DateTime, ByVal TipDoc As System.Int32, ByVal Tipo As System.String, ByVal Serie As System.String, ByVal Numero As System.String, ByVal IdCliente As System.Int32, ByVal Moneda As System.Int32, ByVal estado As System.String, ByVal totalvalor As System.Decimal)
            Dim entity As Entities.Salidas = New Entities.Salidas

            entity.IdAlmacen = IdAlmacen
            entity.IdTrabjador = IdTrabjador
            entity.IdSalidas = IdSalidas
            entity.IdTienda = IdTienda
            entity.Fecha = Fecha
            entity.TipDoc = TipDoc
            entity.Tipo = Tipo
            entity.Serie = Serie
            entity.Numero = Numero
            entity.IdCliente = IdCliente
            entity.Moneda = Moneda
            entity.estado = estado
            entity.totalvalor = totalvalor
            Instance().Insert(entity)
        End Sub

        

        'Database Queries 
        


    End Class
End Namespace


Namespace Loaders

    ''' <summary>
    ''' 
    ''' </summary>
    Partial Public Class SalidasLoader(Of T As {Salidas, New})
        Inherits BaseLoader(Of T, Salidas, ObjectList(Of T))
        Implements IGenericGateway



#Region "Singleton"

        Private Shared _instance As SalidasLoader(Of T)

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As SalidasLoader(Of T)
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New SalidasLoader(Of T)
                Else
                    Dim inst As SalidasLoader(Of T) = TryCast(HttpContext.Current.Items("abacusRules.SalidasLoaderSingleton"), SalidasLoader(Of T))
                    If inst Is Nothing Then
                        inst = New SalidasLoader(Of T)
                        HttpContext.Current.Items.Add("abacusRules.SalidasLoaderSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function

#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim s() as String={"IdSalidasP"}
            Return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            Return GetType(Salidas)
        End Function


        Protected Overrides ReadOnly Property TableName As String 
            Get
                Return "Salidas"
            End Get
        End Property

        

        


        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As Salidas)
            Dim _IdAlmacen As System.Nullable(Of System.Int32) 
If reader.IsDBNull(1) Then 
	 _IdAlmacen = New System.Nullable(Of System.Int32)
Else
	 _IdAlmacen = reader.GetInt32(1)
End If
Dim _IdTrabjador As System.Nullable(Of System.Int32) 
If reader.IsDBNull(2) Then 
	 _IdTrabjador = New System.Nullable(Of System.Int32)
Else
	 _IdTrabjador = reader.GetInt32(2)
End If
Dim _IdSalidas As System.Nullable(Of System.Int32) 
If reader.IsDBNull(3) Then 
	 _IdSalidas = New System.Nullable(Of System.Int32)
Else
	 _IdSalidas = reader.GetInt32(3)
End If
Dim _IdTienda As System.Nullable(Of System.Int32) 
If reader.IsDBNull(4) Then 
	 _IdTienda = New System.Nullable(Of System.Int32)
Else
	 _IdTienda = reader.GetInt32(4)
End If
Dim _Fecha As System.Nullable(Of System.DateTime) 
If reader.IsDBNull(5) Then 
	 _Fecha = New System.Nullable(Of System.DateTime)
Else
	 _Fecha = reader.GetDateTime(5)
End If
Dim _TipDoc As System.Nullable(Of System.Int32) 
If reader.IsDBNull(6) Then 
	 _TipDoc = New System.Nullable(Of System.Int32)
Else
	 _TipDoc = reader.GetInt32(6)
End If
Dim _Tipo As String
If reader.IsDBNull(7) Then 
	 _Tipo = ""
Else
	 _Tipo = reader.GetString(7)
End If
Dim _Serie As String
If reader.IsDBNull(8) Then 
	 _Serie = ""
Else
	 _Serie = reader.GetString(8)
End If
Dim _Numero As String
If reader.IsDBNull(9) Then 
	 _Numero = ""
Else
	 _Numero = reader.GetString(9)
End If
Dim _IdCliente As System.Nullable(Of System.Int32) 
If reader.IsDBNull(10) Then 
	 _IdCliente = New System.Nullable(Of System.Int32)
Else
	 _IdCliente = reader.GetInt32(10)
End If
Dim _Moneda As System.Nullable(Of System.Int32) 
If reader.IsDBNull(11) Then 
	 _Moneda = New System.Nullable(Of System.Int32)
Else
	 _Moneda = reader.GetInt32(11)
End If
Dim _estado As String
If reader.IsDBNull(12) Then 
	 _estado = ""
Else
	 _estado = reader.GetString(12)
End If
Dim _totalvalor As System.Nullable(Of System.Decimal) 
If reader.IsDBNull(13) Then 
	 _totalvalor = New System.Nullable(Of System.Decimal)
Else
	 _totalvalor = reader.GetDecimal(13)
End If
Dim _AlmacenesString As String
If reader.IsDBNull(14) Then 
	 _AlmacenesString = ""
Else
	 _AlmacenesString = reader.GetString(14)
End If
Dim _ClientesString As String
If reader.IsDBNull(15) Then 
	 _ClientesString = ""
Else
	 _ClientesString = reader.GetString(15)
End If
Dim _TrabajadoresString As String
If reader.IsDBNull(16) Then 
	 _TrabajadoresString = ""
Else
	 _TrabajadoresString = reader.GetString(16)
End If

            Dim Salidas As IMappeableSalidasObject  = CType(entity, IMappeableSalidasObject)
            Salidas.HydrateFields(reader.GetInt32(0), _
_IdAlmacen, _
_IdTrabjador, _
_IdSalidas, _
_IdTienda, _
_Fecha, _
_TipDoc, _
_Tipo, _
_Serie, _
_Numero, _
_IdCliente, _
_Moneda, _
_estado, _
_totalvalor, _
_AlmacenesString, _
_ClientesString, _
_TrabajadoresString)
        End Sub


        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function

        

        

        ' Complete the aggregations for this entity.         
        Protected Overrides Sub CompleteEntity(ByVal entity As t)
            Dim AlmacenesEntity As Objects.AlmacenesObject = Nothing 'Lazy load
Dim ClientesEntity As Objects.ClientesObject = Nothing 'Lazy load
Dim TrabajadoresEntity As Objects.TrabajadoresObject = Nothing 'Lazy load
            CType(entity, IMappeableSalidas).CompleteEntity(AlmacenesEntity, ClientesEntity, TrabajadoresEntity)
        End Sub

        


        ''' <summary>
        ''' Get a Salidas by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As t
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a SalidasList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As ObjectList(Of T)
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' GetOne By Params
        ''' </summary>
        Public Overloads Function GetOne(IdSalidasP As System.Int32) As t
            Return MyBase.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "Salidas_GetOne", IdSalidasP)
        End Function
        


        ' GetOne By Objects and Params
            

        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByAlmacenes(IdAlmacen As System.Int32) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Salidas_GetByAlmacenes", IdAlmacen)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByAlmacenes(ByVal Almacenes As IUniqueIdentifiable) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Salidas_GetByAlmacenes", Almacenes.Identifier())
        End Function

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByClientes(IdCliente As System.Int32) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Salidas_GetByClientes", IdCliente)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByClientes(ByVal Clientes As IUniqueIdentifiable) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Salidas_GetByClientes", Clientes.Identifier())
        End Function

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByTrabajadores(IdTrabjador As System.Int32) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Salidas_GetByTrabajadores", IdTrabjador)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByTrabajadores(ByVal Trabajadores As IUniqueIdentifiable) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Salidas_GetByTrabajadores", Trabajadores.Identifier())
        End Function

    


        'Database Queries 
        


        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace




