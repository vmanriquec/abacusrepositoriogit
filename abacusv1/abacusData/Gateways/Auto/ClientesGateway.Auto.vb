
'------------------------------------------------------------------------------
' This file was generated by Cooperator Modeler, version 1.3.3.0
' Created: 20/08/2013 - 01:48 p.m.
' This is a partial class file. The other one is ClientesGateway.vb
' You should not modifiy this file, please edit the other partial class file.
'------------------------------------------------------------------------------

Imports System
Imports abacusRules.Objects
Imports Cooperator.Framework.Data
Imports Cooperator.Framework.Data.Exceptions
Imports Cooperator.Framework.Core
Imports System.Data.Common
Imports System.Reflection
Imports System.Web

Namespace Gateways
        
    Public Partial Class ClientesGateway 
        Inherits BaseGateway(Of ClientesObject, ClientesObjectList)
        Implements IGenericGateway

#Region "Singleton"

        Private Shared _instance As ClientesGateway

        Private Sub New()
        End Sub

        Public Shared Function Instance() As ClientesGateway
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New ClientesGateway()
                Else
                    Dim inst As ClientesGateway = TryCast(HttpContext.Current.Items("abacusRules.ClientesGatewaySingleton"), ClientesGateway)
                    If inst Is Nothing Then
                        inst = New ClientesGateway()
                        HttpContext.Current.Items.Add("abacusRules.ClientesGatewaySingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function

#End Region

        ''' <summary>
        ''' Return the mapped table name
        ''' </summary>
        Protected Overrides ReadOnly Property TableName() As String
            Get
                Return "Clientes"
            End Get
        End Property

        ''' <summary>
        ''' Return the ClientesGateway type FullName
        ''' </summary>
        Protected Overrides ReadOnly Property RuleName() As String
            Get
                Return GetType(ClientesGateway ).FullName
            End Get
        End Property


        

        


        ''' <summary>
        ''' Assign properties values based on DataReader
        ''' </summary>
        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As ClientesObject )
            Dim _TipoCliente As System.Nullable(Of System.Int32) 
If reader.IsDBNull(1) Then 
	 _TipoCliente = New System.Nullable(Of System.Int32)
Else
	 _TipoCliente = reader.GetInt32(1)
End If
Dim _Nombre As String
If reader.IsDBNull(2) Then 
	 _Nombre = ""
Else
	 _Nombre = reader.GetString(2)
End If
Dim _Apellido As String
If reader.IsDBNull(3) Then 
	 _Apellido = ""
Else
	 _Apellido = reader.GetString(3)
End If
Dim _Cliente As String
If reader.IsDBNull(4) Then 
	 _Cliente = ""
Else
	 _Cliente = reader.GetString(4)
End If
Dim _NomComercial As String
If reader.IsDBNull(5) Then 
	 _NomComercial = ""
Else
	 _NomComercial = reader.GetString(5)
End If
Dim _TipoDI As System.Nullable(Of System.Int32) 
If reader.IsDBNull(6) Then 
	 _TipoDI = New System.Nullable(Of System.Int32)
Else
	 _TipoDI = reader.GetInt32(6)
End If
Dim _DI As String
If reader.IsDBNull(7) Then 
	 _DI = ""
Else
	 _DI = reader.GetString(7)
End If
Dim _Direccion As String
If reader.IsDBNull(8) Then 
	 _Direccion = ""
Else
	 _Direccion = reader.GetString(8)
End If
Dim _Distrito As System.Nullable(Of System.Int32) 
If reader.IsDBNull(9) Then 
	 _Distrito = New System.Nullable(Of System.Int32)
Else
	 _Distrito = reader.GetInt32(9)
End If
Dim _Provincia As System.Nullable(Of System.Int32) 
If reader.IsDBNull(10) Then 
	 _Provincia = New System.Nullable(Of System.Int32)
Else
	 _Provincia = reader.GetInt32(10)
End If
Dim _Pais As String
If reader.IsDBNull(11) Then 
	 _Pais = ""
Else
	 _Pais = reader.GetString(11)
End If
Dim _Telefono1 As String
If reader.IsDBNull(12) Then 
	 _Telefono1 = ""
Else
	 _Telefono1 = reader.GetString(12)
End If
Dim _Telefono2 As String
If reader.IsDBNull(13) Then 
	 _Telefono2 = ""
Else
	 _Telefono2 = reader.GetString(13)
End If
Dim _Fax As String
If reader.IsDBNull(14) Then 
	 _Fax = ""
Else
	 _Fax = reader.GetString(14)
End If
Dim _Email As String
If reader.IsDBNull(15) Then 
	 _Email = ""
Else
	 _Email = reader.GetString(15)
End If
Dim _Logo As String
If reader.IsDBNull(16) Then 
	 _Logo = ""
Else
	 _Logo = reader.GetString(16)
End If
Dim _Movil As String
If reader.IsDBNull(17) Then 
	 _Movil = ""
Else
	 _Movil = reader.GetString(17)
End If
Dim _TipMovil As String
If reader.IsDBNull(18) Then 
	 _TipMovil = ""
Else
	 _TipMovil = reader.GetString(18)
End If
Dim _Observaciones As String
If reader.IsDBNull(19) Then 
	 _Observaciones = ""
Else
	 _Observaciones = reader.GetString(19)
End If
Dim _CodCliente As String
If reader.IsDBNull(20) Then 
	 _CodCliente = ""
Else
	 _CodCliente = reader.GetString(20)
End If
Dim _CondPago As System.Nullable(Of System.Int32) 
If reader.IsDBNull(21) Then 
	 _CondPago = New System.Nullable(Of System.Int32)
Else
	 _CondPago = reader.GetInt32(21)
End If
Dim _Ruta As String
If reader.IsDBNull(22) Then 
	 _Ruta = ""
Else
	 _Ruta = reader.GetString(22)
End If
Dim _fechaderegistro As System.Nullable(Of System.DateTime) 
If reader.IsDBNull(23) Then 
	 _fechaderegistro = New System.Nullable(Of System.DateTime)
Else
	 _fechaderegistro = reader.GetDateTime(23)
End If
Dim _estadocliente As String
If reader.IsDBNull(24) Then 
	 _estadocliente = ""
Else
	 _estadocliente = reader.GetString(24)
End If
Dim _DistritosString As String
If reader.IsDBNull(25) Then 
	 _DistritosString = ""
Else
	 _DistritosString = reader.GetString(25)
End If
Dim _ProvinciasString As String
If reader.IsDBNull(26) Then 
	 _ProvinciasString = ""
Else
	 _ProvinciasString = reader.GetString(26)
End If

            Dim Clientes As IMappeableClientesObject  = CType(entity, IMappeableClientesObject)
            Clientes.HydrateFields(reader.GetInt32(0), _
_TipoCliente, _
_Nombre, _
_Apellido, _
_Cliente, _
_NomComercial, _
_TipoDI, _
_DI, _
_Direccion, _
_Distrito, _
_Provincia, _
_Pais, _
_Telefono1, _
_Telefono2, _
_Fax, _
_Email, _
_Logo, _
_Movil, _
_TipMovil, _
_Observaciones, _
_CodCliente, _
_CondPago, _
_Ruta, _
_fechaderegistro, _
_estadocliente, _
_DistritosString, _
_ProvinciasString)
            CType(entity, IObject).State = ObjectState.Restored
        End Sub

        ''' <summary>
        ''' Get field values to call insertion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForInsert(ByVal entity As ClientesObject) As Object()
            Dim Clientes As IMappeableClientesObject = CType(entity, IMappeableClientesObject)
            Return Clientes.GetFieldsForInsert()
        End Function

        ''' <summary>
        ''' Get field values to call update stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForUpdate(ByVal entity As ClientesObject) As Object()
            Dim Clientes As IMappeableClientesObject = CType(entity, IMappeableClientesObject)
            Return Clientes.GetFieldsForUpdate()
        End Function

        ''' <summary>
        ''' Get field values to call deletion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForDelete(ByVal entity As ClientesObject) As Object()
            Dim Clientes As IMappeableClientesObject = CType(entity, IMappeableClientesObject)
            Return Clientes.GetFieldsForDelete()
        End Function

        ''' <summary>
        ''' Raised after insert and update. Update properties from Output parameters
        ''' </summary>
        Protected Overrides Sub UpdateObjectFromOutputParams(ByVal row As ClientesObject, parameters As Object())
            ' Update properties from Output parameters
            CType(row, IMappeableClientesObject).UpdateObjectFromOutputParams(parameters)
            CType(row, IObject).State = ObjectState.Restored
        End Sub

        ''' <summary>
        ''' StoredProceduresPrefix, for example: coop_
        ''' </summary>
        Protected Overrides Function StoredProceduresPrefix() As String
            Return "coop_"
        End Function


        ''' <summary>
        ''' Get a ClientesObject by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As ClientesObject 
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a ClientesObjectList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As ClientesObjectList 
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function



        ''' <summary>
        ''' Get a ClientesObject by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetOne(ByVal IdCliente As System.Int32) As ClientesObject         
            Return MyBase.GetOne(New ClientesObject(IdCliente))
        End Function

            


        
        ''' <summary>
        ''' Get a ClientesObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByDistritos(ByVal transaction As DbTransaction, ByVal Distrito As System.Int32) As ClientesObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Clientes_GetByDistritos", Distrito)
        End Function

        ''' <summary>
        ''' Get a ClientesObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByDistritos(ByVal transaction As DbTransaction, Distritos As IUniqueIdentifiable) As ClientesObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Clientes_GetByDistritos", Distritos.Identifier())
        End Function
    
        ''' <summary>
        ''' Get a ClientesObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByProvincias(ByVal transaction As DbTransaction, ByVal Provincia As System.Int32) As ClientesObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Clientes_GetByProvincias", Provincia)
        End Function

        ''' <summary>
        ''' Get a ClientesObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByProvincias(ByVal transaction As DbTransaction, Provincias As IUniqueIdentifiable) As ClientesObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Clientes_GetByProvincias", Provincias.Identifier())
        End Function
    


        
        ''' <summary>
        ''' Get a ClientesObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByDistritos(ByVal Distrito As System.Int32) As ClientesObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Clientes_GetByDistritos", Distrito)
        End Function

        ''' <summary>
        ''' Get a ClientesObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByDistritos(Distritos As IUniqueIdentifiable) As ClientesObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Clientes_GetByDistritos", Distritos.Identifier())
        End Function
    
        ''' <summary>
        ''' Get a ClientesObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByProvincias(ByVal Provincia As System.Int32) As ClientesObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Clientes_GetByProvincias", Provincia)
        End Function

        ''' <summary>
        ''' Get a ClientesObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByProvincias(Provincias As IUniqueIdentifiable) As ClientesObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Clientes_GetByProvincias", Provincias.Identifier())
        End Function
    

        
        ''' <summary>
        ''' Delete Clientes 
        ''' </summary>
        Public Overloads Sub Delete(ByVal IdCliente As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Clientes_Delete", IdCliente)
        End Sub

        ''' <summary>
        ''' Delete Clientes
        ''' </summary>
        Public Overloads Sub Delete(transaction As DbTransaction , ByVal IdCliente As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Clientes_Delete", IdCliente)
        End Sub

            



        

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

        ''' <summary>
        ''' Delete Clientes By Distritos
        ''' </summary>
        Public Overloads Sub DeleteByDistritos(ByVal Distrito As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Clientes_DeleteByDistritos", Distrito)
        End Sub

        ''' <summary>
        ''' Delete Clientes By Distritos
        ''' </summary>
        Public Overloads Sub DeleteByDistritos(ByVal transaction As DbTransaction , ByVal Distrito As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Clientes_DeleteByDistritos", Distrito)
        End Sub

        ''' <summary>
        ''' Delete Clientes By Distritos
        ''' </summary>
        Public Overloads Sub DeleteByDistritos(ByVal Distritos As IUniqueIdentifiable )
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Clientes_DeleteByDistritos", Distritos.Identifier())
        End Sub

        ''' <summary>
        ''' Delete Clientes By Distritos
        ''' </summary>
        Public Overloads Sub DeleteByDistritos(ByVal transaction As DbTransaction , ByVal Distritos As IUniqueIdentifiable)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Clientes_DeleteByDistritos", Distritos.Identifier())
        End Sub

        

    

        ''' <summary>
        ''' Delete Clientes By Provincias
        ''' </summary>
        Public Overloads Sub DeleteByProvincias(ByVal Provincia As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Clientes_DeleteByProvincias", Provincia)
        End Sub

        ''' <summary>
        ''' Delete Clientes By Provincias
        ''' </summary>
        Public Overloads Sub DeleteByProvincias(ByVal transaction As DbTransaction , ByVal Provincia As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Clientes_DeleteByProvincias", Provincia)
        End Sub

        ''' <summary>
        ''' Delete Clientes By Provincias
        ''' </summary>
        Public Overloads Sub DeleteByProvincias(ByVal Provincias As IUniqueIdentifiable )
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Clientes_DeleteByProvincias", Provincias.Identifier())
        End Sub

        ''' <summary>
        ''' Delete Clientes By Provincias
        ''' </summary>
        Public Overloads Sub DeleteByProvincias(ByVal transaction As DbTransaction , ByVal Provincias As IUniqueIdentifiable)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Clientes_DeleteByProvincias", Provincias.Identifier())
        End Sub

        

    


        'Database Queries 
        



        #Region "IGenericGateway"

        Private Function GetOne2(identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GeyByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class
End Namespace




