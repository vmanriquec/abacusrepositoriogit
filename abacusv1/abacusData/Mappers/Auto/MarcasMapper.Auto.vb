
'------------------------------------------------------------------------------
' This file was generated by Cooperator Modeler, version 1.3.3.0
' Created: 20/08/2013 - 01:49 p.m.
' This is a partial class file. The other one is MarcasMapper.cs
' You should not modifiy this file, please edit the other partial class file.
'------------------------------------------------------------------------------

Imports System
Imports abacusRules.Entities
Imports abacusRules.Objects
Imports Cooperator.Framework.Data
Imports Cooperator.Framework.Data.Exceptions
Imports Cooperator.Framework.Core
Imports System.Data.Common
Imports System.Reflection
Imports System.Web


Namespace Mappers
    

    Public Partial Class MarcasMapper
        Inherits BaseGateway(Of MarcasObject, MarcasObjectList)
        Implements IGenericGateway

#Region "Singleton"

        Private Shared _instance As MarcasMapper

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As MarcasMapper
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New MarcasMapper()
                Else
                    Dim inst As MarcasMapper = TryCast(HttpContext.Current.Items("abacusRules.MarcasMapperSingleton"), MarcasMapper)
                    If inst Is Nothing Then
                        inst = New MarcasMapper()
                        HttpContext.Current.Items.Add("abacusRules.MarcasMapperSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function


#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim  s() as String={"IdMarca"}
            return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return GetType(MarcasObject)
        End Function


        ''' <summary>
        ''' Return the mapped table name
        ''' </summary>
        Protected Overrides ReadOnly Property TableName() As String 
            Get
                Return "Marcas"
            End Get
        End Property

        ''' <summary>
        ''' Return the MarcasGateway type FullName
        ''' </summary>
        Protected Overrides ReadOnly Property RuleName() As String
            Get
                Return GetType(MarcasMapper).FullName
            End Get
        End Property


        

        

        ''' <summary>
        ''' Assign properties values based on DataReader
        ''' </summary>
        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As MarcasObject)
            Dim _Marca As String
If reader.IsDBNull(1) Then 
	 _Marca = ""
Else
	 _Marca = reader.GetString(1)
End If

            Dim Marcas As IMappeableMarcasObject  = CType(entity, IMappeableMarcasObject)
            Marcas.HydrateFields(reader.GetInt32(0), _
_Marca)
        End Sub

        ''' <summary>
        ''' Get field values to call insertion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForInsert(ByVal entity As MarcasObject) As Object()
            Dim Marcas As IMappeableMarcasObject = CType(entity, IMappeableMarcasObject)
            Return Marcas.GetFieldsForInsert()
        End Function

        ''' <summary>
        ''' Get field values to call update stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForUpdate(ByVal entity As MarcasObject) As Object()
            Dim Marcas As IMappeableMarcasObject = CType(entity, IMappeableMarcasObject)
            Return Marcas.GetFieldsForUpdate()
        End Function

        ''' <summary>
        ''' Get field values to call deletion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForDelete(ByVal entity As MarcasObject) As Object()
            Dim Marcas As IMappeableMarcasObject = CType(entity, IMappeableMarcasObject)
            Return Marcas.GetFieldsForDelete()
        End Function

        ''' <summary>
        ''' Raised after insert and update. Update properties from Output parameters
        ''' </summary>
        Protected Overrides Sub UpdateObjectFromOutputParams(ByVal entity As MarcasObject, ByVal parameters As Object())
            ' Update properties from Output parameters
            CType(entity, IMappeableMarcasObject).UpdateObjectFromOutputParams(parameters)
        End Sub

        ''' <summary>
        ''' StoredProceduresPrefix, for example: coop_
        ''' </summary>
        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function


          



        ''' <summary>
        ''' Get a Marcas by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As MarcasObject
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a MarcasList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As MarcasObjectList
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetOne(IdMarca As System.Int32) As MarcasObject
            Return MyBase.GetOne(New MarcasObject(IdMarca))
        End Function

        

        ' GetOne By Objects and Params
            

        


        

        





        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(IdMarca As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Marcas_Delete", IdMarca)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(ByVal transaction As DbTransaction ,IdMarca As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Marcas_Delete", IdMarca)
        End Sub

        ' Delete By Objects and Params
            



        

    

    


        'Database Queries 
        






        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace


Namespace Wrappers
    ''' <summary>
    ''' 
    ''' </summary>
    Public Class MarcasMapperWrapper

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            return Instance().GetPKPropertiesNames()
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return Instance().GetMappingType()
        End Function


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function Instance() As abacusRules.Mappers.MarcasMapper
            Return abacusRules.Mappers.MarcasMapper.Instance()
        End Function

        
        ''' <summary>
        ''' Get a Marcas Entity by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetOne(ByVal IdMarca As System.Int32) As Objects.MarcasObject         
            Return Instance().GetOne( IdMarca)
        End Function
        

        ' GetBy Objects and Params
            

        

        ''' <summary>
        ''' GetAll Marcas 
        ''' </summary>
        Public Function GetAll() As Objects.MarcasObjectList
            Return Instance().GetAll()
        End Function

        
        


            

        

        ''' <summary>
        ''' Delete Marcas 
        ''' </summary>
        Public Overloads Sub Delete(ByVal IdMarca As System.Int32)
            Instance().Delete(IdMarca)
        End Sub

        ''' <summary>
        ''' Delete Marcas 
        ''' </summary>
        Public Overloads Sub Delete(ByVal entity As Objects.MarcasObject)
            Instance().Delete(entity)
        End Sub

        ''' <summary>
        ''' Save Marcas  
        ''' </summary>
        Public Overloads Sub Save(ByVal entity As Objects.MarcasObject)
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert Marcas 
        ''' </summary>
        Public Overloads Sub Insert(ByVal entity As Objects.MarcasObject)
            Instance().Insert(entity)
        End Sub

        ''' <summary>
        ''' Save Marcas 
        ''' </summary>
        Public Overloads Sub Save(ByVal IdMarca As System.Int32, ByVal Marca As System.String)
            Dim entity As Objects.MarcasObject = Instance().GetOne(IdMarca)
            If entity Is Nothing Then
                Throw New ApplicationException(String.Format("Entity not found. IUniqueIdentifiable values: {0} = {1}", "IdMarca", IdMarca))
            End If

            entity.Marca = Marca
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert Marcas
        ''' </summary>
        Public Overloads Sub Insert(ByVal Marca As System.String)
            Dim entity As Objects.MarcasObject = New Objects.MarcasObject

            entity.Marca = Marca
            Instance().Insert(entity)
        End Sub

        

        'Database Queries 
        


    End Class
End Namespace


Namespace Loaders

    ''' <summary>
    ''' 
    ''' </summary>
    Partial Public Class MarcasLoader(Of T As {MarcasObject, New})
        Inherits BaseLoader(Of T, MarcasObject, ObjectList(Of T))
        Implements IGenericGateway



#Region "Singleton"

        Private Shared _instance As MarcasLoader(Of T)

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As MarcasLoader(Of T)
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New MarcasLoader(Of T)
                Else
                    Dim inst As MarcasLoader(Of T) = TryCast(HttpContext.Current.Items("abacusRules.MarcasLoaderSingleton"), MarcasLoader(Of T))
                    If inst Is Nothing Then
                        inst = New MarcasLoader(Of T)
                        HttpContext.Current.Items.Add("abacusRules.MarcasLoaderSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function

#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim s() as String={"IdMarca"}
            Return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            Return GetType(MarcasObject)
        End Function


        Protected Overrides ReadOnly Property TableName As String 
            Get
                Return "Marcas"
            End Get
        End Property

        

        


        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As MarcasObject)
            Dim _Marca As String
If reader.IsDBNull(1) Then 
	 _Marca = ""
Else
	 _Marca = reader.GetString(1)
End If

            Dim Marcas As IMappeableMarcasObject  = CType(entity, IMappeableMarcasObject)
            Marcas.HydrateFields(reader.GetInt32(0), _
_Marca)
        End Sub


        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function

        


        ''' <summary>
        ''' Get a Marcas by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As t
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a MarcasList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As ObjectList(Of T)
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' GetOne By Params
        ''' </summary>
        Public Overloads Function GetOne(IdMarca As System.Int32) As t
            Return MyBase.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "Marcas_GetOne", IdMarca)
        End Function
        


        ' GetOne By Objects and Params
            

        


        'Database Queries 
        


        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace




