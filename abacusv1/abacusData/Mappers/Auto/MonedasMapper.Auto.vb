
'------------------------------------------------------------------------------
' This file was generated by Cooperator Modeler, version 1.3.3.0
' Created: 20/08/2013 - 01:49 p.m.
' This is a partial class file. The other one is MonedasMapper.cs
' You should not modifiy this file, please edit the other partial class file.
'------------------------------------------------------------------------------

Imports System
Imports abacusRules.Entities
Imports abacusRules.Objects
Imports Cooperator.Framework.Data
Imports Cooperator.Framework.Data.Exceptions
Imports Cooperator.Framework.Core
Imports System.Data.Common
Imports System.Reflection
Imports System.Web


Namespace Mappers
    

    Public Partial Class MonedasMapper
        Inherits BaseGateway(Of MonedasObject, MonedasObjectList)
        Implements IGenericGateway

#Region "Singleton"

        Private Shared _instance As MonedasMapper

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As MonedasMapper
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New MonedasMapper()
                Else
                    Dim inst As MonedasMapper = TryCast(HttpContext.Current.Items("abacusRules.MonedasMapperSingleton"), MonedasMapper)
                    If inst Is Nothing Then
                        inst = New MonedasMapper()
                        HttpContext.Current.Items.Add("abacusRules.MonedasMapperSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function


#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim  s() as String={"IdMoneda"}
            return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return GetType(MonedasObject)
        End Function


        ''' <summary>
        ''' Return the mapped table name
        ''' </summary>
        Protected Overrides ReadOnly Property TableName() As String 
            Get
                Return "Monedas"
            End Get
        End Property

        ''' <summary>
        ''' Return the MonedasGateway type FullName
        ''' </summary>
        Protected Overrides ReadOnly Property RuleName() As String
            Get
                Return GetType(MonedasMapper).FullName
            End Get
        End Property


        

        

        ''' <summary>
        ''' Assign properties values based on DataReader
        ''' </summary>
        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As MonedasObject)
            Dim _Moneda As String
If reader.IsDBNull(1) Then 
	 _Moneda = ""
Else
	 _Moneda = reader.GetString(1)
End If
Dim _Simbolo As String
If reader.IsDBNull(2) Then 
	 _Simbolo = ""
Else
	 _Simbolo = reader.GetString(2)
End If

            Dim Monedas As IMappeableMonedasObject  = CType(entity, IMappeableMonedasObject)
            Monedas.HydrateFields(reader.GetInt32(0), _
_Moneda, _
_Simbolo)
        End Sub

        ''' <summary>
        ''' Get field values to call insertion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForInsert(ByVal entity As MonedasObject) As Object()
            Dim Monedas As IMappeableMonedasObject = CType(entity, IMappeableMonedasObject)
            Return Monedas.GetFieldsForInsert()
        End Function

        ''' <summary>
        ''' Get field values to call update stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForUpdate(ByVal entity As MonedasObject) As Object()
            Dim Monedas As IMappeableMonedasObject = CType(entity, IMappeableMonedasObject)
            Return Monedas.GetFieldsForUpdate()
        End Function

        ''' <summary>
        ''' Get field values to call deletion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForDelete(ByVal entity As MonedasObject) As Object()
            Dim Monedas As IMappeableMonedasObject = CType(entity, IMappeableMonedasObject)
            Return Monedas.GetFieldsForDelete()
        End Function

        ''' <summary>
        ''' Raised after insert and update. Update properties from Output parameters
        ''' </summary>
        Protected Overrides Sub UpdateObjectFromOutputParams(ByVal entity As MonedasObject, ByVal parameters As Object())
            ' Update properties from Output parameters
            CType(entity, IMappeableMonedasObject).UpdateObjectFromOutputParams(parameters)
        End Sub

        ''' <summary>
        ''' StoredProceduresPrefix, for example: coop_
        ''' </summary>
        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function


          



        ''' <summary>
        ''' Get a Monedas by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As MonedasObject
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a MonedasList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As MonedasObjectList
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetOne(IdMoneda As System.Int32) As MonedasObject
            Return MyBase.GetOne(New MonedasObject(IdMoneda))
        End Function

        

        ' GetOne By Objects and Params
            

        


        

        





        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(IdMoneda As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Monedas_Delete", IdMoneda)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(ByVal transaction As DbTransaction ,IdMoneda As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Monedas_Delete", IdMoneda)
        End Sub

        ' Delete By Objects and Params
            



        

    

    

    


        'Database Queries 
        






        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace


Namespace Wrappers
    ''' <summary>
    ''' 
    ''' </summary>
    Public Class MonedasMapperWrapper

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            return Instance().GetPKPropertiesNames()
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return Instance().GetMappingType()
        End Function


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function Instance() As abacusRules.Mappers.MonedasMapper
            Return abacusRules.Mappers.MonedasMapper.Instance()
        End Function

        
        ''' <summary>
        ''' Get a Monedas Entity by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetOne(ByVal IdMoneda As System.Int32) As Objects.MonedasObject         
            Return Instance().GetOne( IdMoneda)
        End Function
        

        ' GetBy Objects and Params
            

        

        ''' <summary>
        ''' GetAll Monedas 
        ''' </summary>
        Public Function GetAll() As Objects.MonedasObjectList
            Return Instance().GetAll()
        End Function

        
        


            

        

        ''' <summary>
        ''' Delete Monedas 
        ''' </summary>
        Public Overloads Sub Delete(ByVal IdMoneda As System.Int32)
            Instance().Delete(IdMoneda)
        End Sub

        ''' <summary>
        ''' Delete Monedas 
        ''' </summary>
        Public Overloads Sub Delete(ByVal entity As Objects.MonedasObject)
            Instance().Delete(entity)
        End Sub

        ''' <summary>
        ''' Save Monedas  
        ''' </summary>
        Public Overloads Sub Save(ByVal entity As Objects.MonedasObject)
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert Monedas 
        ''' </summary>
        Public Overloads Sub Insert(ByVal entity As Objects.MonedasObject)
            Instance().Insert(entity)
        End Sub

        ''' <summary>
        ''' Save Monedas 
        ''' </summary>
        Public Overloads Sub Save(ByVal IdMoneda As System.Int32, ByVal Moneda As System.String, ByVal Simbolo As System.String)
            Dim entity As Objects.MonedasObject = Instance().GetOne(IdMoneda)
            If entity Is Nothing Then
                Throw New ApplicationException(String.Format("Entity not found. IUniqueIdentifiable values: {0} = {1}", "IdMoneda", IdMoneda))
            End If

            entity.Moneda = Moneda
            entity.Simbolo = Simbolo
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert Monedas
        ''' </summary>
        Public Overloads Sub Insert(ByVal Moneda As System.String, ByVal Simbolo As System.String)
            Dim entity As Objects.MonedasObject = New Objects.MonedasObject

            entity.Moneda = Moneda
            entity.Simbolo = Simbolo
            Instance().Insert(entity)
        End Sub

        

        'Database Queries 
        


    End Class
End Namespace


Namespace Loaders

    ''' <summary>
    ''' 
    ''' </summary>
    Partial Public Class MonedasLoader(Of T As {MonedasObject, New})
        Inherits BaseLoader(Of T, MonedasObject, ObjectList(Of T))
        Implements IGenericGateway



#Region "Singleton"

        Private Shared _instance As MonedasLoader(Of T)

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As MonedasLoader(Of T)
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New MonedasLoader(Of T)
                Else
                    Dim inst As MonedasLoader(Of T) = TryCast(HttpContext.Current.Items("abacusRules.MonedasLoaderSingleton"), MonedasLoader(Of T))
                    If inst Is Nothing Then
                        inst = New MonedasLoader(Of T)
                        HttpContext.Current.Items.Add("abacusRules.MonedasLoaderSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function

#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim s() as String={"IdMoneda"}
            Return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            Return GetType(MonedasObject)
        End Function


        Protected Overrides ReadOnly Property TableName As String 
            Get
                Return "Monedas"
            End Get
        End Property

        

        


        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As MonedasObject)
            Dim _Moneda As String
If reader.IsDBNull(1) Then 
	 _Moneda = ""
Else
	 _Moneda = reader.GetString(1)
End If
Dim _Simbolo As String
If reader.IsDBNull(2) Then 
	 _Simbolo = ""
Else
	 _Simbolo = reader.GetString(2)
End If

            Dim Monedas As IMappeableMonedasObject  = CType(entity, IMappeableMonedasObject)
            Monedas.HydrateFields(reader.GetInt32(0), _
_Moneda, _
_Simbolo)
        End Sub


        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function

        


        ''' <summary>
        ''' Get a Monedas by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As t
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a MonedasList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As ObjectList(Of T)
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' GetOne By Params
        ''' </summary>
        Public Overloads Function GetOne(IdMoneda As System.Int32) As t
            Return MyBase.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "Monedas_GetOne", IdMoneda)
        End Function
        


        ' GetOne By Objects and Params
            

        


        'Database Queries 
        


        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace




