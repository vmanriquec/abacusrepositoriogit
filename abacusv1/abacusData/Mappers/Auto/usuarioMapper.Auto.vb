
'------------------------------------------------------------------------------
' This file was generated by Cooperator Modeler, version 1.3.3.0
' Created: 20/08/2013 - 01:49 p.m.
' This is a partial class file. The other one is usuarioMapper.cs
' You should not modifiy this file, please edit the other partial class file.
'------------------------------------------------------------------------------

Imports System
Imports abacusRules.Entities
Imports abacusRules.Objects
Imports Cooperator.Framework.Data
Imports Cooperator.Framework.Data.Exceptions
Imports Cooperator.Framework.Core
Imports System.Data.Common
Imports System.Reflection
Imports System.Web


Namespace Mappers
    

    Public Partial Class usuarioMapper
        Inherits BaseGateway(Of usuario, usuarioList)
        Implements IGenericGateway

#Region "Singleton"

        Private Shared _instance As usuarioMapper

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As usuarioMapper
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New usuarioMapper()
                Else
                    Dim inst As usuarioMapper = TryCast(HttpContext.Current.Items("abacusRules.usuarioMapperSingleton"), usuarioMapper)
                    If inst Is Nothing Then
                        inst = New usuarioMapper()
                        HttpContext.Current.Items.Add("abacusRules.usuarioMapperSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function


#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim  s() as String={"idusuario"}
            return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return GetType(usuario)
        End Function


        ''' <summary>
        ''' Return the mapped table name
        ''' </summary>
        Protected Overrides ReadOnly Property TableName() As String 
            Get
                Return "usuario"
            End Get
        End Property

        ''' <summary>
        ''' Return the usuarioGateway type FullName
        ''' </summary>
        Protected Overrides ReadOnly Property RuleName() As String
            Get
                Return GetType(usuarioMapper).FullName
            End Get
        End Property


        
        ''' <summary>
        ''' If this table is read only
        ''' </summary>
        Protected Overrides Function IsReadOnly() As Boolean
            Return True
        End Function
        

        

        ''' <summary>
        ''' Assign properties values based on DataReader
        ''' </summary>
        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As usuario)
            Dim _nombreusuario As String
If reader.IsDBNull(0) Then 
	 _nombreusuario = ""
Else
	 _nombreusuario = reader.GetString(0)
End If
Dim _claveusuario As String
If reader.IsDBNull(1) Then 
	 _claveusuario = ""
Else
	 _claveusuario = reader.GetString(1)
End If
Dim _descripcion As String
If reader.IsDBNull(2) Then 
	 _descripcion = ""
Else
	 _descripcion = reader.GetString(2)
End If
Dim _estado As String
If reader.IsDBNull(3) Then 
	 _estado = ""
Else
	 _estado = reader.GetString(3)
End If
Dim _idtipousuario As System.Nullable(Of System.Int32) 
If reader.IsDBNull(5) Then 
	 _idtipousuario = New System.Nullable(Of System.Int32)
Else
	 _idtipousuario = reader.GetInt32(5)
End If
Dim _idtrabjador As System.Nullable(Of System.Int32) 
If reader.IsDBNull(6) Then 
	 _idtrabjador = New System.Nullable(Of System.Int32)
Else
	 _idtrabjador = reader.GetInt32(6)
End If
Dim _tipousuarioString As String
If reader.IsDBNull(7) Then 
	 _tipousuarioString = ""
Else
	 _tipousuarioString = reader.GetString(7)
End If
Dim _TrabajadoresString As String
If reader.IsDBNull(8) Then 
	 _TrabajadoresString = ""
Else
	 _TrabajadoresString = reader.GetString(8)
End If

            Dim usuario As IMappeableusuarioObject  = CType(entity, IMappeableusuarioObject)
            usuario.HydrateFields(_nombreusuario, _
_claveusuario, _
_descripcion, _
_estado, _
reader.GetInt32(4), _
_idtipousuario, _
_idtrabjador, _
_tipousuarioString, _
_TrabajadoresString)
        End Sub

        ''' <summary>
        ''' Get field values to call insertion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForInsert(ByVal entity As usuario) As Object()
            Dim usuario As IMappeableusuarioObject = CType(entity, IMappeableusuarioObject)
            Return usuario.GetFieldsForInsert()
        End Function

        ''' <summary>
        ''' Get field values to call update stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForUpdate(ByVal entity As usuario) As Object()
            Dim usuario As IMappeableusuarioObject = CType(entity, IMappeableusuarioObject)
            Return usuario.GetFieldsForUpdate()
        End Function

        ''' <summary>
        ''' Get field values to call deletion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForDelete(ByVal entity As usuario) As Object()
            Dim usuario As IMappeableusuarioObject = CType(entity, IMappeableusuarioObject)
            Return usuario.GetFieldsForDelete()
        End Function

        ''' <summary>
        ''' Raised after insert and update. Update properties from Output parameters
        ''' </summary>
        Protected Overrides Sub UpdateObjectFromOutputParams(ByVal entity As usuario, ByVal parameters As Object())
            ' Update properties from Output parameters
            CType(entity, IMappeableusuarioObject).UpdateObjectFromOutputParams(parameters)
        End Sub

        ''' <summary>
        ''' StoredProceduresPrefix, for example: coop_
        ''' </summary>
        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function


        


        

        ''' <summary>
        ''' Complete the aggregations for this entity. 
        ''' </summary>
        Protected Overrides Sub CompleteEntity(ByVal entity As usuario)
            Dim tipousuarioEntity As Objects.tipousuarioObject = Nothing 'Lazy load
Dim TrabajadoresEntity As Objects.TrabajadoresObject = Nothing 'Lazy load
            CType(entity, IMappeableusuario).CompleteEntity(tipousuarioEntity, TrabajadoresEntity)
        End Sub


        # Region "CRUD Operations"
        

        # End Region
        
        ''' <summary>
        ''' Delete children for this entity
        ''' </summary>
        Public Sub DeleteChildren(ByVal transaction As DbTransaction, ByVal entity As IUniqueIdentifiable)
                        
        End Sub


          



        ''' <summary>
        ''' Get a usuario by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As usuario
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a usuarioList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As usuarioList
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetOne(idusuario As System.Int32) As usuario
            Return MyBase.GetOne(New usuario(idusuario))
        End Function

        

        ' GetOne By Objects and Params
            

        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetBytipousuario(idtipousuario As System.Int32) As usuarioList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "usuario_GetBytipousuario", idtipousuario)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetBytipousuario(ByVal tipousuario As IUniqueIdentifiable) As usuarioList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "usuario_GetBytipousuario", tipousuario.Identifier())
        End Function

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByTrabajadores(idtrabjador As System.Int32) As usuarioList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "usuario_GetByTrabajadores", idtrabjador)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByTrabajadores(ByVal Trabajadores As IUniqueIdentifiable) As usuarioList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "usuario_GetByTrabajadores", Trabajadores.Identifier())
        End Function

    


        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetBytipousuario(ByVal transaction As DbTransaction,idtipousuario As System.Int32) As usuarioList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "usuario_GetBytipousuario", idtipousuario)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetBytipousuario(ByVal transaction As DbTransaction, ByVal tipousuario As IUniqueIdentifiable) As usuarioList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "usuario_GetBytipousuario", tipousuario.Identifier())
        End Function

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByTrabajadores(ByVal transaction As DbTransaction,idtrabjador As System.Int32) As usuarioList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "usuario_GetByTrabajadores", idtrabjador)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByTrabajadores(ByVal transaction As DbTransaction, ByVal Trabajadores As IUniqueIdentifiable) As usuarioList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "usuario_GetByTrabajadores", Trabajadores.Identifier())
        End Function

    

        





        


        'Database Queries 
        






        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace


Namespace Wrappers
    ''' <summary>
    ''' 
    ''' </summary>
    Public Class usuarioMapperWrapper

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            return Instance().GetPKPropertiesNames()
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return Instance().GetMappingType()
        End Function


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function Instance() As abacusRules.Mappers.usuarioMapper
            Return abacusRules.Mappers.usuarioMapper.Instance()
        End Function

        
        ''' <summary>
        ''' Get a usuario Entity by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetOne(ByVal idusuario As System.Int32) As Entities.usuario         
            Return Instance().GetOne( idusuario)
        End Function
        

        ' GetBy Objects and Params
            

        

        ''' <summary>
        ''' Get a usuarioList by calling a Stored Procedure
        ''' </summary>
        Public Function GetBytipousuario( ByVal idtipousuario As System.Int32) As Entities.usuarioList 
            Return Instance().GetBytipousuario(idtipousuario)
        End Function

        ''' <summary>
        ''' Get a usuarioList by calling a Stored Procedure
        ''' </summary>
        Public Function GetBytipousuario(ByVal  tipousuario As IUniqueIdentifiable) As Entities.usuarioList
            Return Instance().GetBytipousuario(tipousuario)
        End Function

    

        ''' <summary>
        ''' Get a usuarioList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByTrabajadores( ByVal idtrabjador As System.Int32) As Entities.usuarioList 
            Return Instance().GetByTrabajadores(idtrabjador)
        End Function

        ''' <summary>
        ''' Get a usuarioList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByTrabajadores(ByVal  Trabajadores As IUniqueIdentifiable) As Entities.usuarioList
            Return Instance().GetByTrabajadores(Trabajadores)
        End Function

    

        ''' <summary>
        ''' GetAll usuario 
        ''' </summary>
        Public Function GetAll() As Entities.usuarioList
            Return Instance().GetAll()
        End Function

        

        'Database Queries 
        


    End Class
End Namespace


Namespace Loaders

    ''' <summary>
    ''' 
    ''' </summary>
    Partial Public Class usuarioLoader(Of T As {usuario, New})
        Inherits BaseLoader(Of T, usuario, ObjectList(Of T))
        Implements IGenericGateway



#Region "Singleton"

        Private Shared _instance As usuarioLoader(Of T)

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As usuarioLoader(Of T)
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New usuarioLoader(Of T)
                Else
                    Dim inst As usuarioLoader(Of T) = TryCast(HttpContext.Current.Items("abacusRules.usuarioLoaderSingleton"), usuarioLoader(Of T))
                    If inst Is Nothing Then
                        inst = New usuarioLoader(Of T)
                        HttpContext.Current.Items.Add("abacusRules.usuarioLoaderSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function

#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim s() as String={"idusuario"}
            Return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            Return GetType(usuario)
        End Function


        Protected Overrides ReadOnly Property TableName As String 
            Get
                Return "usuario"
            End Get
        End Property

        
        ' If this table is read only
        Protected Overrides Function IsReadOnly() As Boolean
            Return True
        End Function
        

        


        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As usuario)
            Dim _nombreusuario As String
If reader.IsDBNull(0) Then 
	 _nombreusuario = ""
Else
	 _nombreusuario = reader.GetString(0)
End If
Dim _claveusuario As String
If reader.IsDBNull(1) Then 
	 _claveusuario = ""
Else
	 _claveusuario = reader.GetString(1)
End If
Dim _descripcion As String
If reader.IsDBNull(2) Then 
	 _descripcion = ""
Else
	 _descripcion = reader.GetString(2)
End If
Dim _estado As String
If reader.IsDBNull(3) Then 
	 _estado = ""
Else
	 _estado = reader.GetString(3)
End If
Dim _idtipousuario As System.Nullable(Of System.Int32) 
If reader.IsDBNull(5) Then 
	 _idtipousuario = New System.Nullable(Of System.Int32)
Else
	 _idtipousuario = reader.GetInt32(5)
End If
Dim _idtrabjador As System.Nullable(Of System.Int32) 
If reader.IsDBNull(6) Then 
	 _idtrabjador = New System.Nullable(Of System.Int32)
Else
	 _idtrabjador = reader.GetInt32(6)
End If
Dim _tipousuarioString As String
If reader.IsDBNull(7) Then 
	 _tipousuarioString = ""
Else
	 _tipousuarioString = reader.GetString(7)
End If
Dim _TrabajadoresString As String
If reader.IsDBNull(8) Then 
	 _TrabajadoresString = ""
Else
	 _TrabajadoresString = reader.GetString(8)
End If

            Dim usuario As IMappeableusuarioObject  = CType(entity, IMappeableusuarioObject)
            usuario.HydrateFields(_nombreusuario, _
_claveusuario, _
_descripcion, _
_estado, _
reader.GetInt32(4), _
_idtipousuario, _
_idtrabjador, _
_tipousuarioString, _
_TrabajadoresString)
        End Sub


        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function

        

        

        ' Complete the aggregations for this entity.         
        Protected Overrides Sub CompleteEntity(ByVal entity As t)
            Dim tipousuarioEntity As Objects.tipousuarioObject = Nothing 'Lazy load
Dim TrabajadoresEntity As Objects.TrabajadoresObject = Nothing 'Lazy load
            CType(entity, IMappeableusuario).CompleteEntity(tipousuarioEntity, TrabajadoresEntity)
        End Sub

        


        ''' <summary>
        ''' Get a usuario by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As t
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a usuarioList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As ObjectList(Of T)
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' GetOne By Params
        ''' </summary>
        Public Overloads Function GetOne(idusuario As System.Int32) As t
            Return MyBase.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "usuario_GetOne", idusuario)
        End Function
        


        ' GetOne By Objects and Params
            

        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetBytipousuario(idtipousuario As System.Int32) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "usuario_GetBytipousuario", idtipousuario)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetBytipousuario(ByVal tipousuario As IUniqueIdentifiable) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "usuario_GetBytipousuario", tipousuario.Identifier())
        End Function

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByTrabajadores(idtrabjador As System.Int32) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "usuario_GetByTrabajadores", idtrabjador)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByTrabajadores(ByVal Trabajadores As IUniqueIdentifiable) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "usuario_GetByTrabajadores", Trabajadores.Identifier())
        End Function

    


        'Database Queries 
        


        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace




