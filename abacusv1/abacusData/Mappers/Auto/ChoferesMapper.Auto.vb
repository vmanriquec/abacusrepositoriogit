
'------------------------------------------------------------------------------
' This file was generated by Cooperator Modeler, version 1.3.3.0
' Created: 20/08/2013 - 01:49 p.m.
' This is a partial class file. The other one is ChoferesMapper.cs
' You should not modifiy this file, please edit the other partial class file.
'------------------------------------------------------------------------------

Imports System
Imports abacusRules.Entities
Imports abacusRules.Objects
Imports Cooperator.Framework.Data
Imports Cooperator.Framework.Data.Exceptions
Imports Cooperator.Framework.Core
Imports System.Data.Common
Imports System.Reflection
Imports System.Web


Namespace Mappers
    

    Public Partial Class ChoferesMapper
        Inherits BaseGateway(Of Choferes, ChoferesList)
        Implements IGenericGateway

#Region "Singleton"

        Private Shared _instance As ChoferesMapper

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As ChoferesMapper
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New ChoferesMapper()
                Else
                    Dim inst As ChoferesMapper = TryCast(HttpContext.Current.Items("abacusRules.ChoferesMapperSingleton"), ChoferesMapper)
                    If inst Is Nothing Then
                        inst = New ChoferesMapper()
                        HttpContext.Current.Items.Add("abacusRules.ChoferesMapperSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function


#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim  s() as String={"IdChofer"}
            return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return GetType(Choferes)
        End Function


        ''' <summary>
        ''' Return the mapped table name
        ''' </summary>
        Protected Overrides ReadOnly Property TableName() As String 
            Get
                Return "Choferes"
            End Get
        End Property

        ''' <summary>
        ''' Return the ChoferesGateway type FullName
        ''' </summary>
        Protected Overrides ReadOnly Property RuleName() As String
            Get
                Return GetType(ChoferesMapper).FullName
            End Get
        End Property


        

        

        ''' <summary>
        ''' Assign properties values based on DataReader
        ''' </summary>
        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As Choferes)
            Dim _Nombres As String
If reader.IsDBNull(1) Then 
	 _Nombres = ""
Else
	 _Nombres = reader.GetString(1)
End If
Dim _Apellidos As String
If reader.IsDBNull(2) Then 
	 _Apellidos = ""
Else
	 _Apellidos = reader.GetString(2)
End If
Dim _DNI As String
If reader.IsDBNull(3) Then 
	 _DNI = ""
Else
	 _DNI = reader.GetString(3)
End If
Dim _Brevete As String
If reader.IsDBNull(4) Then 
	 _Brevete = ""
Else
	 _Brevete = reader.GetString(4)
End If
Dim _FecNacimiento As System.Nullable(Of System.DateTime) 
If reader.IsDBNull(5) Then 
	 _FecNacimiento = New System.Nullable(Of System.DateTime)
Else
	 _FecNacimiento = reader.GetDateTime(5)
End If
Dim _IdTransportista As System.Nullable(Of System.Int32) 
If reader.IsDBNull(6) Then 
	 _IdTransportista = New System.Nullable(Of System.Int32)
Else
	 _IdTransportista = reader.GetInt32(6)
End If
Dim _TransportistaString As String
If reader.IsDBNull(7) Then 
	 _TransportistaString = ""
Else
	 _TransportistaString = reader.GetString(7)
End If

            Dim Choferes As IMappeableChoferesObject  = CType(entity, IMappeableChoferesObject)
            Choferes.HydrateFields(reader.GetInt32(0), _
_Nombres, _
_Apellidos, _
_DNI, _
_Brevete, _
_FecNacimiento, _
_IdTransportista, _
_TransportistaString)
        End Sub

        ''' <summary>
        ''' Get field values to call insertion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForInsert(ByVal entity As Choferes) As Object()
            Dim Choferes As IMappeableChoferesObject = CType(entity, IMappeableChoferesObject)
            Return Choferes.GetFieldsForInsert()
        End Function

        ''' <summary>
        ''' Get field values to call update stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForUpdate(ByVal entity As Choferes) As Object()
            Dim Choferes As IMappeableChoferesObject = CType(entity, IMappeableChoferesObject)
            Return Choferes.GetFieldsForUpdate()
        End Function

        ''' <summary>
        ''' Get field values to call deletion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForDelete(ByVal entity As Choferes) As Object()
            Dim Choferes As IMappeableChoferesObject = CType(entity, IMappeableChoferesObject)
            Return Choferes.GetFieldsForDelete()
        End Function

        ''' <summary>
        ''' Raised after insert and update. Update properties from Output parameters
        ''' </summary>
        Protected Overrides Sub UpdateObjectFromOutputParams(ByVal entity As Choferes, ByVal parameters As Object())
            ' Update properties from Output parameters
            CType(entity, IMappeableChoferesObject).UpdateObjectFromOutputParams(parameters)
        End Sub

        ''' <summary>
        ''' StoredProceduresPrefix, for example: coop_
        ''' </summary>
        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function


        


        

        ''' <summary>
        ''' Complete the aggregations for this entity. 
        ''' </summary>
        Protected Overrides Sub CompleteEntity(ByVal entity As Choferes)
            Dim TransportistaEntity As Objects.TransportistaObject = Nothing 'Lazy load
            CType(entity, IMappeableChoferes).CompleteEntity(TransportistaEntity)
        End Sub


        # Region "CRUD Operations"
        

        # End Region
        
        ''' <summary>
        ''' Delete children for this entity
        ''' </summary>
        Public Sub DeleteChildren(ByVal transaction As DbTransaction, ByVal entity As IUniqueIdentifiable)
                        
        End Sub


          



        ''' <summary>
        ''' Get a Choferes by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As Choferes
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a ChoferesList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As ChoferesList
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetOne(IdChofer As System.Int32) As Choferes
            Return MyBase.GetOne(New Choferes(IdChofer))
        End Function

        

        ' GetOne By Objects and Params
            

        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByTransportista(IdTransportista As System.Int32) As ChoferesList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Choferes_GetByTransportista", IdTransportista)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByTransportista(ByVal Transportista As IUniqueIdentifiable) As ChoferesList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Choferes_GetByTransportista", Transportista.Identifier())
        End Function

    


        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByTransportista(ByVal transaction As DbTransaction,IdTransportista As System.Int32) As ChoferesList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Choferes_GetByTransportista", IdTransportista)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByTransportista(ByVal transaction As DbTransaction, ByVal Transportista As IUniqueIdentifiable) As ChoferesList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Choferes_GetByTransportista", Transportista.Identifier())
        End Function

    

        





        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(IdChofer As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Choferes_Delete", IdChofer)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(ByVal transaction As DbTransaction ,IdChofer As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Choferes_Delete", IdChofer)
        End Sub

        ' Delete By Objects and Params
            



        

    

    

    

    

    

    

    

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByTransportista(IdTransportista As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Choferes_DeleteByTransportista", IdTransportista)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByTransportista(ByVal transaction As DbTransaction , IdTransportista As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Choferes_DeleteByTransportista", IdTransportista)
        End Sub


        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByTransportista(ByVal Transportista As IUniqueIdentifiable)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Choferes_DeleteByTransportista", Transportista.Identifier())
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByTransportista(ByVal transaction As DbTransaction, ByVal Transportista As IUniqueIdentifiable)        
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Choferes_DeleteByTransportista", Transportista.Identifier())
        End Sub

        

    


        'Database Queries 
        






        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace


Namespace Wrappers
    ''' <summary>
    ''' 
    ''' </summary>
    Public Class ChoferesMapperWrapper

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            return Instance().GetPKPropertiesNames()
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return Instance().GetMappingType()
        End Function


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function Instance() As abacusRules.Mappers.ChoferesMapper
            Return abacusRules.Mappers.ChoferesMapper.Instance()
        End Function

        
        ''' <summary>
        ''' Get a Choferes Entity by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetOne(ByVal IdChofer As System.Int32) As Entities.Choferes         
            Return Instance().GetOne( IdChofer)
        End Function
        

        ' GetBy Objects and Params
            

        

        ''' <summary>
        ''' Get a ChoferesList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByTransportista( ByVal IdTransportista As System.Int32) As Entities.ChoferesList 
            Return Instance().GetByTransportista(IdTransportista)
        End Function

        ''' <summary>
        ''' Get a ChoferesList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByTransportista(ByVal  Transportista As IUniqueIdentifiable) As Entities.ChoferesList
            Return Instance().GetByTransportista(Transportista)
        End Function

    

        ''' <summary>
        ''' GetAll Choferes 
        ''' </summary>
        Public Function GetAll() As Entities.ChoferesList
            Return Instance().GetAll()
        End Function

        
        

        ''' <summary>
        ''' Delete children for Choferes
        ''' </summary>
        Public Sub DeleteChildren(ByVal transaction As DbTransaction, ByVal entity As Choferes)
            Instance().DeleteChildren(transaction, entity)
        End Sub

        


            

        

        ''' <summary>
        ''' Delete Choferes by Transportista
        ''' </summary>
        Public Sub DeleteByTransportista( ByVal IdTransportista As System.Int32)
            Instance().DeleteByTransportista(IdTransportista)
        End Sub

        ''' <summary>
        ''' Delete Choferes by Transportista
        ''' </summary>
        Public Sub DeleteByTransportista(ByVal Transportista As IUniqueIdentifiable )
            Instance().DeleteByTransportista(Transportista)
        End Sub

    

        ''' <summary>
        ''' Delete Choferes 
        ''' </summary>
        Public Overloads Sub Delete(ByVal IdChofer As System.Int32)
            Instance().Delete(IdChofer)
        End Sub

        ''' <summary>
        ''' Delete Choferes 
        ''' </summary>
        Public Overloads Sub Delete(ByVal entity As Entities.Choferes)
            Instance().Delete(entity)
        End Sub

        ''' <summary>
        ''' Save Choferes  
        ''' </summary>
        Public Overloads Sub Save(ByVal entity As Entities.Choferes)
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert Choferes 
        ''' </summary>
        Public Overloads Sub Insert(ByVal entity As Entities.Choferes)
            Instance().Insert(entity)
        End Sub

        ''' <summary>
        ''' Save Choferes 
        ''' </summary>
        Public Overloads Sub Save(ByVal IdChofer As System.Int32, ByVal Nombres As System.String, ByVal Apellidos As System.String, ByVal DNI As System.String, ByVal Brevete As System.String, ByVal FecNacimiento As System.DateTime, ByVal IdTransportista As System.Int32, ByVal TransportistaString As System.String)
            Dim entity As Entities.Choferes = Instance().GetOne(IdChofer)
            If entity Is Nothing Then
                Throw New ApplicationException(String.Format("Entity not found. IUniqueIdentifiable values: {0} = {1}", "IdChofer", IdChofer))
            End If

            entity.Nombres = Nombres
            entity.Apellidos = Apellidos
            entity.DNI = DNI
            entity.Brevete = Brevete
            entity.FecNacimiento = FecNacimiento
            entity.IdTransportista = IdTransportista
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert Choferes
        ''' </summary>
        Public Overloads Sub Insert(ByVal Nombres As System.String, ByVal Apellidos As System.String, ByVal DNI As System.String, ByVal Brevete As System.String, ByVal FecNacimiento As System.DateTime, ByVal IdTransportista As System.Int32)
            Dim entity As Entities.Choferes = New Entities.Choferes

            entity.Nombres = Nombres
            entity.Apellidos = Apellidos
            entity.DNI = DNI
            entity.Brevete = Brevete
            entity.FecNacimiento = FecNacimiento
            entity.IdTransportista = IdTransportista
            Instance().Insert(entity)
        End Sub

        

        'Database Queries 
        


    End Class
End Namespace


Namespace Loaders

    ''' <summary>
    ''' 
    ''' </summary>
    Partial Public Class ChoferesLoader(Of T As {Choferes, New})
        Inherits BaseLoader(Of T, Choferes, ObjectList(Of T))
        Implements IGenericGateway



#Region "Singleton"

        Private Shared _instance As ChoferesLoader(Of T)

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As ChoferesLoader(Of T)
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New ChoferesLoader(Of T)
                Else
                    Dim inst As ChoferesLoader(Of T) = TryCast(HttpContext.Current.Items("abacusRules.ChoferesLoaderSingleton"), ChoferesLoader(Of T))
                    If inst Is Nothing Then
                        inst = New ChoferesLoader(Of T)
                        HttpContext.Current.Items.Add("abacusRules.ChoferesLoaderSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function

#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim s() as String={"IdChofer"}
            Return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            Return GetType(Choferes)
        End Function


        Protected Overrides ReadOnly Property TableName As String 
            Get
                Return "Choferes"
            End Get
        End Property

        

        


        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As Choferes)
            Dim _Nombres As String
If reader.IsDBNull(1) Then 
	 _Nombres = ""
Else
	 _Nombres = reader.GetString(1)
End If
Dim _Apellidos As String
If reader.IsDBNull(2) Then 
	 _Apellidos = ""
Else
	 _Apellidos = reader.GetString(2)
End If
Dim _DNI As String
If reader.IsDBNull(3) Then 
	 _DNI = ""
Else
	 _DNI = reader.GetString(3)
End If
Dim _Brevete As String
If reader.IsDBNull(4) Then 
	 _Brevete = ""
Else
	 _Brevete = reader.GetString(4)
End If
Dim _FecNacimiento As System.Nullable(Of System.DateTime) 
If reader.IsDBNull(5) Then 
	 _FecNacimiento = New System.Nullable(Of System.DateTime)
Else
	 _FecNacimiento = reader.GetDateTime(5)
End If
Dim _IdTransportista As System.Nullable(Of System.Int32) 
If reader.IsDBNull(6) Then 
	 _IdTransportista = New System.Nullable(Of System.Int32)
Else
	 _IdTransportista = reader.GetInt32(6)
End If
Dim _TransportistaString As String
If reader.IsDBNull(7) Then 
	 _TransportistaString = ""
Else
	 _TransportistaString = reader.GetString(7)
End If

            Dim Choferes As IMappeableChoferesObject  = CType(entity, IMappeableChoferesObject)
            Choferes.HydrateFields(reader.GetInt32(0), _
_Nombres, _
_Apellidos, _
_DNI, _
_Brevete, _
_FecNacimiento, _
_IdTransportista, _
_TransportistaString)
        End Sub


        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function

        

        

        ' Complete the aggregations for this entity.         
        Protected Overrides Sub CompleteEntity(ByVal entity As t)
            Dim TransportistaEntity As Objects.TransportistaObject = Nothing 'Lazy load
            CType(entity, IMappeableChoferes).CompleteEntity(TransportistaEntity)
        End Sub

        


        ''' <summary>
        ''' Get a Choferes by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As t
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a ChoferesList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As ObjectList(Of T)
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' GetOne By Params
        ''' </summary>
        Public Overloads Function GetOne(IdChofer As System.Int32) As t
            Return MyBase.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "Choferes_GetOne", IdChofer)
        End Function
        


        ' GetOne By Objects and Params
            

        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByTransportista(IdTransportista As System.Int32) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Choferes_GetByTransportista", IdTransportista)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByTransportista(ByVal Transportista As IUniqueIdentifiable) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Choferes_GetByTransportista", Transportista.Identifier())
        End Function

    


        'Database Queries 
        


        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace




