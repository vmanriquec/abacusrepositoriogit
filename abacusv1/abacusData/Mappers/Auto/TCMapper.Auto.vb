
'------------------------------------------------------------------------------
' This file was generated by Cooperator Modeler, version 1.3.3.0
' Created: 20/08/2013 - 01:49 p.m.
' This is a partial class file. The other one is TCMapper.cs
' You should not modifiy this file, please edit the other partial class file.
'------------------------------------------------------------------------------

Imports System
Imports abacusRules.Entities
Imports abacusRules.Objects
Imports Cooperator.Framework.Data
Imports Cooperator.Framework.Data.Exceptions
Imports Cooperator.Framework.Core
Imports System.Data.Common
Imports System.Reflection
Imports System.Web


Namespace Mappers
    

    Public Partial Class TCMapper
        Inherits BaseGateway(Of TCObject, TCObjectList)
        Implements IGenericGateway

#Region "Singleton"

        Private Shared _instance As TCMapper

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As TCMapper
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New TCMapper()
                Else
                    Dim inst As TCMapper = TryCast(HttpContext.Current.Items("abacusRules.TCMapperSingleton"), TCMapper)
                    If inst Is Nothing Then
                        inst = New TCMapper()
                        HttpContext.Current.Items.Add("abacusRules.TCMapperSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function


#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim  s() as String={"IdTC"}
            return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return GetType(TCObject)
        End Function


        ''' <summary>
        ''' Return the mapped table name
        ''' </summary>
        Protected Overrides ReadOnly Property TableName() As String 
            Get
                Return "TC"
            End Get
        End Property

        ''' <summary>
        ''' Return the TCGateway type FullName
        ''' </summary>
        Protected Overrides ReadOnly Property RuleName() As String
            Get
                Return GetType(TCMapper).FullName
            End Get
        End Property


        

        

        ''' <summary>
        ''' Assign properties values based on DataReader
        ''' </summary>
        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As TCObject)
            Dim _Compra As System.Nullable(Of System.Decimal) 
If reader.IsDBNull(1) Then 
	 _Compra = New System.Nullable(Of System.Decimal)
Else
	 _Compra = reader.GetDecimal(1)
End If
Dim _Venta As System.Nullable(Of System.Decimal) 
If reader.IsDBNull(2) Then 
	 _Venta = New System.Nullable(Of System.Decimal)
Else
	 _Venta = reader.GetDecimal(2)
End If
Dim _Fecha As System.Nullable(Of System.DateTime) 
If reader.IsDBNull(3) Then 
	 _Fecha = New System.Nullable(Of System.DateTime)
Else
	 _Fecha = reader.GetDateTime(3)
End If
Dim _upsize_ts As System.Nullable(Of System.DateTime) 
If reader.IsDBNull(4) Then 
	 _upsize_ts = New System.Nullable(Of System.DateTime)
Else
	 _upsize_ts = reader.GetDateTime(4)
End If

            Dim TC As IMappeableTCObject  = CType(entity, IMappeableTCObject)
            TC.HydrateFields(reader.GetInt32(0), _
_Compra, _
_Venta, _
_Fecha, _
_upsize_ts)
        End Sub

        ''' <summary>
        ''' Get field values to call insertion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForInsert(ByVal entity As TCObject) As Object()
            Dim TC As IMappeableTCObject = CType(entity, IMappeableTCObject)
            Return TC.GetFieldsForInsert()
        End Function

        ''' <summary>
        ''' Get field values to call update stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForUpdate(ByVal entity As TCObject) As Object()
            Dim TC As IMappeableTCObject = CType(entity, IMappeableTCObject)
            Return TC.GetFieldsForUpdate()
        End Function

        ''' <summary>
        ''' Get field values to call deletion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForDelete(ByVal entity As TCObject) As Object()
            Dim TC As IMappeableTCObject = CType(entity, IMappeableTCObject)
            Return TC.GetFieldsForDelete()
        End Function

        ''' <summary>
        ''' Raised after insert and update. Update properties from Output parameters
        ''' </summary>
        Protected Overrides Sub UpdateObjectFromOutputParams(ByVal entity As TCObject, ByVal parameters As Object())
            ' Update properties from Output parameters
            CType(entity, IMappeableTCObject).UpdateObjectFromOutputParams(parameters)
        End Sub

        ''' <summary>
        ''' StoredProceduresPrefix, for example: coop_
        ''' </summary>
        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function


          



        ''' <summary>
        ''' Get a TC by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As TCObject
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a TCList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As TCObjectList
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetOne(IdTC As System.Int32) As TCObject
            Return MyBase.GetOne(New TCObject(IdTC))
        End Function

        

        ' GetOne By Objects and Params
            

        


        

        





        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(IdTC As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "TC_Delete", IdTC)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(ByVal transaction As DbTransaction ,IdTC As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "TC_Delete", IdTC)
        End Sub

        ' Delete By Objects and Params
            



        

    

    

    

    

    


        'Database Queries 
        






        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace


Namespace Wrappers
    ''' <summary>
    ''' 
    ''' </summary>
    Public Class TCMapperWrapper

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            return Instance().GetPKPropertiesNames()
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return Instance().GetMappingType()
        End Function


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function Instance() As abacusRules.Mappers.TCMapper
            Return abacusRules.Mappers.TCMapper.Instance()
        End Function

        
        ''' <summary>
        ''' Get a TC Entity by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetOne(ByVal IdTC As System.Int32) As Objects.TCObject         
            Return Instance().GetOne( IdTC)
        End Function
        

        ' GetBy Objects and Params
            

        

        ''' <summary>
        ''' GetAll TC 
        ''' </summary>
        Public Function GetAll() As Objects.TCObjectList
            Return Instance().GetAll()
        End Function

        
        


            

        

        ''' <summary>
        ''' Delete TC 
        ''' </summary>
        Public Overloads Sub Delete(ByVal IdTC As System.Int32)
            Instance().Delete(IdTC)
        End Sub

        ''' <summary>
        ''' Delete TC 
        ''' </summary>
        Public Overloads Sub Delete(ByVal entity As Objects.TCObject)
            Instance().Delete(entity)
        End Sub

        ''' <summary>
        ''' Save TC  
        ''' </summary>
        Public Overloads Sub Save(ByVal entity As Objects.TCObject)
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert TC 
        ''' </summary>
        Public Overloads Sub Insert(ByVal entity As Objects.TCObject)
            Instance().Insert(entity)
        End Sub

        ''' <summary>
        ''' Save TC 
        ''' </summary>
        Public Overloads Sub Save(ByVal IdTC As System.Int32, ByVal Compra As System.Decimal, ByVal Venta As System.Decimal, ByVal Fecha As System.DateTime, ByVal upsize_ts As System.DateTime)
            Dim entity As Objects.TCObject = Instance().GetOne(IdTC)
            If entity Is Nothing Then
                Throw New ApplicationException(String.Format("Entity not found. IUniqueIdentifiable values: {0} = {1}", "IdTC", IdTC))
            End If

            entity.Compra = Compra
            entity.Venta = Venta
            entity.Fecha = Fecha
            entity.upsize_ts = upsize_ts
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert TC
        ''' </summary>
        Public Overloads Sub Insert(ByVal Compra As System.Decimal, ByVal Venta As System.Decimal, ByVal Fecha As System.DateTime, ByVal upsize_ts As System.DateTime)
            Dim entity As Objects.TCObject = New Objects.TCObject

            entity.Compra = Compra
            entity.Venta = Venta
            entity.Fecha = Fecha
            entity.upsize_ts = upsize_ts
            Instance().Insert(entity)
        End Sub

        

        'Database Queries 
        


    End Class
End Namespace


Namespace Loaders

    ''' <summary>
    ''' 
    ''' </summary>
    Partial Public Class TCLoader(Of T As {TCObject, New})
        Inherits BaseLoader(Of T, TCObject, ObjectList(Of T))
        Implements IGenericGateway



#Region "Singleton"

        Private Shared _instance As TCLoader(Of T)

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As TCLoader(Of T)
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New TCLoader(Of T)
                Else
                    Dim inst As TCLoader(Of T) = TryCast(HttpContext.Current.Items("abacusRules.TCLoaderSingleton"), TCLoader(Of T))
                    If inst Is Nothing Then
                        inst = New TCLoader(Of T)
                        HttpContext.Current.Items.Add("abacusRules.TCLoaderSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function

#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim s() as String={"IdTC"}
            Return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            Return GetType(TCObject)
        End Function


        Protected Overrides ReadOnly Property TableName As String 
            Get
                Return "TC"
            End Get
        End Property

        

        


        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As TCObject)
            Dim _Compra As System.Nullable(Of System.Decimal) 
If reader.IsDBNull(1) Then 
	 _Compra = New System.Nullable(Of System.Decimal)
Else
	 _Compra = reader.GetDecimal(1)
End If
Dim _Venta As System.Nullable(Of System.Decimal) 
If reader.IsDBNull(2) Then 
	 _Venta = New System.Nullable(Of System.Decimal)
Else
	 _Venta = reader.GetDecimal(2)
End If
Dim _Fecha As System.Nullable(Of System.DateTime) 
If reader.IsDBNull(3) Then 
	 _Fecha = New System.Nullable(Of System.DateTime)
Else
	 _Fecha = reader.GetDateTime(3)
End If
Dim _upsize_ts As System.Nullable(Of System.DateTime) 
If reader.IsDBNull(4) Then 
	 _upsize_ts = New System.Nullable(Of System.DateTime)
Else
	 _upsize_ts = reader.GetDateTime(4)
End If

            Dim TC As IMappeableTCObject  = CType(entity, IMappeableTCObject)
            TC.HydrateFields(reader.GetInt32(0), _
_Compra, _
_Venta, _
_Fecha, _
_upsize_ts)
        End Sub


        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function

        


        ''' <summary>
        ''' Get a TC by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As t
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a TCList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As ObjectList(Of T)
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' GetOne By Params
        ''' </summary>
        Public Overloads Function GetOne(IdTC As System.Int32) As t
            Return MyBase.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "TC_GetOne", IdTC)
        End Function
        


        ' GetOne By Objects and Params
            

        


        'Database Queries 
        


        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace




