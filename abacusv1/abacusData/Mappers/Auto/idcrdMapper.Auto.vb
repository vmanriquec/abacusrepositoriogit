
'------------------------------------------------------------------------------
' This file was generated by Cooperator Modeler, version 1.3.3.0
' Created: 20/08/2013 - 01:49 p.m.
' This is a partial class file. The other one is idcrdMapper.cs
' You should not modifiy this file, please edit the other partial class file.
'------------------------------------------------------------------------------

Imports System
Imports abacusRules.Entities
Imports abacusRules.Objects
Imports Cooperator.Framework.Data
Imports Cooperator.Framework.Data.Exceptions
Imports Cooperator.Framework.Core
Imports System.Data.Common
Imports System.Reflection
Imports System.Web


Namespace Mappers
    

    Public Partial Class idcrdMapper
        Inherits BaseGateway(Of idcrd, idcrdList)
        Implements IGenericGateway

#Region "Singleton"

        Private Shared _instance As idcrdMapper

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As idcrdMapper
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New idcrdMapper()
                Else
                    Dim inst As idcrdMapper = TryCast(HttpContext.Current.Items("abacusRules.idcrdMapperSingleton"), idcrdMapper)
                    If inst Is Nothing Then
                        inst = New idcrdMapper()
                        HttpContext.Current.Items.Add("abacusRules.idcrdMapperSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function


#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim  s() as String={"idcrd"}
            return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return GetType(idcrd)
        End Function


        ''' <summary>
        ''' Return the mapped table name
        ''' </summary>
        Protected Overrides ReadOnly Property TableName() As String 
            Get
                Return "idcrd"
            End Get
        End Property

        ''' <summary>
        ''' Return the idcrdGateway type FullName
        ''' </summary>
        Protected Overrides ReadOnly Property RuleName() As String
            Get
                Return GetType(idcrdMapper).FullName
            End Get
        End Property


        

        

        ''' <summary>
        ''' Assign properties values based on DataReader
        ''' </summary>
        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As idcrd)
            Dim _idcliente As System.Nullable(Of System.Int32) 
If reader.IsDBNull(1) Then 
	 _idcliente = New System.Nullable(Of System.Int32)
Else
	 _idcliente = reader.GetInt32(1)
End If
Dim _idruta As System.Nullable(Of System.Int32) 
If reader.IsDBNull(2) Then 
	 _idruta = New System.Nullable(Of System.Int32)
Else
	 _idruta = reader.GetInt32(2)
End If
Dim _direcciontienda As String
If reader.IsDBNull(3) Then 
	 _direcciontienda = ""
Else
	 _direcciontienda = reader.GetString(3)
End If
Dim _observacion As String
If reader.IsDBNull(4) Then 
	 _observacion = ""
Else
	 _observacion = reader.GetString(4)
End If
Dim _ClientesString As String
If reader.IsDBNull(5) Then 
	 _ClientesString = ""
Else
	 _ClientesString = reader.GetString(5)
End If
Dim _rutaString As String
If reader.IsDBNull(6) Then 
	 _rutaString = ""
Else
	 _rutaString = reader.GetString(6)
End If

            Dim idcrd As IMappeableidcrdObject  = CType(entity, IMappeableidcrdObject)
            idcrd.HydrateFields(reader.GetInt32(0), _
_idcliente, _
_idruta, _
_direcciontienda, _
_observacion, _
_ClientesString, _
_rutaString)
        End Sub

        ''' <summary>
        ''' Get field values to call insertion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForInsert(ByVal entity As idcrd) As Object()
            Dim idcrd As IMappeableidcrdObject = CType(entity, IMappeableidcrdObject)
            Return idcrd.GetFieldsForInsert()
        End Function

        ''' <summary>
        ''' Get field values to call update stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForUpdate(ByVal entity As idcrd) As Object()
            Dim idcrd As IMappeableidcrdObject = CType(entity, IMappeableidcrdObject)
            Return idcrd.GetFieldsForUpdate()
        End Function

        ''' <summary>
        ''' Get field values to call deletion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForDelete(ByVal entity As idcrd) As Object()
            Dim idcrd As IMappeableidcrdObject = CType(entity, IMappeableidcrdObject)
            Return idcrd.GetFieldsForDelete()
        End Function

        ''' <summary>
        ''' Raised after insert and update. Update properties from Output parameters
        ''' </summary>
        Protected Overrides Sub UpdateObjectFromOutputParams(ByVal entity As idcrd, ByVal parameters As Object())
            ' Update properties from Output parameters
            CType(entity, IMappeableidcrdObject).UpdateObjectFromOutputParams(parameters)
        End Sub

        ''' <summary>
        ''' StoredProceduresPrefix, for example: coop_
        ''' </summary>
        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function


        


        

        ''' <summary>
        ''' Complete the aggregations for this entity. 
        ''' </summary>
        Protected Overrides Sub CompleteEntity(ByVal entity As idcrd)
            Dim ClientesEntity As Objects.ClientesObject = Nothing 'Lazy load
Dim rutaEntity As Objects.rutaObject = Nothing 'Lazy load
            CType(entity, IMappeableidcrd).CompleteEntity(ClientesEntity, rutaEntity)
        End Sub


        # Region "CRUD Operations"
        

        # End Region
        
        ''' <summary>
        ''' Delete children for this entity
        ''' </summary>
        Public Sub DeleteChildren(ByVal transaction As DbTransaction, ByVal entity As IUniqueIdentifiable)
                        
        End Sub


          



        ''' <summary>
        ''' Get a idcrd by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As idcrd
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a idcrdList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As idcrdList
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetOne(idcrd As System.Int32) As idcrd
            Return MyBase.GetOne(New idcrd(idcrd))
        End Function

        

        ' GetOne By Objects and Params
            

        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByClientes(idcliente As System.Int32) As idcrdList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "idcrd_GetByClientes", idcliente)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByClientes(ByVal Clientes As IUniqueIdentifiable) As idcrdList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "idcrd_GetByClientes", Clientes.Identifier())
        End Function

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByruta(idruta As System.Int32) As idcrdList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "idcrd_GetByruta", idruta)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByruta(ByVal ruta As IUniqueIdentifiable) As idcrdList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "idcrd_GetByruta", ruta.Identifier())
        End Function

    


        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByClientes(ByVal transaction As DbTransaction,idcliente As System.Int32) As idcrdList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "idcrd_GetByClientes", idcliente)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByClientes(ByVal transaction As DbTransaction, ByVal Clientes As IUniqueIdentifiable) As idcrdList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "idcrd_GetByClientes", Clientes.Identifier())
        End Function

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByruta(ByVal transaction As DbTransaction,idruta As System.Int32) As idcrdList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "idcrd_GetByruta", idruta)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByruta(ByVal transaction As DbTransaction, ByVal ruta As IUniqueIdentifiable) As idcrdList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "idcrd_GetByruta", ruta.Identifier())
        End Function

    

        





        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(idcrd As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "idcrd_Delete", idcrd)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(ByVal transaction As DbTransaction ,idcrd As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "idcrd_Delete", idcrd)
        End Sub

        ' Delete By Objects and Params
            



        

    

    

    

    

    

    

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByClientes(idcliente As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "idcrd_DeleteByClientes", idcliente)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByClientes(ByVal transaction As DbTransaction , idcliente As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "idcrd_DeleteByClientes", idcliente)
        End Sub


        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByClientes(ByVal Clientes As IUniqueIdentifiable)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "idcrd_DeleteByClientes", Clientes.Identifier())
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByClientes(ByVal transaction As DbTransaction, ByVal Clientes As IUniqueIdentifiable)        
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "idcrd_DeleteByClientes", Clientes.Identifier())
        End Sub

        

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByruta(idruta As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "idcrd_DeleteByruta", idruta)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByruta(ByVal transaction As DbTransaction , idruta As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "idcrd_DeleteByruta", idruta)
        End Sub


        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByruta(ByVal ruta As IUniqueIdentifiable)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "idcrd_DeleteByruta", ruta.Identifier())
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByruta(ByVal transaction As DbTransaction, ByVal ruta As IUniqueIdentifiable)        
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "idcrd_DeleteByruta", ruta.Identifier())
        End Sub

        

    


        'Database Queries 
        






        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace


Namespace Wrappers
    ''' <summary>
    ''' 
    ''' </summary>
    Public Class idcrdMapperWrapper

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            return Instance().GetPKPropertiesNames()
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return Instance().GetMappingType()
        End Function


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function Instance() As abacusRules.Mappers.idcrdMapper
            Return abacusRules.Mappers.idcrdMapper.Instance()
        End Function

        
        ''' <summary>
        ''' Get a idcrd Entity by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetOne(ByVal idcrd As System.Int32) As Entities.idcrd         
            Return Instance().GetOne( idcrd)
        End Function
        

        ' GetBy Objects and Params
            

        

        ''' <summary>
        ''' Get a idcrdList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByClientes( ByVal idcliente As System.Int32) As Entities.idcrdList 
            Return Instance().GetByClientes(idcliente)
        End Function

        ''' <summary>
        ''' Get a idcrdList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByClientes(ByVal  Clientes As IUniqueIdentifiable) As Entities.idcrdList
            Return Instance().GetByClientes(Clientes)
        End Function

    

        ''' <summary>
        ''' Get a idcrdList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByruta( ByVal idruta As System.Int32) As Entities.idcrdList 
            Return Instance().GetByruta(idruta)
        End Function

        ''' <summary>
        ''' Get a idcrdList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByruta(ByVal  ruta As IUniqueIdentifiable) As Entities.idcrdList
            Return Instance().GetByruta(ruta)
        End Function

    

        ''' <summary>
        ''' GetAll idcrd 
        ''' </summary>
        Public Function GetAll() As Entities.idcrdList
            Return Instance().GetAll()
        End Function

        
        

        ''' <summary>
        ''' Delete children for idcrd
        ''' </summary>
        Public Sub DeleteChildren(ByVal transaction As DbTransaction, ByVal entity As idcrd)
            Instance().DeleteChildren(transaction, entity)
        End Sub

        


            

        

        ''' <summary>
        ''' Delete idcrd by Clientes
        ''' </summary>
        Public Sub DeleteByClientes( ByVal idcliente As System.Int32)
            Instance().DeleteByClientes(idcliente)
        End Sub

        ''' <summary>
        ''' Delete idcrd by Clientes
        ''' </summary>
        Public Sub DeleteByClientes(ByVal Clientes As IUniqueIdentifiable )
            Instance().DeleteByClientes(Clientes)
        End Sub

    

        ''' <summary>
        ''' Delete idcrd by ruta
        ''' </summary>
        Public Sub DeleteByruta( ByVal idruta As System.Int32)
            Instance().DeleteByruta(idruta)
        End Sub

        ''' <summary>
        ''' Delete idcrd by ruta
        ''' </summary>
        Public Sub DeleteByruta(ByVal ruta As IUniqueIdentifiable )
            Instance().DeleteByruta(ruta)
        End Sub

    

        ''' <summary>
        ''' Delete idcrd 
        ''' </summary>
        Public Overloads Sub Delete(ByVal idcrd As System.Int32)
            Instance().Delete(idcrd)
        End Sub

        ''' <summary>
        ''' Delete idcrd 
        ''' </summary>
        Public Overloads Sub Delete(ByVal entity As Entities.idcrd)
            Instance().Delete(entity)
        End Sub

        ''' <summary>
        ''' Save idcrd  
        ''' </summary>
        Public Overloads Sub Save(ByVal entity As Entities.idcrd)
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert idcrd 
        ''' </summary>
        Public Overloads Sub Insert(ByVal entity As Entities.idcrd)
            Instance().Insert(entity)
        End Sub

        ''' <summary>
        ''' Save idcrd 
        ''' </summary>
        Public Overloads Sub Save(ByVal idcrd As System.Int32, ByVal idcliente As System.Int32, ByVal idruta As System.Int32, ByVal direcciontienda As System.String, ByVal observacion As System.String, ByVal ClientesString As System.String, ByVal rutaString As System.String)
            Dim entity As Entities.idcrd = Instance().GetOne(idcrd)
            If entity Is Nothing Then
                Throw New ApplicationException(String.Format("Entity not found. IUniqueIdentifiable values: {0} = {1}", "idcrd", idcrd))
            End If

            entity.idcliente = idcliente
            entity.idruta = idruta
            entity.direcciontienda = direcciontienda
            entity.observacion = observacion
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert idcrd
        ''' </summary>
        Public Overloads Sub Insert(ByVal idcliente As System.Int32, ByVal idruta As System.Int32, ByVal direcciontienda As System.String, ByVal observacion As System.String)
            Dim entity As Entities.idcrd = New Entities.idcrd

            entity.idcliente = idcliente
            entity.idruta = idruta
            entity.direcciontienda = direcciontienda
            entity.observacion = observacion
            Instance().Insert(entity)
        End Sub

        

        'Database Queries 
        


    End Class
End Namespace


Namespace Loaders

    ''' <summary>
    ''' 
    ''' </summary>
    Partial Public Class idcrdLoader(Of T As {idcrd, New})
        Inherits BaseLoader(Of T, idcrd, ObjectList(Of T))
        Implements IGenericGateway



#Region "Singleton"

        Private Shared _instance As idcrdLoader(Of T)

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As idcrdLoader(Of T)
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New idcrdLoader(Of T)
                Else
                    Dim inst As idcrdLoader(Of T) = TryCast(HttpContext.Current.Items("abacusRules.idcrdLoaderSingleton"), idcrdLoader(Of T))
                    If inst Is Nothing Then
                        inst = New idcrdLoader(Of T)
                        HttpContext.Current.Items.Add("abacusRules.idcrdLoaderSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function

#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim s() as String={"idcrd"}
            Return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            Return GetType(idcrd)
        End Function


        Protected Overrides ReadOnly Property TableName As String 
            Get
                Return "idcrd"
            End Get
        End Property

        

        


        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As idcrd)
            Dim _idcliente As System.Nullable(Of System.Int32) 
If reader.IsDBNull(1) Then 
	 _idcliente = New System.Nullable(Of System.Int32)
Else
	 _idcliente = reader.GetInt32(1)
End If
Dim _idruta As System.Nullable(Of System.Int32) 
If reader.IsDBNull(2) Then 
	 _idruta = New System.Nullable(Of System.Int32)
Else
	 _idruta = reader.GetInt32(2)
End If
Dim _direcciontienda As String
If reader.IsDBNull(3) Then 
	 _direcciontienda = ""
Else
	 _direcciontienda = reader.GetString(3)
End If
Dim _observacion As String
If reader.IsDBNull(4) Then 
	 _observacion = ""
Else
	 _observacion = reader.GetString(4)
End If
Dim _ClientesString As String
If reader.IsDBNull(5) Then 
	 _ClientesString = ""
Else
	 _ClientesString = reader.GetString(5)
End If
Dim _rutaString As String
If reader.IsDBNull(6) Then 
	 _rutaString = ""
Else
	 _rutaString = reader.GetString(6)
End If

            Dim idcrd As IMappeableidcrdObject  = CType(entity, IMappeableidcrdObject)
            idcrd.HydrateFields(reader.GetInt32(0), _
_idcliente, _
_idruta, _
_direcciontienda, _
_observacion, _
_ClientesString, _
_rutaString)
        End Sub


        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function

        

        

        ' Complete the aggregations for this entity.         
        Protected Overrides Sub CompleteEntity(ByVal entity As t)
            Dim ClientesEntity As Objects.ClientesObject = Nothing 'Lazy load
Dim rutaEntity As Objects.rutaObject = Nothing 'Lazy load
            CType(entity, IMappeableidcrd).CompleteEntity(ClientesEntity, rutaEntity)
        End Sub

        


        ''' <summary>
        ''' Get a idcrd by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As t
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a idcrdList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As ObjectList(Of T)
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' GetOne By Params
        ''' </summary>
        Public Overloads Function GetOne(idcrd As System.Int32) As t
            Return MyBase.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "idcrd_GetOne", idcrd)
        End Function
        


        ' GetOne By Objects and Params
            

        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByClientes(idcliente As System.Int32) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "idcrd_GetByClientes", idcliente)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByClientes(ByVal Clientes As IUniqueIdentifiable) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "idcrd_GetByClientes", Clientes.Identifier())
        End Function

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByruta(idruta As System.Int32) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "idcrd_GetByruta", idruta)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByruta(ByVal ruta As IUniqueIdentifiable) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "idcrd_GetByruta", ruta.Identifier())
        End Function

    


        'Database Queries 
        


        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace




