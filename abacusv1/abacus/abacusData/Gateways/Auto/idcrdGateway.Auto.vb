
'------------------------------------------------------------------------------
' This file was generated by Cooperator Modeler, version 1.3.3.0
' Created: 15/08/2013 - 05:51 p.m.
' This is a partial class file. The other one is idcrdGateway.vb
' You should not modifiy this file, please edit the other partial class file.
'------------------------------------------------------------------------------

Imports System
Imports abacusRules.Objects
Imports Cooperator.Framework.Data
Imports Cooperator.Framework.Data.Exceptions
Imports Cooperator.Framework.Core
Imports System.Data.Common
Imports System.Reflection
Imports System.Web

Namespace Gateways
        
    Public Partial Class idcrdGateway 
        Inherits BaseGateway(Of idcrdObject, idcrdObjectList)
        Implements IGenericGateway

#Region "Singleton"

        Private Shared _instance As idcrdGateway

        Private Sub New()
        End Sub

        Public Shared Function Instance() As idcrdGateway
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New idcrdGateway()
                Else
                    Dim inst As idcrdGateway = TryCast(HttpContext.Current.Items("abacusRules.idcrdGatewaySingleton"), idcrdGateway)
                    If inst Is Nothing Then
                        inst = New idcrdGateway()
                        HttpContext.Current.Items.Add("abacusRules.idcrdGatewaySingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function

#End Region

        ''' <summary>
        ''' Return the mapped table name
        ''' </summary>
        Protected Overrides ReadOnly Property TableName() As String
            Get
                Return "idcrd"
            End Get
        End Property

        ''' <summary>
        ''' Return the idcrdGateway type FullName
        ''' </summary>
        Protected Overrides ReadOnly Property RuleName() As String
            Get
                Return GetType(idcrdGateway ).FullName
            End Get
        End Property


        

        


        ''' <summary>
        ''' Assign properties values based on DataReader
        ''' </summary>
        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As idcrdObject )
            Dim _idcliente As System.Nullable(Of System.Int32) 
If reader.IsDBNull(1) Then 
	 _idcliente = New System.Nullable(Of System.Int32)
Else
	 _idcliente = reader.GetInt32(1)
End If
Dim _idruta As System.Nullable(Of System.Int32) 
If reader.IsDBNull(2) Then 
	 _idruta = New System.Nullable(Of System.Int32)
Else
	 _idruta = reader.GetInt32(2)
End If
Dim _direcciontienda As String
If reader.IsDBNull(3) Then 
	 _direcciontienda = ""
Else
	 _direcciontienda = reader.GetString(3)
End If
Dim _observacion As String
If reader.IsDBNull(4) Then 
	 _observacion = ""
Else
	 _observacion = reader.GetString(4)
End If
Dim _ClientesString As String
If reader.IsDBNull(5) Then 
	 _ClientesString = ""
Else
	 _ClientesString = reader.GetString(5)
End If
Dim _rutaString As String
If reader.IsDBNull(6) Then 
	 _rutaString = ""
Else
	 _rutaString = reader.GetString(6)
End If

            Dim idcrd As IMappeableidcrdObject  = CType(entity, IMappeableidcrdObject)
            idcrd.HydrateFields(reader.GetInt32(0), _
_idcliente, _
_idruta, _
_direcciontienda, _
_observacion, _
_ClientesString, _
_rutaString)
            CType(entity, IObject).State = ObjectState.Restored
        End Sub

        ''' <summary>
        ''' Get field values to call insertion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForInsert(ByVal entity As idcrdObject) As Object()
            Dim idcrd As IMappeableidcrdObject = CType(entity, IMappeableidcrdObject)
            Return idcrd.GetFieldsForInsert()
        End Function

        ''' <summary>
        ''' Get field values to call update stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForUpdate(ByVal entity As idcrdObject) As Object()
            Dim idcrd As IMappeableidcrdObject = CType(entity, IMappeableidcrdObject)
            Return idcrd.GetFieldsForUpdate()
        End Function

        ''' <summary>
        ''' Get field values to call deletion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForDelete(ByVal entity As idcrdObject) As Object()
            Dim idcrd As IMappeableidcrdObject = CType(entity, IMappeableidcrdObject)
            Return idcrd.GetFieldsForDelete()
        End Function

        ''' <summary>
        ''' Raised after insert and update. Update properties from Output parameters
        ''' </summary>
        Protected Overrides Sub UpdateObjectFromOutputParams(ByVal row As idcrdObject, parameters As Object())
            ' Update properties from Output parameters
            CType(row, IMappeableidcrdObject).UpdateObjectFromOutputParams(parameters)
            CType(row, IObject).State = ObjectState.Restored
        End Sub

        ''' <summary>
        ''' StoredProceduresPrefix, for example: coop_
        ''' </summary>
        Protected Overrides Function StoredProceduresPrefix() As String
            Return "coop_"
        End Function


        ''' <summary>
        ''' Get a idcrdObject by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As idcrdObject 
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a idcrdObjectList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As idcrdObjectList 
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function



        ''' <summary>
        ''' Get a idcrdObject by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetOne(ByVal idcrd As System.Int32) As idcrdObject         
            Return MyBase.GetOne(New idcrdObject(idcrd))
        End Function

            


        
        ''' <summary>
        ''' Get a idcrdObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByClientes(ByVal transaction As DbTransaction, ByVal idcliente As System.Int32) As idcrdObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "idcrd_GetByClientes", idcliente)
        End Function

        ''' <summary>
        ''' Get a idcrdObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByClientes(ByVal transaction As DbTransaction, Clientes As IUniqueIdentifiable) As idcrdObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "idcrd_GetByClientes", Clientes.Identifier())
        End Function
    
        ''' <summary>
        ''' Get a idcrdObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByruta(ByVal transaction As DbTransaction, ByVal idruta As System.Int32) As idcrdObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "idcrd_GetByruta", idruta)
        End Function

        ''' <summary>
        ''' Get a idcrdObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByruta(ByVal transaction As DbTransaction, ruta As IUniqueIdentifiable) As idcrdObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "idcrd_GetByruta", ruta.Identifier())
        End Function
    


        
        ''' <summary>
        ''' Get a idcrdObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByClientes(ByVal idcliente As System.Int32) As idcrdObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "idcrd_GetByClientes", idcliente)
        End Function

        ''' <summary>
        ''' Get a idcrdObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByClientes(Clientes As IUniqueIdentifiable) As idcrdObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "idcrd_GetByClientes", Clientes.Identifier())
        End Function
    
        ''' <summary>
        ''' Get a idcrdObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByruta(ByVal idruta As System.Int32) As idcrdObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "idcrd_GetByruta", idruta)
        End Function

        ''' <summary>
        ''' Get a idcrdObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByruta(ruta As IUniqueIdentifiable) As idcrdObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "idcrd_GetByruta", ruta.Identifier())
        End Function
    

        
        ''' <summary>
        ''' Delete idcrd 
        ''' </summary>
        Public Overloads Sub Delete(ByVal idcrd As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "idcrd_Delete", idcrd)
        End Sub

        ''' <summary>
        ''' Delete idcrd
        ''' </summary>
        Public Overloads Sub Delete(transaction As DbTransaction , ByVal idcrd As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "idcrd_Delete", idcrd)
        End Sub

            



        

    

    

    

    

    

    

    

        ''' <summary>
        ''' Delete idcrd By Clientes
        ''' </summary>
        Public Overloads Sub DeleteByClientes(ByVal idcliente As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "idcrd_DeleteByClientes", idcliente)
        End Sub

        ''' <summary>
        ''' Delete idcrd By Clientes
        ''' </summary>
        Public Overloads Sub DeleteByClientes(ByVal transaction As DbTransaction , ByVal idcliente As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "idcrd_DeleteByClientes", idcliente)
        End Sub

        ''' <summary>
        ''' Delete idcrd By Clientes
        ''' </summary>
        Public Overloads Sub DeleteByClientes(ByVal Clientes As IUniqueIdentifiable )
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "idcrd_DeleteByClientes", Clientes.Identifier())
        End Sub

        ''' <summary>
        ''' Delete idcrd By Clientes
        ''' </summary>
        Public Overloads Sub DeleteByClientes(ByVal transaction As DbTransaction , ByVal Clientes As IUniqueIdentifiable)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "idcrd_DeleteByClientes", Clientes.Identifier())
        End Sub

        

    

        ''' <summary>
        ''' Delete idcrd By ruta
        ''' </summary>
        Public Overloads Sub DeleteByruta(ByVal idruta As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "idcrd_DeleteByruta", idruta)
        End Sub

        ''' <summary>
        ''' Delete idcrd By ruta
        ''' </summary>
        Public Overloads Sub DeleteByruta(ByVal transaction As DbTransaction , ByVal idruta As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "idcrd_DeleteByruta", idruta)
        End Sub

        ''' <summary>
        ''' Delete idcrd By ruta
        ''' </summary>
        Public Overloads Sub DeleteByruta(ByVal ruta As IUniqueIdentifiable )
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "idcrd_DeleteByruta", ruta.Identifier())
        End Sub

        ''' <summary>
        ''' Delete idcrd By ruta
        ''' </summary>
        Public Overloads Sub DeleteByruta(ByVal transaction As DbTransaction , ByVal ruta As IUniqueIdentifiable)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "idcrd_DeleteByruta", ruta.Identifier())
        End Sub

        

    


        'Database Queries 
        



        #Region "IGenericGateway"

        Private Function GetOne2(identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GeyByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class
End Namespace




