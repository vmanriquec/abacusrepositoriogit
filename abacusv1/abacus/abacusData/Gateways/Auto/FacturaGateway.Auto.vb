
'------------------------------------------------------------------------------
' This file was generated by Cooperator Modeler, version 1.3.3.0
' Created: 15/08/2013 - 05:51 p.m.
' This is a partial class file. The other one is FacturaGateway.vb
' You should not modifiy this file, please edit the other partial class file.
'------------------------------------------------------------------------------

Imports System
Imports abacusRules.Objects
Imports Cooperator.Framework.Data
Imports Cooperator.Framework.Data.Exceptions
Imports Cooperator.Framework.Core
Imports System.Data.Common
Imports System.Reflection
Imports System.Web

Namespace Gateways
        
    Public Partial Class FacturaGateway 
        Inherits BaseGateway(Of FacturaObject, FacturaObjectList)
        Implements IGenericGateway

#Region "Singleton"

        Private Shared _instance As FacturaGateway

        Private Sub New()
        End Sub

        Public Shared Function Instance() As FacturaGateway
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New FacturaGateway()
                Else
                    Dim inst As FacturaGateway = TryCast(HttpContext.Current.Items("abacusRules.FacturaGatewaySingleton"), FacturaGateway)
                    If inst Is Nothing Then
                        inst = New FacturaGateway()
                        HttpContext.Current.Items.Add("abacusRules.FacturaGatewaySingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function

#End Region

        ''' <summary>
        ''' Return the mapped table name
        ''' </summary>
        Protected Overrides ReadOnly Property TableName() As String
            Get
                Return "Factura"
            End Get
        End Property

        ''' <summary>
        ''' Return the FacturaGateway type FullName
        ''' </summary>
        Protected Overrides ReadOnly Property RuleName() As String
            Get
                Return GetType(FacturaGateway ).FullName
            End Get
        End Property


        

        


        ''' <summary>
        ''' Assign properties values based on DataReader
        ''' </summary>
        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As FacturaObject )
            Dim _IdTrabjador As System.Nullable(Of System.Int32) 
If reader.IsDBNull(1) Then 
	 _IdTrabjador = New System.Nullable(Of System.Int32)
Else
	 _IdTrabjador = reader.GetInt32(1)
End If
Dim _IdAlmacen As System.Nullable(Of System.Int32) 
If reader.IsDBNull(2) Then 
	 _IdAlmacen = New System.Nullable(Of System.Int32)
Else
	 _IdAlmacen = reader.GetInt32(2)
End If
Dim _SFactura As String
If reader.IsDBNull(3) Then 
	 _SFactura = ""
Else
	 _SFactura = reader.GetString(3)
End If
Dim _NFactura As System.Nullable(Of System.Int32) 
If reader.IsDBNull(4) Then 
	 _NFactura = New System.Nullable(Of System.Int32)
Else
	 _NFactura = reader.GetInt32(4)
End If
Dim _FecEmision As System.Nullable(Of System.DateTime) 
If reader.IsDBNull(5) Then 
	 _FecEmision = New System.Nullable(Of System.DateTime)
Else
	 _FecEmision = reader.GetDateTime(5)
End If
Dim _CanalVenta As String
If reader.IsDBNull(6) Then 
	 _CanalVenta = ""
Else
	 _CanalVenta = reader.GetString(6)
End If
Dim _FPago As System.Nullable(Of System.Int32) 
If reader.IsDBNull(7) Then 
	 _FPago = New System.Nullable(Of System.Int32)
Else
	 _FPago = reader.GetInt32(7)
End If
Dim _RACZ As String
If reader.IsDBNull(8) Then 
	 _RACZ = ""
Else
	 _RACZ = reader.GetString(8)
End If
Dim _IdCliente As System.Nullable(Of System.Int32) 
If reader.IsDBNull(9) Then 
	 _IdCliente = New System.Nullable(Of System.Int32)
Else
	 _IdCliente = reader.GetInt32(9)
End If
Dim _EquipoFrio As String
If reader.IsDBNull(10) Then 
	 _EquipoFrio = ""
Else
	 _EquipoFrio = reader.GetString(10)
End If
Dim _Moneda As System.Nullable(Of System.Int32) 
If reader.IsDBNull(11) Then 
	 _Moneda = New System.Nullable(Of System.Int32)
Else
	 _Moneda = reader.GetInt32(11)
End If
Dim _NPedido As System.Nullable(Of System.Int32) 
If reader.IsDBNull(12) Then 
	 _NPedido = New System.Nullable(Of System.Int32)
Else
	 _NPedido = reader.GetInt32(12)
End If
Dim _FecPedido As System.Nullable(Of System.DateTime) 
If reader.IsDBNull(13) Then 
	 _FecPedido = New System.Nullable(Of System.DateTime)
Else
	 _FecPedido = reader.GetDateTime(13)
End If
Dim _IdVendedor As System.Nullable(Of System.Int32) 
If reader.IsDBNull(14) Then 
	 _IdVendedor = New System.Nullable(Of System.Int32)
Else
	 _IdVendedor = reader.GetInt32(14)
End If
Dim _OCompra As String
If reader.IsDBNull(15) Then 
	 _OCompra = ""
Else
	 _OCompra = reader.GetString(15)
End If
Dim _OrdenVenta As String
If reader.IsDBNull(16) Then 
	 _OrdenVenta = ""
Else
	 _OrdenVenta = reader.GetString(16)
End If
Dim _FecDespacho As System.Nullable(Of System.DateTime) 
If reader.IsDBNull(17) Then 
	 _FecDespacho = New System.Nullable(Of System.DateTime)
Else
	 _FecDespacho = reader.GetDateTime(17)
End If
Dim _Guia As String
If reader.IsDBNull(18) Then 
	 _Guia = ""
Else
	 _Guia = reader.GetString(18)
End If
Dim _PED As System.Nullable(Of System.Int32) 
If reader.IsDBNull(19) Then 
	 _PED = New System.Nullable(Of System.Int32)
Else
	 _PED = reader.GetInt32(19)
End If
Dim _Anulado As System.Nullable(Of System.Boolean) 
If reader.IsDBNull(20) Then 
	 _Anulado = New System.Nullable(Of System.Boolean)
Else
	 _Anulado = reader.GetBoolean(20)
End If
Dim _ObsAnulado As String
If reader.IsDBNull(21) Then 
	 _ObsAnulado = ""
Else
	 _ObsAnulado = reader.GetString(21)
End If
Dim _FoB As System.Nullable(Of System.Boolean) 
If reader.IsDBNull(22) Then 
	 _FoB = New System.Nullable(Of System.Boolean)
Else
	 _FoB = reader.GetBoolean(22)
End If
Dim _IdLocal As System.Nullable(Of System.Int32) 
If reader.IsDBNull(23) Then 
	 _IdLocal = New System.Nullable(Of System.Int32)
Else
	 _IdLocal = reader.GetInt32(23)
End If
Dim _SBoleta As String
If reader.IsDBNull(24) Then 
	 _SBoleta = ""
Else
	 _SBoleta = reader.GetString(24)
End If
Dim _NBoleta As System.Nullable(Of System.Int32) 
If reader.IsDBNull(25) Then 
	 _NBoleta = New System.Nullable(Of System.Int32)
Else
	 _NBoleta = reader.GetInt32(25)
End If
Dim _AlmacenesString As String
If reader.IsDBNull(26) Then 
	 _AlmacenesString = ""
Else
	 _AlmacenesString = reader.GetString(26)
End If
Dim _ClientesString As String
If reader.IsDBNull(27) Then 
	 _ClientesString = ""
Else
	 _ClientesString = reader.GetString(27)
End If
Dim _TrabajadoresString As String
If reader.IsDBNull(28) Then 
	 _TrabajadoresString = ""
Else
	 _TrabajadoresString = reader.GetString(28)
End If

            Dim Factura As IMappeableFacturaObject  = CType(entity, IMappeableFacturaObject)
            Factura.HydrateFields(reader.GetInt32(0), _
_IdTrabjador, _
_IdAlmacen, _
_SFactura, _
_NFactura, _
_FecEmision, _
_CanalVenta, _
_FPago, _
_RACZ, _
_IdCliente, _
_EquipoFrio, _
_Moneda, _
_NPedido, _
_FecPedido, _
_IdVendedor, _
_OCompra, _
_OrdenVenta, _
_FecDespacho, _
_Guia, _
_PED, _
_Anulado, _
_ObsAnulado, _
_FoB, _
_IdLocal, _
_SBoleta, _
_NBoleta, _
_AlmacenesString, _
_ClientesString, _
_TrabajadoresString)
            CType(entity, IObject).State = ObjectState.Restored
        End Sub

        ''' <summary>
        ''' Get field values to call insertion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForInsert(ByVal entity As FacturaObject) As Object()
            Dim Factura As IMappeableFacturaObject = CType(entity, IMappeableFacturaObject)
            Return Factura.GetFieldsForInsert()
        End Function

        ''' <summary>
        ''' Get field values to call update stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForUpdate(ByVal entity As FacturaObject) As Object()
            Dim Factura As IMappeableFacturaObject = CType(entity, IMappeableFacturaObject)
            Return Factura.GetFieldsForUpdate()
        End Function

        ''' <summary>
        ''' Get field values to call deletion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForDelete(ByVal entity As FacturaObject) As Object()
            Dim Factura As IMappeableFacturaObject = CType(entity, IMappeableFacturaObject)
            Return Factura.GetFieldsForDelete()
        End Function

        ''' <summary>
        ''' Raised after insert and update. Update properties from Output parameters
        ''' </summary>
        Protected Overrides Sub UpdateObjectFromOutputParams(ByVal row As FacturaObject, parameters As Object())
            ' Update properties from Output parameters
            CType(row, IMappeableFacturaObject).UpdateObjectFromOutputParams(parameters)
            CType(row, IObject).State = ObjectState.Restored
        End Sub

        ''' <summary>
        ''' StoredProceduresPrefix, for example: coop_
        ''' </summary>
        Protected Overrides Function StoredProceduresPrefix() As String
            Return "coop_"
        End Function


        ''' <summary>
        ''' Get a FacturaObject by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As FacturaObject 
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a FacturaObjectList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As FacturaObjectList 
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function



        ''' <summary>
        ''' Get a FacturaObject by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetOne(ByVal IdFactura As System.Int32) As FacturaObject         
            Return MyBase.GetOne(New FacturaObject(IdFactura))
        End Function

            


        
        ''' <summary>
        ''' Get a FacturaObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByAlmacenes(ByVal transaction As DbTransaction, ByVal IdAlmacen As System.Int32) As FacturaObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Factura_GetByAlmacenes", IdAlmacen)
        End Function

        ''' <summary>
        ''' Get a FacturaObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByAlmacenes(ByVal transaction As DbTransaction, Almacenes As IUniqueIdentifiable) As FacturaObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Factura_GetByAlmacenes", Almacenes.Identifier())
        End Function
    
        ''' <summary>
        ''' Get a FacturaObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByClientes(ByVal transaction As DbTransaction, ByVal IdCliente As System.Int32) As FacturaObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Factura_GetByClientes", IdCliente)
        End Function

        ''' <summary>
        ''' Get a FacturaObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByClientes(ByVal transaction As DbTransaction, Clientes As IUniqueIdentifiable) As FacturaObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Factura_GetByClientes", Clientes.Identifier())
        End Function
    
        ''' <summary>
        ''' Get a FacturaObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByTrabajadores(ByVal transaction As DbTransaction, ByVal IdTrabjador As System.Int32) As FacturaObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Factura_GetByTrabajadores", IdTrabjador)
        End Function

        ''' <summary>
        ''' Get a FacturaObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByTrabajadores(ByVal transaction As DbTransaction, Trabajadores As IUniqueIdentifiable) As FacturaObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Factura_GetByTrabajadores", Trabajadores.Identifier())
        End Function
    


        
        ''' <summary>
        ''' Get a FacturaObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByAlmacenes(ByVal IdAlmacen As System.Int32) As FacturaObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Factura_GetByAlmacenes", IdAlmacen)
        End Function

        ''' <summary>
        ''' Get a FacturaObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByAlmacenes(Almacenes As IUniqueIdentifiable) As FacturaObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Factura_GetByAlmacenes", Almacenes.Identifier())
        End Function
    
        ''' <summary>
        ''' Get a FacturaObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByClientes(ByVal IdCliente As System.Int32) As FacturaObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Factura_GetByClientes", IdCliente)
        End Function

        ''' <summary>
        ''' Get a FacturaObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByClientes(Clientes As IUniqueIdentifiable) As FacturaObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Factura_GetByClientes", Clientes.Identifier())
        End Function
    
        ''' <summary>
        ''' Get a FacturaObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByTrabajadores(ByVal IdTrabjador As System.Int32) As FacturaObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Factura_GetByTrabajadores", IdTrabjador)
        End Function

        ''' <summary>
        ''' Get a FacturaObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByTrabajadores(Trabajadores As IUniqueIdentifiable) As FacturaObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Factura_GetByTrabajadores", Trabajadores.Identifier())
        End Function
    

        
        ''' <summary>
        ''' Delete Factura 
        ''' </summary>
        Public Overloads Sub Delete(ByVal IdFactura As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Factura_Delete", IdFactura)
        End Sub

        ''' <summary>
        ''' Delete Factura
        ''' </summary>
        Public Overloads Sub Delete(transaction As DbTransaction , ByVal IdFactura As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Factura_Delete", IdFactura)
        End Sub

            



        

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

        ''' <summary>
        ''' Delete Factura By Almacenes
        ''' </summary>
        Public Overloads Sub DeleteByAlmacenes(ByVal IdAlmacen As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Factura_DeleteByAlmacenes", IdAlmacen)
        End Sub

        ''' <summary>
        ''' Delete Factura By Almacenes
        ''' </summary>
        Public Overloads Sub DeleteByAlmacenes(ByVal transaction As DbTransaction , ByVal IdAlmacen As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Factura_DeleteByAlmacenes", IdAlmacen)
        End Sub

        ''' <summary>
        ''' Delete Factura By Almacenes
        ''' </summary>
        Public Overloads Sub DeleteByAlmacenes(ByVal Almacenes As IUniqueIdentifiable )
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Factura_DeleteByAlmacenes", Almacenes.Identifier())
        End Sub

        ''' <summary>
        ''' Delete Factura By Almacenes
        ''' </summary>
        Public Overloads Sub DeleteByAlmacenes(ByVal transaction As DbTransaction , ByVal Almacenes As IUniqueIdentifiable)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Factura_DeleteByAlmacenes", Almacenes.Identifier())
        End Sub

        

    

        ''' <summary>
        ''' Delete Factura By Clientes
        ''' </summary>
        Public Overloads Sub DeleteByClientes(ByVal IdCliente As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Factura_DeleteByClientes", IdCliente)
        End Sub

        ''' <summary>
        ''' Delete Factura By Clientes
        ''' </summary>
        Public Overloads Sub DeleteByClientes(ByVal transaction As DbTransaction , ByVal IdCliente As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Factura_DeleteByClientes", IdCliente)
        End Sub

        ''' <summary>
        ''' Delete Factura By Clientes
        ''' </summary>
        Public Overloads Sub DeleteByClientes(ByVal Clientes As IUniqueIdentifiable )
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Factura_DeleteByClientes", Clientes.Identifier())
        End Sub

        ''' <summary>
        ''' Delete Factura By Clientes
        ''' </summary>
        Public Overloads Sub DeleteByClientes(ByVal transaction As DbTransaction , ByVal Clientes As IUniqueIdentifiable)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Factura_DeleteByClientes", Clientes.Identifier())
        End Sub

        

    

        ''' <summary>
        ''' Delete Factura By Trabajadores
        ''' </summary>
        Public Overloads Sub DeleteByTrabajadores(ByVal IdTrabjador As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Factura_DeleteByTrabajadores", IdTrabjador)
        End Sub

        ''' <summary>
        ''' Delete Factura By Trabajadores
        ''' </summary>
        Public Overloads Sub DeleteByTrabajadores(ByVal transaction As DbTransaction , ByVal IdTrabjador As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Factura_DeleteByTrabajadores", IdTrabjador)
        End Sub

        ''' <summary>
        ''' Delete Factura By Trabajadores
        ''' </summary>
        Public Overloads Sub DeleteByTrabajadores(ByVal Trabajadores As IUniqueIdentifiable )
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Factura_DeleteByTrabajadores", Trabajadores.Identifier())
        End Sub

        ''' <summary>
        ''' Delete Factura By Trabajadores
        ''' </summary>
        Public Overloads Sub DeleteByTrabajadores(ByVal transaction As DbTransaction , ByVal Trabajadores As IUniqueIdentifiable)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Factura_DeleteByTrabajadores", Trabajadores.Identifier())
        End Sub

        

    


        'Database Queries 
        



        #Region "IGenericGateway"

        Private Function GetOne2(identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GeyByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class
End Namespace




