
'------------------------------------------------------------------------------
' This file was generated by Cooperator Modeler, version 1.3.3.0
' Created: 15/08/2013 - 05:51 p.m.
' This is a partial class file. The other one is rutaGateway.vb
' You should not modifiy this file, please edit the other partial class file.
'------------------------------------------------------------------------------

Imports System
Imports abacusRules.Objects
Imports Cooperator.Framework.Data
Imports Cooperator.Framework.Data.Exceptions
Imports Cooperator.Framework.Core
Imports System.Data.Common
Imports System.Reflection
Imports System.Web

Namespace Gateways
        
    Public Partial Class rutaGateway 
        Inherits BaseGateway(Of rutaObject, rutaObjectList)
        Implements IGenericGateway

#Region "Singleton"

        Private Shared _instance As rutaGateway

        Private Sub New()
        End Sub

        Public Shared Function Instance() As rutaGateway
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New rutaGateway()
                Else
                    Dim inst As rutaGateway = TryCast(HttpContext.Current.Items("abacusRules.rutaGatewaySingleton"), rutaGateway)
                    If inst Is Nothing Then
                        inst = New rutaGateway()
                        HttpContext.Current.Items.Add("abacusRules.rutaGatewaySingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function

#End Region

        ''' <summary>
        ''' Return the mapped table name
        ''' </summary>
        Protected Overrides ReadOnly Property TableName() As String
            Get
                Return "ruta"
            End Get
        End Property

        ''' <summary>
        ''' Return the rutaGateway type FullName
        ''' </summary>
        Protected Overrides ReadOnly Property RuleName() As String
            Get
                Return GetType(rutaGateway ).FullName
            End Get
        End Property


        

        


        ''' <summary>
        ''' Assign properties values based on DataReader
        ''' </summary>
        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As rutaObject )
            Dim _codigoruta As String
If reader.IsDBNull(1) Then 
	 _codigoruta = ""
Else
	 _codigoruta = reader.GetString(1)
End If
Dim _nombreruta As String
If reader.IsDBNull(2) Then 
	 _nombreruta = ""
Else
	 _nombreruta = reader.GetString(2)
End If
Dim _observacionruta As String
If reader.IsDBNull(3) Then 
	 _observacionruta = ""
Else
	 _observacionruta = reader.GetString(3)
End If
Dim _iddistrito As System.Nullable(Of System.Int32) 
If reader.IsDBNull(4) Then 
	 _iddistrito = New System.Nullable(Of System.Int32)
Else
	 _iddistrito = reader.GetInt32(4)
End If
Dim _DistritosString As String
If reader.IsDBNull(5) Then 
	 _DistritosString = ""
Else
	 _DistritosString = reader.GetString(5)
End If

            Dim ruta As IMappeablerutaObject  = CType(entity, IMappeablerutaObject)
            ruta.HydrateFields(reader.GetInt32(0), _
_codigoruta, _
_nombreruta, _
_observacionruta, _
_iddistrito, _
_DistritosString)
            CType(entity, IObject).State = ObjectState.Restored
        End Sub

        ''' <summary>
        ''' Get field values to call insertion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForInsert(ByVal entity As rutaObject) As Object()
            Dim ruta As IMappeablerutaObject = CType(entity, IMappeablerutaObject)
            Return ruta.GetFieldsForInsert()
        End Function

        ''' <summary>
        ''' Get field values to call update stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForUpdate(ByVal entity As rutaObject) As Object()
            Dim ruta As IMappeablerutaObject = CType(entity, IMappeablerutaObject)
            Return ruta.GetFieldsForUpdate()
        End Function

        ''' <summary>
        ''' Get field values to call deletion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForDelete(ByVal entity As rutaObject) As Object()
            Dim ruta As IMappeablerutaObject = CType(entity, IMappeablerutaObject)
            Return ruta.GetFieldsForDelete()
        End Function

        ''' <summary>
        ''' Raised after insert and update. Update properties from Output parameters
        ''' </summary>
        Protected Overrides Sub UpdateObjectFromOutputParams(ByVal row As rutaObject, parameters As Object())
            ' Update properties from Output parameters
            CType(row, IMappeablerutaObject).UpdateObjectFromOutputParams(parameters)
            CType(row, IObject).State = ObjectState.Restored
        End Sub

        ''' <summary>
        ''' StoredProceduresPrefix, for example: coop_
        ''' </summary>
        Protected Overrides Function StoredProceduresPrefix() As String
            Return "coop_"
        End Function


        ''' <summary>
        ''' Get a rutaObject by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As rutaObject 
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a rutaObjectList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As rutaObjectList 
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function



        ''' <summary>
        ''' Get a rutaObject by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetOne(ByVal Idruta As System.Int32) As rutaObject         
            Return MyBase.GetOne(New rutaObject(Idruta))
        End Function

            


        
        ''' <summary>
        ''' Get a rutaObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByDistritos(ByVal transaction As DbTransaction, ByVal iddistrito As System.Int32) As rutaObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ruta_GetByDistritos", iddistrito)
        End Function

        ''' <summary>
        ''' Get a rutaObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByDistritos(ByVal transaction As DbTransaction, Distritos As IUniqueIdentifiable) As rutaObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ruta_GetByDistritos", Distritos.Identifier())
        End Function
    


        
        ''' <summary>
        ''' Get a rutaObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByDistritos(ByVal iddistrito As System.Int32) As rutaObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ruta_GetByDistritos", iddistrito)
        End Function

        ''' <summary>
        ''' Get a rutaObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByDistritos(Distritos As IUniqueIdentifiable) As rutaObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ruta_GetByDistritos", Distritos.Identifier())
        End Function
    

        
        ''' <summary>
        ''' Delete ruta 
        ''' </summary>
        Public Overloads Sub Delete(ByVal Idruta As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ruta_Delete", Idruta)
        End Sub

        ''' <summary>
        ''' Delete ruta
        ''' </summary>
        Public Overloads Sub Delete(transaction As DbTransaction , ByVal Idruta As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ruta_Delete", Idruta)
        End Sub

            



        

    

    

    

    

    

    

    

    

    

        ''' <summary>
        ''' Delete ruta By Distritos
        ''' </summary>
        Public Overloads Sub DeleteByDistritos(ByVal iddistrito As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ruta_DeleteByDistritos", iddistrito)
        End Sub

        ''' <summary>
        ''' Delete ruta By Distritos
        ''' </summary>
        Public Overloads Sub DeleteByDistritos(ByVal transaction As DbTransaction , ByVal iddistrito As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ruta_DeleteByDistritos", iddistrito)
        End Sub

        ''' <summary>
        ''' Delete ruta By Distritos
        ''' </summary>
        Public Overloads Sub DeleteByDistritos(ByVal Distritos As IUniqueIdentifiable )
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ruta_DeleteByDistritos", Distritos.Identifier())
        End Sub

        ''' <summary>
        ''' Delete ruta By Distritos
        ''' </summary>
        Public Overloads Sub DeleteByDistritos(ByVal transaction As DbTransaction , ByVal Distritos As IUniqueIdentifiable)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ruta_DeleteByDistritos", Distritos.Identifier())
        End Sub

        

    


        'Database Queries 
        



        #Region "IGenericGateway"

        Private Function GetOne2(identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GeyByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class
End Namespace




