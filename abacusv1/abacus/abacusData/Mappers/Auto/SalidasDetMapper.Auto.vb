
'------------------------------------------------------------------------------
' This file was generated by Cooperator Modeler, version 1.3.3.0
' Created: 15/08/2013 - 05:51 p.m.
' This is a partial class file. The other one is SalidasDetMapper.cs
' You should not modifiy this file, please edit the other partial class file.
'------------------------------------------------------------------------------

Imports System
Imports abacusRules.Entities
Imports abacusRules.Objects
Imports Cooperator.Framework.Data
Imports Cooperator.Framework.Data.Exceptions
Imports Cooperator.Framework.Core
Imports System.Data.Common
Imports System.Reflection
Imports System.Web


Namespace Mappers
    

    Public Partial Class SalidasDetMapper
        Inherits BaseGateway(Of SalidasDet, SalidasDetList)
        Implements IGenericGateway

#Region "Singleton"

        Private Shared _instance As SalidasDetMapper

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As SalidasDetMapper
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New SalidasDetMapper()
                Else
                    Dim inst As SalidasDetMapper = TryCast(HttpContext.Current.Items("abacusRules.SalidasDetMapperSingleton"), SalidasDetMapper)
                    If inst Is Nothing Then
                        inst = New SalidasDetMapper()
                        HttpContext.Current.Items.Add("abacusRules.SalidasDetMapperSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function


#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim  s() as String={"IdSalidasDetP"}
            return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return GetType(SalidasDet)
        End Function


        ''' <summary>
        ''' Return the mapped table name
        ''' </summary>
        Protected Overrides ReadOnly Property TableName() As String 
            Get
                Return "SalidasDet"
            End Get
        End Property

        ''' <summary>
        ''' Return the SalidasDetGateway type FullName
        ''' </summary>
        Protected Overrides ReadOnly Property RuleName() As String
            Get
                Return GetType(SalidasDetMapper).FullName
            End Get
        End Property


        

        

        ''' <summary>
        ''' Assign properties values based on DataReader
        ''' </summary>
        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As SalidasDet)
            Dim _IdSalidasP As System.Nullable(Of System.Int32) 
If reader.IsDBNull(1) Then 
	 _IdSalidasP = New System.Nullable(Of System.Int32)
Else
	 _IdSalidasP = reader.GetInt32(1)
End If
Dim _IdSalidasDet As System.Nullable(Of System.Int32) 
If reader.IsDBNull(2) Then 
	 _IdSalidasDet = New System.Nullable(Of System.Int32)
Else
	 _IdSalidasDet = reader.GetInt32(2)
End If
Dim _IdSalidas As System.Nullable(Of System.Int32) 
If reader.IsDBNull(3) Then 
	 _IdSalidas = New System.Nullable(Of System.Int32)
Else
	 _IdSalidas = reader.GetInt32(3)
End If
Dim _IdProducto As System.Nullable(Of System.Int32) 
If reader.IsDBNull(4) Then 
	 _IdProducto = New System.Nullable(Of System.Int32)
Else
	 _IdProducto = reader.GetInt32(4)
End If
Dim _Cantidad As System.Nullable(Of System.Int32) 
If reader.IsDBNull(5) Then 
	 _Cantidad = New System.Nullable(Of System.Int32)
Else
	 _Cantidad = reader.GetInt32(5)
End If
Dim _PUnit As System.Nullable(Of System.Decimal) 
If reader.IsDBNull(6) Then 
	 _PUnit = New System.Nullable(Of System.Decimal)
Else
	 _PUnit = reader.GetDecimal(6)
End If
Dim _IdTienda As System.Nullable(Of System.Int32) 
If reader.IsDBNull(7) Then 
	 _IdTienda = New System.Nullable(Of System.Int32)
Else
	 _IdTienda = reader.GetInt32(7)
End If
Dim _upsize_ts As System.Nullable(Of System.DateTime) 
If reader.IsDBNull(8) Then 
	 _upsize_ts = New System.Nullable(Of System.DateTime)
Else
	 _upsize_ts = reader.GetDateTime(8)
End If
Dim _SalidasString As String
If reader.IsDBNull(9) Then 
	 _SalidasString = ""
Else
	 _SalidasString = reader.GetString(9)
End If

            Dim SalidasDet As IMappeableSalidasDetObject  = CType(entity, IMappeableSalidasDetObject)
            SalidasDet.HydrateFields(reader.GetInt32(0), _
_IdSalidasP, _
_IdSalidasDet, _
_IdSalidas, _
_IdProducto, _
_Cantidad, _
_PUnit, _
_IdTienda, _
_upsize_ts, _
_SalidasString)
        End Sub

        ''' <summary>
        ''' Get field values to call insertion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForInsert(ByVal entity As SalidasDet) As Object()
            Dim SalidasDet As IMappeableSalidasDetObject = CType(entity, IMappeableSalidasDetObject)
            Return SalidasDet.GetFieldsForInsert()
        End Function

        ''' <summary>
        ''' Get field values to call update stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForUpdate(ByVal entity As SalidasDet) As Object()
            Dim SalidasDet As IMappeableSalidasDetObject = CType(entity, IMappeableSalidasDetObject)
            Return SalidasDet.GetFieldsForUpdate()
        End Function

        ''' <summary>
        ''' Get field values to call deletion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForDelete(ByVal entity As SalidasDet) As Object()
            Dim SalidasDet As IMappeableSalidasDetObject = CType(entity, IMappeableSalidasDetObject)
            Return SalidasDet.GetFieldsForDelete()
        End Function

        ''' <summary>
        ''' Raised after insert and update. Update properties from Output parameters
        ''' </summary>
        Protected Overrides Sub UpdateObjectFromOutputParams(ByVal entity As SalidasDet, ByVal parameters As Object())
            ' Update properties from Output parameters
            CType(entity, IMappeableSalidasDetObject).UpdateObjectFromOutputParams(parameters)
        End Sub

        ''' <summary>
        ''' StoredProceduresPrefix, for example: coop_
        ''' </summary>
        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function


        


        

        ''' <summary>
        ''' Complete the aggregations for this entity. 
        ''' </summary>
        Protected Overrides Sub CompleteEntity(ByVal entity As SalidasDet)
            Dim SalidasEntity As Objects.SalidasObject = Nothing 'Lazy load
            CType(entity, IMappeableSalidasDet).CompleteEntity(SalidasEntity)
        End Sub


        # Region "CRUD Operations"
        

        # End Region
        
        ''' <summary>
        ''' Delete children for this entity
        ''' </summary>
        Public Sub DeleteChildren(ByVal transaction As DbTransaction, ByVal entity As IUniqueIdentifiable)
                        
        End Sub


          



        ''' <summary>
        ''' Get a SalidasDet by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As SalidasDet
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a SalidasDetList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As SalidasDetList
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetOne(IdSalidasDetP As System.Int32) As SalidasDet
            Return MyBase.GetOne(New SalidasDet(IdSalidasDetP))
        End Function

        

        ' GetOne By Objects and Params
            

        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetBySalidas(IdSalidasP As System.Int32) As SalidasDetList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "SalidasDet_GetBySalidas", IdSalidasP)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetBySalidas(ByVal Salidas As IUniqueIdentifiable) As SalidasDetList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "SalidasDet_GetBySalidas", Salidas.Identifier())
        End Function

    


        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetBySalidas(ByVal transaction As DbTransaction,IdSalidasP As System.Int32) As SalidasDetList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "SalidasDet_GetBySalidas", IdSalidasP)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetBySalidas(ByVal transaction As DbTransaction, ByVal Salidas As IUniqueIdentifiable) As SalidasDetList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "SalidasDet_GetBySalidas", Salidas.Identifier())
        End Function

    

        





        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(IdSalidasDetP As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "SalidasDet_Delete", IdSalidasDetP)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(ByVal transaction As DbTransaction ,IdSalidasDetP As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "SalidasDet_Delete", IdSalidasDetP)
        End Sub

        ' Delete By Objects and Params
            



        

    

    

    

    

    

    

    

    

    

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteBySalidas(IdSalidasP As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "SalidasDet_DeleteBySalidas", IdSalidasP)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteBySalidas(ByVal transaction As DbTransaction , IdSalidasP As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "SalidasDet_DeleteBySalidas", IdSalidasP)
        End Sub


        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteBySalidas(ByVal Salidas As IUniqueIdentifiable)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "SalidasDet_DeleteBySalidas", Salidas.Identifier())
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteBySalidas(ByVal transaction As DbTransaction, ByVal Salidas As IUniqueIdentifiable)        
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "SalidasDet_DeleteBySalidas", Salidas.Identifier())
        End Sub

        

    


        'Database Queries 
        






        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace


Namespace Wrappers
    ''' <summary>
    ''' 
    ''' </summary>
    Public Class SalidasDetMapperWrapper

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            return Instance().GetPKPropertiesNames()
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return Instance().GetMappingType()
        End Function


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function Instance() As abacusRules.Mappers.SalidasDetMapper
            Return abacusRules.Mappers.SalidasDetMapper.Instance()
        End Function

        
        ''' <summary>
        ''' Get a SalidasDet Entity by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetOne(ByVal IdSalidasDetP As System.Int32) As Entities.SalidasDet         
            Return Instance().GetOne( IdSalidasDetP)
        End Function
        

        ' GetBy Objects and Params
            

        

        ''' <summary>
        ''' Get a SalidasDetList by calling a Stored Procedure
        ''' </summary>
        Public Function GetBySalidas( ByVal IdSalidasP As System.Int32) As Entities.SalidasDetList 
            Return Instance().GetBySalidas(IdSalidasP)
        End Function

        ''' <summary>
        ''' Get a SalidasDetList by calling a Stored Procedure
        ''' </summary>
        Public Function GetBySalidas(ByVal  Salidas As IUniqueIdentifiable) As Entities.SalidasDetList
            Return Instance().GetBySalidas(Salidas)
        End Function

    

        ''' <summary>
        ''' GetAll SalidasDet 
        ''' </summary>
        Public Function GetAll() As Entities.SalidasDetList
            Return Instance().GetAll()
        End Function

        
        

        ''' <summary>
        ''' Delete children for SalidasDet
        ''' </summary>
        Public Sub DeleteChildren(ByVal transaction As DbTransaction, ByVal entity As SalidasDet)
            Instance().DeleteChildren(transaction, entity)
        End Sub

        


            

        

        ''' <summary>
        ''' Delete SalidasDet by Salidas
        ''' </summary>
        Public Sub DeleteBySalidas( ByVal IdSalidasP As System.Int32)
            Instance().DeleteBySalidas(IdSalidasP)
        End Sub

        ''' <summary>
        ''' Delete SalidasDet by Salidas
        ''' </summary>
        Public Sub DeleteBySalidas(ByVal Salidas As IUniqueIdentifiable )
            Instance().DeleteBySalidas(Salidas)
        End Sub

    

        ''' <summary>
        ''' Delete SalidasDet 
        ''' </summary>
        Public Overloads Sub Delete(ByVal IdSalidasDetP As System.Int32)
            Instance().Delete(IdSalidasDetP)
        End Sub

        ''' <summary>
        ''' Delete SalidasDet 
        ''' </summary>
        Public Overloads Sub Delete(ByVal entity As Entities.SalidasDet)
            Instance().Delete(entity)
        End Sub

        ''' <summary>
        ''' Save SalidasDet  
        ''' </summary>
        Public Overloads Sub Save(ByVal entity As Entities.SalidasDet)
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert SalidasDet 
        ''' </summary>
        Public Overloads Sub Insert(ByVal entity As Entities.SalidasDet)
            Instance().Insert(entity)
        End Sub

        ''' <summary>
        ''' Save SalidasDet 
        ''' </summary>
        Public Overloads Sub Save(ByVal IdSalidasDetP As System.Int32, ByVal IdSalidasP As System.Int32, ByVal IdSalidasDet As System.Int32, ByVal IdSalidas As System.Int32, ByVal IdProducto As System.Int32, ByVal Cantidad As System.Int32, ByVal PUnit As System.Decimal, ByVal IdTienda As System.Int32, ByVal upsize_ts As System.DateTime, ByVal SalidasString As System.String)
            Dim entity As Entities.SalidasDet = Instance().GetOne(IdSalidasDetP)
            If entity Is Nothing Then
                Throw New ApplicationException(String.Format("Entity not found. IUniqueIdentifiable values: {0} = {1}", "IdSalidasDetP", IdSalidasDetP))
            End If

            entity.IdSalidasP = IdSalidasP
            entity.IdSalidasDet = IdSalidasDet
            entity.IdSalidas = IdSalidas
            entity.IdProducto = IdProducto
            entity.Cantidad = Cantidad
            entity.PUnit = PUnit
            entity.IdTienda = IdTienda
            entity.upsize_ts = upsize_ts
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert SalidasDet
        ''' </summary>
        Public Overloads Sub Insert(ByVal IdSalidasP As System.Int32, ByVal IdSalidasDet As System.Int32, ByVal IdSalidas As System.Int32, ByVal IdProducto As System.Int32, ByVal Cantidad As System.Int32, ByVal PUnit As System.Decimal, ByVal IdTienda As System.Int32, ByVal upsize_ts As System.DateTime)
            Dim entity As Entities.SalidasDet = New Entities.SalidasDet

            entity.IdSalidasP = IdSalidasP
            entity.IdSalidasDet = IdSalidasDet
            entity.IdSalidas = IdSalidas
            entity.IdProducto = IdProducto
            entity.Cantidad = Cantidad
            entity.PUnit = PUnit
            entity.IdTienda = IdTienda
            entity.upsize_ts = upsize_ts
            Instance().Insert(entity)
        End Sub

        

        'Database Queries 
        


    End Class
End Namespace


Namespace Loaders

    ''' <summary>
    ''' 
    ''' </summary>
    Partial Public Class SalidasDetLoader(Of T As {SalidasDet, New})
        Inherits BaseLoader(Of T, SalidasDet, ObjectList(Of T))
        Implements IGenericGateway



#Region "Singleton"

        Private Shared _instance As SalidasDetLoader(Of T)

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As SalidasDetLoader(Of T)
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New SalidasDetLoader(Of T)
                Else
                    Dim inst As SalidasDetLoader(Of T) = TryCast(HttpContext.Current.Items("abacusRules.SalidasDetLoaderSingleton"), SalidasDetLoader(Of T))
                    If inst Is Nothing Then
                        inst = New SalidasDetLoader(Of T)
                        HttpContext.Current.Items.Add("abacusRules.SalidasDetLoaderSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function

#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim s() as String={"IdSalidasDetP"}
            Return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            Return GetType(SalidasDet)
        End Function


        Protected Overrides ReadOnly Property TableName As String 
            Get
                Return "SalidasDet"
            End Get
        End Property

        

        


        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As SalidasDet)
            Dim _IdSalidasP As System.Nullable(Of System.Int32) 
If reader.IsDBNull(1) Then 
	 _IdSalidasP = New System.Nullable(Of System.Int32)
Else
	 _IdSalidasP = reader.GetInt32(1)
End If
Dim _IdSalidasDet As System.Nullable(Of System.Int32) 
If reader.IsDBNull(2) Then 
	 _IdSalidasDet = New System.Nullable(Of System.Int32)
Else
	 _IdSalidasDet = reader.GetInt32(2)
End If
Dim _IdSalidas As System.Nullable(Of System.Int32) 
If reader.IsDBNull(3) Then 
	 _IdSalidas = New System.Nullable(Of System.Int32)
Else
	 _IdSalidas = reader.GetInt32(3)
End If
Dim _IdProducto As System.Nullable(Of System.Int32) 
If reader.IsDBNull(4) Then 
	 _IdProducto = New System.Nullable(Of System.Int32)
Else
	 _IdProducto = reader.GetInt32(4)
End If
Dim _Cantidad As System.Nullable(Of System.Int32) 
If reader.IsDBNull(5) Then 
	 _Cantidad = New System.Nullable(Of System.Int32)
Else
	 _Cantidad = reader.GetInt32(5)
End If
Dim _PUnit As System.Nullable(Of System.Decimal) 
If reader.IsDBNull(6) Then 
	 _PUnit = New System.Nullable(Of System.Decimal)
Else
	 _PUnit = reader.GetDecimal(6)
End If
Dim _IdTienda As System.Nullable(Of System.Int32) 
If reader.IsDBNull(7) Then 
	 _IdTienda = New System.Nullable(Of System.Int32)
Else
	 _IdTienda = reader.GetInt32(7)
End If
Dim _upsize_ts As System.Nullable(Of System.DateTime) 
If reader.IsDBNull(8) Then 
	 _upsize_ts = New System.Nullable(Of System.DateTime)
Else
	 _upsize_ts = reader.GetDateTime(8)
End If
Dim _SalidasString As String
If reader.IsDBNull(9) Then 
	 _SalidasString = ""
Else
	 _SalidasString = reader.GetString(9)
End If

            Dim SalidasDet As IMappeableSalidasDetObject  = CType(entity, IMappeableSalidasDetObject)
            SalidasDet.HydrateFields(reader.GetInt32(0), _
_IdSalidasP, _
_IdSalidasDet, _
_IdSalidas, _
_IdProducto, _
_Cantidad, _
_PUnit, _
_IdTienda, _
_upsize_ts, _
_SalidasString)
        End Sub


        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function

        

        

        ' Complete the aggregations for this entity.         
        Protected Overrides Sub CompleteEntity(ByVal entity As t)
            Dim SalidasEntity As Objects.SalidasObject = Nothing 'Lazy load
            CType(entity, IMappeableSalidasDet).CompleteEntity(SalidasEntity)
        End Sub

        


        ''' <summary>
        ''' Get a SalidasDet by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As t
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a SalidasDetList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As ObjectList(Of T)
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' GetOne By Params
        ''' </summary>
        Public Overloads Function GetOne(IdSalidasDetP As System.Int32) As t
            Return MyBase.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "SalidasDet_GetOne", IdSalidasDetP)
        End Function
        


        ' GetOne By Objects and Params
            

        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetBySalidas(IdSalidasP As System.Int32) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "SalidasDet_GetBySalidas", IdSalidasP)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetBySalidas(ByVal Salidas As IUniqueIdentifiable) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "SalidasDet_GetBySalidas", Salidas.Identifier())
        End Function

    


        'Database Queries 
        


        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace




