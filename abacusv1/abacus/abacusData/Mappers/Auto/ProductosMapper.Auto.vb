
'------------------------------------------------------------------------------
' This file was generated by Cooperator Modeler, version 1.3.3.0
' Created: 15/08/2013 - 05:51 p.m.
' This is a partial class file. The other one is ProductosMapper.cs
' You should not modifiy this file, please edit the other partial class file.
'------------------------------------------------------------------------------

Imports System
Imports abacusRules.Entities
Imports abacusRules.Objects
Imports Cooperator.Framework.Data
Imports Cooperator.Framework.Data.Exceptions
Imports Cooperator.Framework.Core
Imports System.Data.Common
Imports System.Reflection
Imports System.Web


Namespace Mappers
    

    Public Partial Class ProductosMapper
        Inherits BaseGateway(Of Productos, ProductosList)
        Implements IGenericGateway

#Region "Singleton"

        Private Shared _instance As ProductosMapper

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As ProductosMapper
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New ProductosMapper()
                Else
                    Dim inst As ProductosMapper = TryCast(HttpContext.Current.Items("abacusRules.ProductosMapperSingleton"), ProductosMapper)
                    If inst Is Nothing Then
                        inst = New ProductosMapper()
                        HttpContext.Current.Items.Add("abacusRules.ProductosMapperSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function


#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim  s() as String={"IdProducto"}
            return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return GetType(Productos)
        End Function


        ''' <summary>
        ''' Return the mapped table name
        ''' </summary>
        Protected Overrides ReadOnly Property TableName() As String 
            Get
                Return "Productos"
            End Get
        End Property

        ''' <summary>
        ''' Return the ProductosGateway type FullName
        ''' </summary>
        Protected Overrides ReadOnly Property RuleName() As String
            Get
                Return GetType(ProductosMapper).FullName
            End Get
        End Property


        

        

        ''' <summary>
        ''' Assign properties values based on DataReader
        ''' </summary>
        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As Productos)
            Dim _IdProveedor As System.Nullable(Of System.Int32) 
If reader.IsDBNull(1) Then 
	 _IdProveedor = New System.Nullable(Of System.Int32)
Else
	 _IdProveedor = reader.GetInt32(1)
End If
Dim _Id_TipoProducto As System.Nullable(Of System.Int32) 
If reader.IsDBNull(2) Then 
	 _Id_TipoProducto = New System.Nullable(Of System.Int32)
Else
	 _Id_TipoProducto = reader.GetInt32(2)
End If
Dim _CodProducto As String
If reader.IsDBNull(3) Then 
	 _CodProducto = ""
Else
	 _CodProducto = reader.GetString(3)
End If
Dim _Producto As String
If reader.IsDBNull(4) Then 
	 _Producto = ""
Else
	 _Producto = reader.GetString(4)
End If
Dim _TipoProducto As System.Nullable(Of System.Int32) 
If reader.IsDBNull(5) Then 
	 _TipoProducto = New System.Nullable(Of System.Int32)
Else
	 _TipoProducto = reader.GetInt32(5)
End If
Dim _Capacidad As String
If reader.IsDBNull(6) Then 
	 _Capacidad = ""
Else
	 _Capacidad = reader.GetString(6)
End If
Dim _UMedida As String
If reader.IsDBNull(7) Then 
	 _UMedida = ""
Else
	 _UMedida = reader.GetString(7)
End If
Dim _NumParte As String
If reader.IsDBNull(8) Then 
	 _NumParte = ""
Else
	 _NumParte = reader.GetString(8)
End If
Dim _Familia As System.Nullable(Of System.Int32) 
If reader.IsDBNull(9) Then 
	 _Familia = New System.Nullable(Of System.Int32)
Else
	 _Familia = reader.GetInt32(9)
End If
Dim _Categoria As System.Nullable(Of System.Int32) 
If reader.IsDBNull(10) Then 
	 _Categoria = New System.Nullable(Of System.Int32)
Else
	 _Categoria = reader.GetInt32(10)
End If
Dim _Observaciones As String
If reader.IsDBNull(11) Then 
	 _Observaciones = ""
Else
	 _Observaciones = reader.GetString(11)
End If
Dim _IdProveedores As String
If reader.IsDBNull(12) Then 
	 _IdProveedores = ""
Else
	 _IdProveedores = reader.GetString(12)
End If
Dim _ImagenProd As String
If reader.IsDBNull(13) Then 
	 _ImagenProd = ""
Else
	 _ImagenProd = reader.GetString(13)
End If
Dim _PrecioCosto As System.Nullable(Of System.Decimal) 
If reader.IsDBNull(14) Then 
	 _PrecioCosto = New System.Nullable(Of System.Decimal)
Else
	 _PrecioCosto = reader.GetDecimal(14)
End If
Dim _MonedaC As System.Nullable(Of System.Int32) 
If reader.IsDBNull(15) Then 
	 _MonedaC = New System.Nullable(Of System.Int32)
Else
	 _MonedaC = reader.GetInt32(15)
End If
Dim _PrecioVenta As System.Nullable(Of System.Int32) 
If reader.IsDBNull(16) Then 
	 _PrecioVenta = New System.Nullable(Of System.Int32)
Else
	 _PrecioVenta = reader.GetInt32(16)
End If
Dim _MonedaV As System.Nullable(Of System.Int32) 
If reader.IsDBNull(17) Then 
	 _MonedaV = New System.Nullable(Of System.Int32)
Else
	 _MonedaV = reader.GetInt32(17)
End If
Dim _upsize_ts As System.Nullable(Of System.DateTime) 
If reader.IsDBNull(18) Then 
	 _upsize_ts = New System.Nullable(Of System.DateTime)
Else
	 _upsize_ts = reader.GetDateTime(18)
End If
Dim _ProveedoresString As String
If reader.IsDBNull(19) Then 
	 _ProveedoresString = ""
Else
	 _ProveedoresString = reader.GetString(19)
End If
Dim _TipoProductoString As String
If reader.IsDBNull(20) Then 
	 _TipoProductoString = ""
Else
	 _TipoProductoString = reader.GetString(20)
End If

            Dim Productos As IMappeableProductosObject  = CType(entity, IMappeableProductosObject)
            Productos.HydrateFields(reader.GetInt32(0), _
_IdProveedor, _
_Id_TipoProducto, _
_CodProducto, _
_Producto, _
_TipoProducto, _
_Capacidad, _
_UMedida, _
_NumParte, _
_Familia, _
_Categoria, _
_Observaciones, _
_IdProveedores, _
_ImagenProd, _
_PrecioCosto, _
_MonedaC, _
_PrecioVenta, _
_MonedaV, _
_upsize_ts, _
_ProveedoresString, _
_TipoProductoString)
        End Sub

        ''' <summary>
        ''' Get field values to call insertion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForInsert(ByVal entity As Productos) As Object()
            Dim Productos As IMappeableProductosObject = CType(entity, IMappeableProductosObject)
            Return Productos.GetFieldsForInsert()
        End Function

        ''' <summary>
        ''' Get field values to call update stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForUpdate(ByVal entity As Productos) As Object()
            Dim Productos As IMappeableProductosObject = CType(entity, IMappeableProductosObject)
            Return Productos.GetFieldsForUpdate()
        End Function

        ''' <summary>
        ''' Get field values to call deletion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForDelete(ByVal entity As Productos) As Object()
            Dim Productos As IMappeableProductosObject = CType(entity, IMappeableProductosObject)
            Return Productos.GetFieldsForDelete()
        End Function

        ''' <summary>
        ''' Raised after insert and update. Update properties from Output parameters
        ''' </summary>
        Protected Overrides Sub UpdateObjectFromOutputParams(ByVal entity As Productos, ByVal parameters As Object())
            ' Update properties from Output parameters
            CType(entity, IMappeableProductosObject).UpdateObjectFromOutputParams(parameters)
        End Sub

        ''' <summary>
        ''' StoredProceduresPrefix, for example: coop_
        ''' </summary>
        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function


        


        

        ''' <summary>
        ''' Complete the aggregations for this entity. 
        ''' </summary>
        Protected Overrides Sub CompleteEntity(ByVal entity As Productos)
            Dim ProveedoresEntity As Objects.ProveedoresObject = Nothing 'Lazy load
Dim TipoProductoEntity As Objects.TipoProductoObject = Nothing 'Lazy load
            CType(entity, IMappeableProductos).CompleteEntity(ProveedoresEntity, TipoProductoEntity)
        End Sub


        # Region "CRUD Operations"
        

        # End Region
        
        ''' <summary>
        ''' Delete children for this entity
        ''' </summary>
        Public Sub DeleteChildren(ByVal transaction As DbTransaction, ByVal entity As IUniqueIdentifiable)
                        
        End Sub


          



        ''' <summary>
        ''' Get a Productos by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As Productos
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a ProductosList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As ProductosList
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetOne(IdProducto As System.Int32) As Productos
            Return MyBase.GetOne(New Productos(IdProducto))
        End Function

        

        ' GetOne By Objects and Params
            

        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByProveedores(IdProveedor As System.Int32) As ProductosList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Productos_GetByProveedores", IdProveedor)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByProveedores(ByVal Proveedores As IUniqueIdentifiable) As ProductosList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Productos_GetByProveedores", Proveedores.Identifier())
        End Function

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByTipoProducto(Id_TipoProducto As System.Int32) As ProductosList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Productos_GetByTipoProducto", Id_TipoProducto)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByTipoProducto(ByVal TipoProducto As IUniqueIdentifiable) As ProductosList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Productos_GetByTipoProducto", TipoProducto.Identifier())
        End Function

    


        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByProveedores(ByVal transaction As DbTransaction,IdProveedor As System.Int32) As ProductosList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Productos_GetByProveedores", IdProveedor)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByProveedores(ByVal transaction As DbTransaction, ByVal Proveedores As IUniqueIdentifiable) As ProductosList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Productos_GetByProveedores", Proveedores.Identifier())
        End Function

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByTipoProducto(ByVal transaction As DbTransaction,Id_TipoProducto As System.Int32) As ProductosList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Productos_GetByTipoProducto", Id_TipoProducto)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByTipoProducto(ByVal transaction As DbTransaction, ByVal TipoProducto As IUniqueIdentifiable) As ProductosList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Productos_GetByTipoProducto", TipoProducto.Identifier())
        End Function

    

        





        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(IdProducto As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Productos_Delete", IdProducto)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(ByVal transaction As DbTransaction ,IdProducto As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Productos_Delete", IdProducto)
        End Sub

        ' Delete By Objects and Params
            



        

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByProveedores(IdProveedor As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Productos_DeleteByProveedores", IdProveedor)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByProveedores(ByVal transaction As DbTransaction , IdProveedor As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Productos_DeleteByProveedores", IdProveedor)
        End Sub


        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByProveedores(ByVal Proveedores As IUniqueIdentifiable)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Productos_DeleteByProveedores", Proveedores.Identifier())
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByProveedores(ByVal transaction As DbTransaction, ByVal Proveedores As IUniqueIdentifiable)        
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Productos_DeleteByProveedores", Proveedores.Identifier())
        End Sub

        

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByTipoProducto(Id_TipoProducto As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Productos_DeleteByTipoProducto", Id_TipoProducto)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByTipoProducto(ByVal transaction As DbTransaction , Id_TipoProducto As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Productos_DeleteByTipoProducto", Id_TipoProducto)
        End Sub


        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByTipoProducto(ByVal TipoProducto As IUniqueIdentifiable)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Productos_DeleteByTipoProducto", TipoProducto.Identifier())
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByTipoProducto(ByVal transaction As DbTransaction, ByVal TipoProducto As IUniqueIdentifiable)        
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Productos_DeleteByTipoProducto", TipoProducto.Identifier())
        End Sub

        

    


        'Database Queries 
        






        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace


Namespace Wrappers
    ''' <summary>
    ''' 
    ''' </summary>
    Public Class ProductosMapperWrapper

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            return Instance().GetPKPropertiesNames()
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return Instance().GetMappingType()
        End Function


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function Instance() As abacusRules.Mappers.ProductosMapper
            Return abacusRules.Mappers.ProductosMapper.Instance()
        End Function

        
        ''' <summary>
        ''' Get a Productos Entity by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetOne(ByVal IdProducto As System.Int32) As Entities.Productos         
            Return Instance().GetOne( IdProducto)
        End Function
        

        ' GetBy Objects and Params
            

        

        ''' <summary>
        ''' Get a ProductosList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByProveedores( ByVal IdProveedor As System.Int32) As Entities.ProductosList 
            Return Instance().GetByProveedores(IdProveedor)
        End Function

        ''' <summary>
        ''' Get a ProductosList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByProveedores(ByVal  Proveedores As IUniqueIdentifiable) As Entities.ProductosList
            Return Instance().GetByProveedores(Proveedores)
        End Function

    

        ''' <summary>
        ''' Get a ProductosList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByTipoProducto( ByVal Id_TipoProducto As System.Int32) As Entities.ProductosList 
            Return Instance().GetByTipoProducto(Id_TipoProducto)
        End Function

        ''' <summary>
        ''' Get a ProductosList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByTipoProducto(ByVal  TipoProducto As IUniqueIdentifiable) As Entities.ProductosList
            Return Instance().GetByTipoProducto(TipoProducto)
        End Function

    

        ''' <summary>
        ''' GetAll Productos 
        ''' </summary>
        Public Function GetAll() As Entities.ProductosList
            Return Instance().GetAll()
        End Function

        
        

        ''' <summary>
        ''' Delete children for Productos
        ''' </summary>
        Public Sub DeleteChildren(ByVal transaction As DbTransaction, ByVal entity As Productos)
            Instance().DeleteChildren(transaction, entity)
        End Sub

        


            

        

        ''' <summary>
        ''' Delete Productos by Proveedores
        ''' </summary>
        Public Sub DeleteByProveedores( ByVal IdProveedor As System.Int32)
            Instance().DeleteByProveedores(IdProveedor)
        End Sub

        ''' <summary>
        ''' Delete Productos by Proveedores
        ''' </summary>
        Public Sub DeleteByProveedores(ByVal Proveedores As IUniqueIdentifiable )
            Instance().DeleteByProveedores(Proveedores)
        End Sub

    

        ''' <summary>
        ''' Delete Productos by TipoProducto
        ''' </summary>
        Public Sub DeleteByTipoProducto( ByVal Id_TipoProducto As System.Int32)
            Instance().DeleteByTipoProducto(Id_TipoProducto)
        End Sub

        ''' <summary>
        ''' Delete Productos by TipoProducto
        ''' </summary>
        Public Sub DeleteByTipoProducto(ByVal TipoProducto As IUniqueIdentifiable )
            Instance().DeleteByTipoProducto(TipoProducto)
        End Sub

    

        ''' <summary>
        ''' Delete Productos 
        ''' </summary>
        Public Overloads Sub Delete(ByVal IdProducto As System.Int32)
            Instance().Delete(IdProducto)
        End Sub

        ''' <summary>
        ''' Delete Productos 
        ''' </summary>
        Public Overloads Sub Delete(ByVal entity As Entities.Productos)
            Instance().Delete(entity)
        End Sub

        ''' <summary>
        ''' Save Productos  
        ''' </summary>
        Public Overloads Sub Save(ByVal entity As Entities.Productos)
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert Productos 
        ''' </summary>
        Public Overloads Sub Insert(ByVal entity As Entities.Productos)
            Instance().Insert(entity)
        End Sub

        ''' <summary>
        ''' Save Productos 
        ''' </summary>
        Public Overloads Sub Save(ByVal IdProducto As System.Int32, ByVal IdProveedor As System.Int32, ByVal Id_TipoProducto As System.Int32, ByVal CodProducto As System.String, ByVal Producto As System.String, ByVal TipoProducto As System.Int32, ByVal Capacidad As System.String, ByVal UMedida As System.String, ByVal NumParte As System.String, ByVal Familia As System.Int32, ByVal Categoria As System.Int32, ByVal Observaciones As System.String, ByVal IdProveedores As System.String, ByVal ImagenProd As System.String, ByVal PrecioCosto As System.Decimal, ByVal MonedaC As System.Int32, ByVal PrecioVenta As System.Int32, ByVal MonedaV As System.Int32, ByVal upsize_ts As System.DateTime, ByVal ProveedoresString As System.String, ByVal TipoProductoString As System.String)
            Dim entity As Entities.Productos = Instance().GetOne(IdProducto)
            If entity Is Nothing Then
                Throw New ApplicationException(String.Format("Entity not found. IUniqueIdentifiable values: {0} = {1}", "IdProducto", IdProducto))
            End If

            entity.IdProveedor = IdProveedor
            entity.Id_TipoProducto = Id_TipoProducto
            entity.CodProducto = CodProducto
            entity.Producto = Producto
            entity.TipoProducto = TipoProducto
            entity.Capacidad = Capacidad
            entity.UMedida = UMedida
            entity.NumParte = NumParte
            entity.Familia = Familia
            entity.Categoria = Categoria
            entity.Observaciones = Observaciones
            entity.IdProveedores = IdProveedores
            entity.ImagenProd = ImagenProd
            entity.PrecioCosto = PrecioCosto
            entity.MonedaC = MonedaC
            entity.PrecioVenta = PrecioVenta
            entity.MonedaV = MonedaV
            entity.upsize_ts = upsize_ts
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert Productos
        ''' </summary>
        Public Overloads Sub Insert(ByVal IdProveedor As System.Int32, ByVal Id_TipoProducto As System.Int32, ByVal CodProducto As System.String, ByVal Producto As System.String, ByVal TipoProducto As System.Int32, ByVal Capacidad As System.String, ByVal UMedida As System.String, ByVal NumParte As System.String, ByVal Familia As System.Int32, ByVal Categoria As System.Int32, ByVal Observaciones As System.String, ByVal IdProveedores As System.String, ByVal ImagenProd As System.String, ByVal PrecioCosto As System.Decimal, ByVal MonedaC As System.Int32, ByVal PrecioVenta As System.Int32, ByVal MonedaV As System.Int32, ByVal upsize_ts As System.DateTime)
            Dim entity As Entities.Productos = New Entities.Productos

            entity.IdProveedor = IdProveedor
            entity.Id_TipoProducto = Id_TipoProducto
            entity.CodProducto = CodProducto
            entity.Producto = Producto
            entity.TipoProducto = TipoProducto
            entity.Capacidad = Capacidad
            entity.UMedida = UMedida
            entity.NumParte = NumParte
            entity.Familia = Familia
            entity.Categoria = Categoria
            entity.Observaciones = Observaciones
            entity.IdProveedores = IdProveedores
            entity.ImagenProd = ImagenProd
            entity.PrecioCosto = PrecioCosto
            entity.MonedaC = MonedaC
            entity.PrecioVenta = PrecioVenta
            entity.MonedaV = MonedaV
            entity.upsize_ts = upsize_ts
            Instance().Insert(entity)
        End Sub

        

        'Database Queries 
        


    End Class
End Namespace


Namespace Loaders

    ''' <summary>
    ''' 
    ''' </summary>
    Partial Public Class ProductosLoader(Of T As {Productos, New})
        Inherits BaseLoader(Of T, Productos, ObjectList(Of T))
        Implements IGenericGateway



#Region "Singleton"

        Private Shared _instance As ProductosLoader(Of T)

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As ProductosLoader(Of T)
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New ProductosLoader(Of T)
                Else
                    Dim inst As ProductosLoader(Of T) = TryCast(HttpContext.Current.Items("abacusRules.ProductosLoaderSingleton"), ProductosLoader(Of T))
                    If inst Is Nothing Then
                        inst = New ProductosLoader(Of T)
                        HttpContext.Current.Items.Add("abacusRules.ProductosLoaderSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function

#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim s() as String={"IdProducto"}
            Return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            Return GetType(Productos)
        End Function


        Protected Overrides ReadOnly Property TableName As String 
            Get
                Return "Productos"
            End Get
        End Property

        

        


        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As Productos)
            Dim _IdProveedor As System.Nullable(Of System.Int32) 
If reader.IsDBNull(1) Then 
	 _IdProveedor = New System.Nullable(Of System.Int32)
Else
	 _IdProveedor = reader.GetInt32(1)
End If
Dim _Id_TipoProducto As System.Nullable(Of System.Int32) 
If reader.IsDBNull(2) Then 
	 _Id_TipoProducto = New System.Nullable(Of System.Int32)
Else
	 _Id_TipoProducto = reader.GetInt32(2)
End If
Dim _CodProducto As String
If reader.IsDBNull(3) Then 
	 _CodProducto = ""
Else
	 _CodProducto = reader.GetString(3)
End If
Dim _Producto As String
If reader.IsDBNull(4) Then 
	 _Producto = ""
Else
	 _Producto = reader.GetString(4)
End If
Dim _TipoProducto As System.Nullable(Of System.Int32) 
If reader.IsDBNull(5) Then 
	 _TipoProducto = New System.Nullable(Of System.Int32)
Else
	 _TipoProducto = reader.GetInt32(5)
End If
Dim _Capacidad As String
If reader.IsDBNull(6) Then 
	 _Capacidad = ""
Else
	 _Capacidad = reader.GetString(6)
End If
Dim _UMedida As String
If reader.IsDBNull(7) Then 
	 _UMedida = ""
Else
	 _UMedida = reader.GetString(7)
End If
Dim _NumParte As String
If reader.IsDBNull(8) Then 
	 _NumParte = ""
Else
	 _NumParte = reader.GetString(8)
End If
Dim _Familia As System.Nullable(Of System.Int32) 
If reader.IsDBNull(9) Then 
	 _Familia = New System.Nullable(Of System.Int32)
Else
	 _Familia = reader.GetInt32(9)
End If
Dim _Categoria As System.Nullable(Of System.Int32) 
If reader.IsDBNull(10) Then 
	 _Categoria = New System.Nullable(Of System.Int32)
Else
	 _Categoria = reader.GetInt32(10)
End If
Dim _Observaciones As String
If reader.IsDBNull(11) Then 
	 _Observaciones = ""
Else
	 _Observaciones = reader.GetString(11)
End If
Dim _IdProveedores As String
If reader.IsDBNull(12) Then 
	 _IdProveedores = ""
Else
	 _IdProveedores = reader.GetString(12)
End If
Dim _ImagenProd As String
If reader.IsDBNull(13) Then 
	 _ImagenProd = ""
Else
	 _ImagenProd = reader.GetString(13)
End If
Dim _PrecioCosto As System.Nullable(Of System.Decimal) 
If reader.IsDBNull(14) Then 
	 _PrecioCosto = New System.Nullable(Of System.Decimal)
Else
	 _PrecioCosto = reader.GetDecimal(14)
End If
Dim _MonedaC As System.Nullable(Of System.Int32) 
If reader.IsDBNull(15) Then 
	 _MonedaC = New System.Nullable(Of System.Int32)
Else
	 _MonedaC = reader.GetInt32(15)
End If
Dim _PrecioVenta As System.Nullable(Of System.Int32) 
If reader.IsDBNull(16) Then 
	 _PrecioVenta = New System.Nullable(Of System.Int32)
Else
	 _PrecioVenta = reader.GetInt32(16)
End If
Dim _MonedaV As System.Nullable(Of System.Int32) 
If reader.IsDBNull(17) Then 
	 _MonedaV = New System.Nullable(Of System.Int32)
Else
	 _MonedaV = reader.GetInt32(17)
End If
Dim _upsize_ts As System.Nullable(Of System.DateTime) 
If reader.IsDBNull(18) Then 
	 _upsize_ts = New System.Nullable(Of System.DateTime)
Else
	 _upsize_ts = reader.GetDateTime(18)
End If
Dim _ProveedoresString As String
If reader.IsDBNull(19) Then 
	 _ProveedoresString = ""
Else
	 _ProveedoresString = reader.GetString(19)
End If
Dim _TipoProductoString As String
If reader.IsDBNull(20) Then 
	 _TipoProductoString = ""
Else
	 _TipoProductoString = reader.GetString(20)
End If

            Dim Productos As IMappeableProductosObject  = CType(entity, IMappeableProductosObject)
            Productos.HydrateFields(reader.GetInt32(0), _
_IdProveedor, _
_Id_TipoProducto, _
_CodProducto, _
_Producto, _
_TipoProducto, _
_Capacidad, _
_UMedida, _
_NumParte, _
_Familia, _
_Categoria, _
_Observaciones, _
_IdProveedores, _
_ImagenProd, _
_PrecioCosto, _
_MonedaC, _
_PrecioVenta, _
_MonedaV, _
_upsize_ts, _
_ProveedoresString, _
_TipoProductoString)
        End Sub


        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function

        

        

        ' Complete the aggregations for this entity.         
        Protected Overrides Sub CompleteEntity(ByVal entity As t)
            Dim ProveedoresEntity As Objects.ProveedoresObject = Nothing 'Lazy load
Dim TipoProductoEntity As Objects.TipoProductoObject = Nothing 'Lazy load
            CType(entity, IMappeableProductos).CompleteEntity(ProveedoresEntity, TipoProductoEntity)
        End Sub

        


        ''' <summary>
        ''' Get a Productos by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As t
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a ProductosList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As ObjectList(Of T)
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' GetOne By Params
        ''' </summary>
        Public Overloads Function GetOne(IdProducto As System.Int32) As t
            Return MyBase.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "Productos_GetOne", IdProducto)
        End Function
        


        ' GetOne By Objects and Params
            

        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByProveedores(IdProveedor As System.Int32) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Productos_GetByProveedores", IdProveedor)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByProveedores(ByVal Proveedores As IUniqueIdentifiable) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Productos_GetByProveedores", Proveedores.Identifier())
        End Function

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByTipoProducto(Id_TipoProducto As System.Int32) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Productos_GetByTipoProducto", Id_TipoProducto)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByTipoProducto(ByVal TipoProducto As IUniqueIdentifiable) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Productos_GetByTipoProducto", TipoProducto.Identifier())
        End Function

    


        'Database Queries 
        


        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace




