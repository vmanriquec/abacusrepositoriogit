
'------------------------------------------------------------------------------
' This file was generated by Cooperator Modeler, version 1.3.3.0
' Created: 15/08/2013 - 05:51 p.m.
' This is a partial class file. The other one is CategoriasMapper.cs
' You should not modifiy this file, please edit the other partial class file.
'------------------------------------------------------------------------------

Imports System
Imports abacusRules.Entities
Imports abacusRules.Objects
Imports Cooperator.Framework.Data
Imports Cooperator.Framework.Data.Exceptions
Imports Cooperator.Framework.Core
Imports System.Data.Common
Imports System.Reflection
Imports System.Web


Namespace Mappers
    

    Public Partial Class CategoriasMapper
        Inherits BaseGateway(Of Categorias, CategoriasList)
        Implements IGenericGateway

#Region "Singleton"

        Private Shared _instance As CategoriasMapper

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As CategoriasMapper
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New CategoriasMapper()
                Else
                    Dim inst As CategoriasMapper = TryCast(HttpContext.Current.Items("abacusRules.CategoriasMapperSingleton"), CategoriasMapper)
                    If inst Is Nothing Then
                        inst = New CategoriasMapper()
                        HttpContext.Current.Items.Add("abacusRules.CategoriasMapperSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function


#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim  s() as String={"Id_Categoria"}
            return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return GetType(Categorias)
        End Function


        ''' <summary>
        ''' Return the mapped table name
        ''' </summary>
        Protected Overrides ReadOnly Property TableName() As String 
            Get
                Return "Categorias"
            End Get
        End Property

        ''' <summary>
        ''' Return the CategoriasGateway type FullName
        ''' </summary>
        Protected Overrides ReadOnly Property RuleName() As String
            Get
                Return GetType(CategoriasMapper).FullName
            End Get
        End Property


        

        

        ''' <summary>
        ''' Assign properties values based on DataReader
        ''' </summary>
        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As Categorias)
            Dim _Categoria As String
If reader.IsDBNull(1) Then 
	 _Categoria = ""
Else
	 _Categoria = reader.GetString(1)
End If
Dim _IdFamilia As System.Nullable(Of System.Int32) 
If reader.IsDBNull(2) Then 
	 _IdFamilia = New System.Nullable(Of System.Int32)
Else
	 _IdFamilia = reader.GetInt32(2)
End If
Dim _FamiliasString As String
If reader.IsDBNull(3) Then 
	 _FamiliasString = ""
Else
	 _FamiliasString = reader.GetString(3)
End If

            Dim Categorias As IMappeableCategoriasObject  = CType(entity, IMappeableCategoriasObject)
            Categorias.HydrateFields(reader.GetInt32(0), _
_Categoria, _
_IdFamilia, _
_FamiliasString)
        End Sub

        ''' <summary>
        ''' Get field values to call insertion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForInsert(ByVal entity As Categorias) As Object()
            Dim Categorias As IMappeableCategoriasObject = CType(entity, IMappeableCategoriasObject)
            Return Categorias.GetFieldsForInsert()
        End Function

        ''' <summary>
        ''' Get field values to call update stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForUpdate(ByVal entity As Categorias) As Object()
            Dim Categorias As IMappeableCategoriasObject = CType(entity, IMappeableCategoriasObject)
            Return Categorias.GetFieldsForUpdate()
        End Function

        ''' <summary>
        ''' Get field values to call deletion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForDelete(ByVal entity As Categorias) As Object()
            Dim Categorias As IMappeableCategoriasObject = CType(entity, IMappeableCategoriasObject)
            Return Categorias.GetFieldsForDelete()
        End Function

        ''' <summary>
        ''' Raised after insert and update. Update properties from Output parameters
        ''' </summary>
        Protected Overrides Sub UpdateObjectFromOutputParams(ByVal entity As Categorias, ByVal parameters As Object())
            ' Update properties from Output parameters
            CType(entity, IMappeableCategoriasObject).UpdateObjectFromOutputParams(parameters)
        End Sub

        ''' <summary>
        ''' StoredProceduresPrefix, for example: coop_
        ''' </summary>
        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function


        


        

        ''' <summary>
        ''' Complete the aggregations for this entity. 
        ''' </summary>
        Protected Overrides Sub CompleteEntity(ByVal entity As Categorias)
            Dim FamiliasEntity As Objects.FamiliasObject = Nothing 'Lazy load
            CType(entity, IMappeableCategorias).CompleteEntity(FamiliasEntity)
        End Sub


        # Region "CRUD Operations"
        

        # End Region
        
        ''' <summary>
        ''' Delete children for this entity
        ''' </summary>
        Public Sub DeleteChildren(ByVal transaction As DbTransaction, ByVal entity As IUniqueIdentifiable)
                        
        End Sub


          



        ''' <summary>
        ''' Get a Categorias by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As Categorias
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a CategoriasList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As CategoriasList
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetOne(Id_Categoria As System.Int32) As Categorias
            Return MyBase.GetOne(New Categorias(Id_Categoria))
        End Function

        

        ' GetOne By Objects and Params
            

        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByFamilias(IdFamilia As System.Int32) As CategoriasList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Categorias_GetByFamilias", IdFamilia)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByFamilias(ByVal Familias As IUniqueIdentifiable) As CategoriasList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Categorias_GetByFamilias", Familias.Identifier())
        End Function

    


        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByFamilias(ByVal transaction As DbTransaction,IdFamilia As System.Int32) As CategoriasList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Categorias_GetByFamilias", IdFamilia)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByFamilias(ByVal transaction As DbTransaction, ByVal Familias As IUniqueIdentifiable) As CategoriasList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Categorias_GetByFamilias", Familias.Identifier())
        End Function

    

        





        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(Id_Categoria As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Categorias_Delete", Id_Categoria)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(ByVal transaction As DbTransaction ,Id_Categoria As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Categorias_Delete", Id_Categoria)
        End Sub

        ' Delete By Objects and Params
            



        

    

    

    

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByFamilias(IdFamilia As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Categorias_DeleteByFamilias", IdFamilia)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByFamilias(ByVal transaction As DbTransaction , IdFamilia As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Categorias_DeleteByFamilias", IdFamilia)
        End Sub


        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByFamilias(ByVal Familias As IUniqueIdentifiable)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Categorias_DeleteByFamilias", Familias.Identifier())
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByFamilias(ByVal transaction As DbTransaction, ByVal Familias As IUniqueIdentifiable)        
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Categorias_DeleteByFamilias", Familias.Identifier())
        End Sub

        

    


        'Database Queries 
        






        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace


Namespace Wrappers
    ''' <summary>
    ''' 
    ''' </summary>
    Public Class CategoriasMapperWrapper

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            return Instance().GetPKPropertiesNames()
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return Instance().GetMappingType()
        End Function


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function Instance() As abacusRules.Mappers.CategoriasMapper
            Return abacusRules.Mappers.CategoriasMapper.Instance()
        End Function

        
        ''' <summary>
        ''' Get a Categorias Entity by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetOne(ByVal Id_Categoria As System.Int32) As Entities.Categorias         
            Return Instance().GetOne( Id_Categoria)
        End Function
        

        ' GetBy Objects and Params
            

        

        ''' <summary>
        ''' Get a CategoriasList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByFamilias( ByVal IdFamilia As System.Int32) As Entities.CategoriasList 
            Return Instance().GetByFamilias(IdFamilia)
        End Function

        ''' <summary>
        ''' Get a CategoriasList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByFamilias(ByVal  Familias As IUniqueIdentifiable) As Entities.CategoriasList
            Return Instance().GetByFamilias(Familias)
        End Function

    

        ''' <summary>
        ''' GetAll Categorias 
        ''' </summary>
        Public Function GetAll() As Entities.CategoriasList
            Return Instance().GetAll()
        End Function

        
        

        ''' <summary>
        ''' Delete children for Categorias
        ''' </summary>
        Public Sub DeleteChildren(ByVal transaction As DbTransaction, ByVal entity As Categorias)
            Instance().DeleteChildren(transaction, entity)
        End Sub

        


            

        

        ''' <summary>
        ''' Delete Categorias by Familias
        ''' </summary>
        Public Sub DeleteByFamilias( ByVal IdFamilia As System.Int32)
            Instance().DeleteByFamilias(IdFamilia)
        End Sub

        ''' <summary>
        ''' Delete Categorias by Familias
        ''' </summary>
        Public Sub DeleteByFamilias(ByVal Familias As IUniqueIdentifiable )
            Instance().DeleteByFamilias(Familias)
        End Sub

    

        ''' <summary>
        ''' Delete Categorias 
        ''' </summary>
        Public Overloads Sub Delete(ByVal Id_Categoria As System.Int32)
            Instance().Delete(Id_Categoria)
        End Sub

        ''' <summary>
        ''' Delete Categorias 
        ''' </summary>
        Public Overloads Sub Delete(ByVal entity As Entities.Categorias)
            Instance().Delete(entity)
        End Sub

        ''' <summary>
        ''' Save Categorias  
        ''' </summary>
        Public Overloads Sub Save(ByVal entity As Entities.Categorias)
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert Categorias 
        ''' </summary>
        Public Overloads Sub Insert(ByVal entity As Entities.Categorias)
            Instance().Insert(entity)
        End Sub

        ''' <summary>
        ''' Save Categorias 
        ''' </summary>
        Public Overloads Sub Save(ByVal Id_Categoria As System.Int32, ByVal Categoria As System.String, ByVal IdFamilia As System.Int32, ByVal FamiliasString As System.String)
            Dim entity As Entities.Categorias = Instance().GetOne(Id_Categoria)
            If entity Is Nothing Then
                Throw New ApplicationException(String.Format("Entity not found. IUniqueIdentifiable values: {0} = {1}", "Id_Categoria", Id_Categoria))
            End If

            entity.Categoria = Categoria
            entity.IdFamilia = IdFamilia
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert Categorias
        ''' </summary>
        Public Overloads Sub Insert(ByVal Categoria As System.String, ByVal IdFamilia As System.Int32)
            Dim entity As Entities.Categorias = New Entities.Categorias

            entity.Categoria = Categoria
            entity.IdFamilia = IdFamilia
            Instance().Insert(entity)
        End Sub

        

        'Database Queries 
        


    End Class
End Namespace


Namespace Loaders

    ''' <summary>
    ''' 
    ''' </summary>
    Partial Public Class CategoriasLoader(Of T As {Categorias, New})
        Inherits BaseLoader(Of T, Categorias, ObjectList(Of T))
        Implements IGenericGateway



#Region "Singleton"

        Private Shared _instance As CategoriasLoader(Of T)

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As CategoriasLoader(Of T)
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New CategoriasLoader(Of T)
                Else
                    Dim inst As CategoriasLoader(Of T) = TryCast(HttpContext.Current.Items("abacusRules.CategoriasLoaderSingleton"), CategoriasLoader(Of T))
                    If inst Is Nothing Then
                        inst = New CategoriasLoader(Of T)
                        HttpContext.Current.Items.Add("abacusRules.CategoriasLoaderSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function

#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim s() as String={"Id_Categoria"}
            Return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            Return GetType(Categorias)
        End Function


        Protected Overrides ReadOnly Property TableName As String 
            Get
                Return "Categorias"
            End Get
        End Property

        

        


        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As Categorias)
            Dim _Categoria As String
If reader.IsDBNull(1) Then 
	 _Categoria = ""
Else
	 _Categoria = reader.GetString(1)
End If
Dim _IdFamilia As System.Nullable(Of System.Int32) 
If reader.IsDBNull(2) Then 
	 _IdFamilia = New System.Nullable(Of System.Int32)
Else
	 _IdFamilia = reader.GetInt32(2)
End If
Dim _FamiliasString As String
If reader.IsDBNull(3) Then 
	 _FamiliasString = ""
Else
	 _FamiliasString = reader.GetString(3)
End If

            Dim Categorias As IMappeableCategoriasObject  = CType(entity, IMappeableCategoriasObject)
            Categorias.HydrateFields(reader.GetInt32(0), _
_Categoria, _
_IdFamilia, _
_FamiliasString)
        End Sub


        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function

        

        

        ' Complete the aggregations for this entity.         
        Protected Overrides Sub CompleteEntity(ByVal entity As t)
            Dim FamiliasEntity As Objects.FamiliasObject = Nothing 'Lazy load
            CType(entity, IMappeableCategorias).CompleteEntity(FamiliasEntity)
        End Sub

        


        ''' <summary>
        ''' Get a Categorias by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As t
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a CategoriasList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As ObjectList(Of T)
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' GetOne By Params
        ''' </summary>
        Public Overloads Function GetOne(Id_Categoria As System.Int32) As t
            Return MyBase.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "Categorias_GetOne", Id_Categoria)
        End Function
        


        ' GetOne By Objects and Params
            

        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByFamilias(IdFamilia As System.Int32) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Categorias_GetByFamilias", IdFamilia)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByFamilias(ByVal Familias As IUniqueIdentifiable) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Categorias_GetByFamilias", Familias.Identifier())
        End Function

    


        'Database Queries 
        


        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace




