
'------------------------------------------------------------------------------
' This file was generated by Cooperator Modeler, version 1.3.3.0
' Created: 15/08/2013 - 05:51 p.m.
' This is a partial class file. The other one is ProvContactosMapper.cs
' You should not modifiy this file, please edit the other partial class file.
'------------------------------------------------------------------------------

Imports System
Imports abacusRules.Entities
Imports abacusRules.Objects
Imports Cooperator.Framework.Data
Imports Cooperator.Framework.Data.Exceptions
Imports Cooperator.Framework.Core
Imports System.Data.Common
Imports System.Reflection
Imports System.Web


Namespace Mappers
    

    Public Partial Class ProvContactosMapper
        Inherits BaseGateway(Of ProvContactos, ProvContactosList)
        Implements IGenericGateway

#Region "Singleton"

        Private Shared _instance As ProvContactosMapper

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As ProvContactosMapper
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New ProvContactosMapper()
                Else
                    Dim inst As ProvContactosMapper = TryCast(HttpContext.Current.Items("abacusRules.ProvContactosMapperSingleton"), ProvContactosMapper)
                    If inst Is Nothing Then
                        inst = New ProvContactosMapper()
                        HttpContext.Current.Items.Add("abacusRules.ProvContactosMapperSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function


#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim  s() as String={"IdProvContactos"}
            return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return GetType(ProvContactos)
        End Function


        ''' <summary>
        ''' Return the mapped table name
        ''' </summary>
        Protected Overrides ReadOnly Property TableName() As String 
            Get
                Return "ProvContactos"
            End Get
        End Property

        ''' <summary>
        ''' Return the ProvContactosGateway type FullName
        ''' </summary>
        Protected Overrides ReadOnly Property RuleName() As String
            Get
                Return GetType(ProvContactosMapper).FullName
            End Get
        End Property


        

        

        ''' <summary>
        ''' Assign properties values based on DataReader
        ''' </summary>
        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As ProvContactos)
            Dim _Contactop As String
If reader.IsDBNull(1) Then 
	 _Contactop = ""
Else
	 _Contactop = reader.GetString(1)
End If
Dim _Anexop As String
If reader.IsDBNull(2) Then 
	 _Anexop = ""
Else
	 _Anexop = reader.GetString(2)
End If
Dim _TipMovil1p As String
If reader.IsDBNull(3) Then 
	 _TipMovil1p = ""
Else
	 _TipMovil1p = reader.GetString(3)
End If
Dim _Movil1p As String
If reader.IsDBNull(4) Then 
	 _Movil1p = ""
Else
	 _Movil1p = reader.GetString(4)
End If
Dim _Email1p As String
If reader.IsDBNull(5) Then 
	 _Email1p = ""
Else
	 _Email1p = reader.GetString(5)
End If
Dim _Email2p As String
If reader.IsDBNull(6) Then 
	 _Email2p = ""
Else
	 _Email2p = reader.GetString(6)
End If
Dim _TipMovil2p As String
If reader.IsDBNull(7) Then 
	 _TipMovil2p = ""
Else
	 _TipMovil2p = reader.GetString(7)
End If
Dim _Movil2p As String
If reader.IsDBNull(8) Then 
	 _Movil2p = ""
Else
	 _Movil2p = reader.GetString(8)
End If
Dim _IdProveedor As System.Nullable(Of System.Int32) 
If reader.IsDBNull(9) Then 
	 _IdProveedor = New System.Nullable(Of System.Int32)
Else
	 _IdProveedor = reader.GetInt32(9)
End If
Dim _Trato As String
If reader.IsDBNull(10) Then 
	 _Trato = ""
Else
	 _Trato = reader.GetString(10)
End If
Dim _ProveedoresString As String
If reader.IsDBNull(11) Then 
	 _ProveedoresString = ""
Else
	 _ProveedoresString = reader.GetString(11)
End If

            Dim ProvContactos As IMappeableProvContactosObject  = CType(entity, IMappeableProvContactosObject)
            ProvContactos.HydrateFields(reader.GetInt32(0), _
_Contactop, _
_Anexop, _
_TipMovil1p, _
_Movil1p, _
_Email1p, _
_Email2p, _
_TipMovil2p, _
_Movil2p, _
_IdProveedor, _
_Trato, _
_ProveedoresString)
        End Sub

        ''' <summary>
        ''' Get field values to call insertion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForInsert(ByVal entity As ProvContactos) As Object()
            Dim ProvContactos As IMappeableProvContactosObject = CType(entity, IMappeableProvContactosObject)
            Return ProvContactos.GetFieldsForInsert()
        End Function

        ''' <summary>
        ''' Get field values to call update stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForUpdate(ByVal entity As ProvContactos) As Object()
            Dim ProvContactos As IMappeableProvContactosObject = CType(entity, IMappeableProvContactosObject)
            Return ProvContactos.GetFieldsForUpdate()
        End Function

        ''' <summary>
        ''' Get field values to call deletion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForDelete(ByVal entity As ProvContactos) As Object()
            Dim ProvContactos As IMappeableProvContactosObject = CType(entity, IMappeableProvContactosObject)
            Return ProvContactos.GetFieldsForDelete()
        End Function

        ''' <summary>
        ''' Raised after insert and update. Update properties from Output parameters
        ''' </summary>
        Protected Overrides Sub UpdateObjectFromOutputParams(ByVal entity As ProvContactos, ByVal parameters As Object())
            ' Update properties from Output parameters
            CType(entity, IMappeableProvContactosObject).UpdateObjectFromOutputParams(parameters)
        End Sub

        ''' <summary>
        ''' StoredProceduresPrefix, for example: coop_
        ''' </summary>
        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function


        


        

        ''' <summary>
        ''' Complete the aggregations for this entity. 
        ''' </summary>
        Protected Overrides Sub CompleteEntity(ByVal entity As ProvContactos)
            Dim ProveedoresEntity As Objects.ProveedoresObject = Nothing 'Lazy load
            CType(entity, IMappeableProvContactos).CompleteEntity(ProveedoresEntity)
        End Sub


        # Region "CRUD Operations"
        

        # End Region
        
        ''' <summary>
        ''' Delete children for this entity
        ''' </summary>
        Public Sub DeleteChildren(ByVal transaction As DbTransaction, ByVal entity As IUniqueIdentifiable)
                        
        End Sub


          



        ''' <summary>
        ''' Get a ProvContactos by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As ProvContactos
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a ProvContactosList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As ProvContactosList
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetOne(IdProvContactos As System.Int32) As ProvContactos
            Return MyBase.GetOne(New ProvContactos(IdProvContactos))
        End Function

        

        ' GetOne By Objects and Params
            

        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByProveedores(IdProveedor As System.Int32) As ProvContactosList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ProvContactos_GetByProveedores", IdProveedor)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByProveedores(ByVal Proveedores As IUniqueIdentifiable) As ProvContactosList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ProvContactos_GetByProveedores", Proveedores.Identifier())
        End Function

    


        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByProveedores(ByVal transaction As DbTransaction,IdProveedor As System.Int32) As ProvContactosList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ProvContactos_GetByProveedores", IdProveedor)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByProveedores(ByVal transaction As DbTransaction, ByVal Proveedores As IUniqueIdentifiable) As ProvContactosList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "ProvContactos_GetByProveedores", Proveedores.Identifier())
        End Function

    

        





        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(IdProvContactos As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ProvContactos_Delete", IdProvContactos)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(ByVal transaction As DbTransaction ,IdProvContactos As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ProvContactos_Delete", IdProvContactos)
        End Sub

        ' Delete By Objects and Params
            



        

    

    

    

    

    

    

    

    

    

    

    

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByProveedores(IdProveedor As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ProvContactos_DeleteByProveedores", IdProveedor)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByProveedores(ByVal transaction As DbTransaction , IdProveedor As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ProvContactos_DeleteByProveedores", IdProveedor)
        End Sub


        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByProveedores(ByVal Proveedores As IUniqueIdentifiable)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "ProvContactos_DeleteByProveedores", Proveedores.Identifier())
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByProveedores(ByVal transaction As DbTransaction, ByVal Proveedores As IUniqueIdentifiable)        
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "ProvContactos_DeleteByProveedores", Proveedores.Identifier())
        End Sub

        

    


        'Database Queries 
        






        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace


Namespace Wrappers
    ''' <summary>
    ''' 
    ''' </summary>
    Public Class ProvContactosMapperWrapper

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            return Instance().GetPKPropertiesNames()
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return Instance().GetMappingType()
        End Function


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function Instance() As abacusRules.Mappers.ProvContactosMapper
            Return abacusRules.Mappers.ProvContactosMapper.Instance()
        End Function

        
        ''' <summary>
        ''' Get a ProvContactos Entity by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetOne(ByVal IdProvContactos As System.Int32) As Entities.ProvContactos         
            Return Instance().GetOne( IdProvContactos)
        End Function
        

        ' GetBy Objects and Params
            

        

        ''' <summary>
        ''' Get a ProvContactosList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByProveedores( ByVal IdProveedor As System.Int32) As Entities.ProvContactosList 
            Return Instance().GetByProveedores(IdProveedor)
        End Function

        ''' <summary>
        ''' Get a ProvContactosList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByProveedores(ByVal  Proveedores As IUniqueIdentifiable) As Entities.ProvContactosList
            Return Instance().GetByProveedores(Proveedores)
        End Function

    

        ''' <summary>
        ''' GetAll ProvContactos 
        ''' </summary>
        Public Function GetAll() As Entities.ProvContactosList
            Return Instance().GetAll()
        End Function

        
        

        ''' <summary>
        ''' Delete children for ProvContactos
        ''' </summary>
        Public Sub DeleteChildren(ByVal transaction As DbTransaction, ByVal entity As ProvContactos)
            Instance().DeleteChildren(transaction, entity)
        End Sub

        


            

        

        ''' <summary>
        ''' Delete ProvContactos by Proveedores
        ''' </summary>
        Public Sub DeleteByProveedores( ByVal IdProveedor As System.Int32)
            Instance().DeleteByProveedores(IdProveedor)
        End Sub

        ''' <summary>
        ''' Delete ProvContactos by Proveedores
        ''' </summary>
        Public Sub DeleteByProveedores(ByVal Proveedores As IUniqueIdentifiable )
            Instance().DeleteByProveedores(Proveedores)
        End Sub

    

        ''' <summary>
        ''' Delete ProvContactos 
        ''' </summary>
        Public Overloads Sub Delete(ByVal IdProvContactos As System.Int32)
            Instance().Delete(IdProvContactos)
        End Sub

        ''' <summary>
        ''' Delete ProvContactos 
        ''' </summary>
        Public Overloads Sub Delete(ByVal entity As Entities.ProvContactos)
            Instance().Delete(entity)
        End Sub

        ''' <summary>
        ''' Save ProvContactos  
        ''' </summary>
        Public Overloads Sub Save(ByVal entity As Entities.ProvContactos)
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert ProvContactos 
        ''' </summary>
        Public Overloads Sub Insert(ByVal entity As Entities.ProvContactos)
            Instance().Insert(entity)
        End Sub

        ''' <summary>
        ''' Save ProvContactos 
        ''' </summary>
        Public Overloads Sub Save(ByVal IdProvContactos As System.Int32, ByVal Contactop As System.String, ByVal Anexop As System.String, ByVal TipMovil1p As System.String, ByVal Movil1p As System.String, ByVal Email1p As System.String, ByVal Email2p As System.String, ByVal TipMovil2p As System.String, ByVal Movil2p As System.String, ByVal IdProveedor As System.Int32, ByVal Trato As System.String, ByVal ProveedoresString As System.String)
            Dim entity As Entities.ProvContactos = Instance().GetOne(IdProvContactos)
            If entity Is Nothing Then
                Throw New ApplicationException(String.Format("Entity not found. IUniqueIdentifiable values: {0} = {1}", "IdProvContactos", IdProvContactos))
            End If

            entity.Contactop = Contactop
            entity.Anexop = Anexop
            entity.TipMovil1p = TipMovil1p
            entity.Movil1p = Movil1p
            entity.Email1p = Email1p
            entity.Email2p = Email2p
            entity.TipMovil2p = TipMovil2p
            entity.Movil2p = Movil2p
            entity.IdProveedor = IdProveedor
            entity.Trato = Trato
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert ProvContactos
        ''' </summary>
        Public Overloads Sub Insert(ByVal Contactop As System.String, ByVal Anexop As System.String, ByVal TipMovil1p As System.String, ByVal Movil1p As System.String, ByVal Email1p As System.String, ByVal Email2p As System.String, ByVal TipMovil2p As System.String, ByVal Movil2p As System.String, ByVal IdProveedor As System.Int32, ByVal Trato As System.String)
            Dim entity As Entities.ProvContactos = New Entities.ProvContactos

            entity.Contactop = Contactop
            entity.Anexop = Anexop
            entity.TipMovil1p = TipMovil1p
            entity.Movil1p = Movil1p
            entity.Email1p = Email1p
            entity.Email2p = Email2p
            entity.TipMovil2p = TipMovil2p
            entity.Movil2p = Movil2p
            entity.IdProveedor = IdProveedor
            entity.Trato = Trato
            Instance().Insert(entity)
        End Sub

        

        'Database Queries 
        


    End Class
End Namespace


Namespace Loaders

    ''' <summary>
    ''' 
    ''' </summary>
    Partial Public Class ProvContactosLoader(Of T As {ProvContactos, New})
        Inherits BaseLoader(Of T, ProvContactos, ObjectList(Of T))
        Implements IGenericGateway



#Region "Singleton"

        Private Shared _instance As ProvContactosLoader(Of T)

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As ProvContactosLoader(Of T)
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New ProvContactosLoader(Of T)
                Else
                    Dim inst As ProvContactosLoader(Of T) = TryCast(HttpContext.Current.Items("abacusRules.ProvContactosLoaderSingleton"), ProvContactosLoader(Of T))
                    If inst Is Nothing Then
                        inst = New ProvContactosLoader(Of T)
                        HttpContext.Current.Items.Add("abacusRules.ProvContactosLoaderSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function

#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim s() as String={"IdProvContactos"}
            Return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            Return GetType(ProvContactos)
        End Function


        Protected Overrides ReadOnly Property TableName As String 
            Get
                Return "ProvContactos"
            End Get
        End Property

        

        


        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As ProvContactos)
            Dim _Contactop As String
If reader.IsDBNull(1) Then 
	 _Contactop = ""
Else
	 _Contactop = reader.GetString(1)
End If
Dim _Anexop As String
If reader.IsDBNull(2) Then 
	 _Anexop = ""
Else
	 _Anexop = reader.GetString(2)
End If
Dim _TipMovil1p As String
If reader.IsDBNull(3) Then 
	 _TipMovil1p = ""
Else
	 _TipMovil1p = reader.GetString(3)
End If
Dim _Movil1p As String
If reader.IsDBNull(4) Then 
	 _Movil1p = ""
Else
	 _Movil1p = reader.GetString(4)
End If
Dim _Email1p As String
If reader.IsDBNull(5) Then 
	 _Email1p = ""
Else
	 _Email1p = reader.GetString(5)
End If
Dim _Email2p As String
If reader.IsDBNull(6) Then 
	 _Email2p = ""
Else
	 _Email2p = reader.GetString(6)
End If
Dim _TipMovil2p As String
If reader.IsDBNull(7) Then 
	 _TipMovil2p = ""
Else
	 _TipMovil2p = reader.GetString(7)
End If
Dim _Movil2p As String
If reader.IsDBNull(8) Then 
	 _Movil2p = ""
Else
	 _Movil2p = reader.GetString(8)
End If
Dim _IdProveedor As System.Nullable(Of System.Int32) 
If reader.IsDBNull(9) Then 
	 _IdProveedor = New System.Nullable(Of System.Int32)
Else
	 _IdProveedor = reader.GetInt32(9)
End If
Dim _Trato As String
If reader.IsDBNull(10) Then 
	 _Trato = ""
Else
	 _Trato = reader.GetString(10)
End If
Dim _ProveedoresString As String
If reader.IsDBNull(11) Then 
	 _ProveedoresString = ""
Else
	 _ProveedoresString = reader.GetString(11)
End If

            Dim ProvContactos As IMappeableProvContactosObject  = CType(entity, IMappeableProvContactosObject)
            ProvContactos.HydrateFields(reader.GetInt32(0), _
_Contactop, _
_Anexop, _
_TipMovil1p, _
_Movil1p, _
_Email1p, _
_Email2p, _
_TipMovil2p, _
_Movil2p, _
_IdProveedor, _
_Trato, _
_ProveedoresString)
        End Sub


        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function

        

        

        ' Complete the aggregations for this entity.         
        Protected Overrides Sub CompleteEntity(ByVal entity As t)
            Dim ProveedoresEntity As Objects.ProveedoresObject = Nothing 'Lazy load
            CType(entity, IMappeableProvContactos).CompleteEntity(ProveedoresEntity)
        End Sub

        


        ''' <summary>
        ''' Get a ProvContactos by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As t
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a ProvContactosList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As ObjectList(Of T)
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' GetOne By Params
        ''' </summary>
        Public Overloads Function GetOne(IdProvContactos As System.Int32) As t
            Return MyBase.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "ProvContactos_GetOne", IdProvContactos)
        End Function
        


        ' GetOne By Objects and Params
            

        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByProveedores(IdProveedor As System.Int32) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ProvContactos_GetByProveedores", IdProveedor)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByProveedores(ByVal Proveedores As IUniqueIdentifiable) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "ProvContactos_GetByProveedores", Proveedores.Identifier())
        End Function

    


        'Database Queries 
        


        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace




