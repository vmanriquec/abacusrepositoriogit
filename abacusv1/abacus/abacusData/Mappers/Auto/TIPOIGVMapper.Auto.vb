
'------------------------------------------------------------------------------
' This file was generated by Cooperator Modeler, version 1.3.3.0
' Created: 15/08/2013 - 05:51 p.m.
' This is a partial class file. The other one is TIPOIGVMapper.cs
' You should not modifiy this file, please edit the other partial class file.
'------------------------------------------------------------------------------

Imports System
Imports abacusRules.Entities
Imports abacusRules.Objects
Imports Cooperator.Framework.Data
Imports Cooperator.Framework.Data.Exceptions
Imports Cooperator.Framework.Core
Imports System.Data.Common
Imports System.Reflection
Imports System.Web


Namespace Mappers
    

    Public Partial Class TIPOIGVMapper
        Inherits BaseGateway(Of TIPOIGVObject, TIPOIGVObjectList)
        Implements IGenericGateway

#Region "Singleton"

        Private Shared _instance As TIPOIGVMapper

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As TIPOIGVMapper
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New TIPOIGVMapper()
                Else
                    Dim inst As TIPOIGVMapper = TryCast(HttpContext.Current.Items("abacusRules.TIPOIGVMapperSingleton"), TIPOIGVMapper)
                    If inst Is Nothing Then
                        inst = New TIPOIGVMapper()
                        HttpContext.Current.Items.Add("abacusRules.TIPOIGVMapperSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function


#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim  s() as String={"TIPOIGV"}
            return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return GetType(TIPOIGVObject)
        End Function


        ''' <summary>
        ''' Return the mapped table name
        ''' </summary>
        Protected Overrides ReadOnly Property TableName() As String 
            Get
                Return "TIPOIGV"
            End Get
        End Property

        ''' <summary>
        ''' Return the TIPOIGVGateway type FullName
        ''' </summary>
        Protected Overrides ReadOnly Property RuleName() As String
            Get
                Return GetType(TIPOIGVMapper).FullName
            End Get
        End Property


        

        

        ''' <summary>
        ''' Assign properties values based on DataReader
        ''' </summary>
        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As TIPOIGVObject)
            Dim _DESCRIP As String
If reader.IsDBNull(1) Then 
	 _DESCRIP = ""
Else
	 _DESCRIP = reader.GetString(1)
End If
Dim _TASA As System.Nullable(Of System.Double) 
If reader.IsDBNull(2) Then 
	 _TASA = New System.Nullable(Of System.Double)
Else
	 _TASA = reader.GetFloat(2)
End If
Dim _upsize_ts As System.Nullable(Of System.DateTime) 
If reader.IsDBNull(3) Then 
	 _upsize_ts = New System.Nullable(Of System.DateTime)
Else
	 _upsize_ts = reader.GetDateTime(3)
End If

            Dim TIPOIGV As IMappeableTIPOIGVObject  = CType(entity, IMappeableTIPOIGVObject)
            TIPOIGV.HydrateFields(reader.GetInt32(0), _
_DESCRIP, _
_TASA, _
_upsize_ts)
        End Sub

        ''' <summary>
        ''' Get field values to call insertion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForInsert(ByVal entity As TIPOIGVObject) As Object()
            Dim TIPOIGV As IMappeableTIPOIGVObject = CType(entity, IMappeableTIPOIGVObject)
            Return TIPOIGV.GetFieldsForInsert()
        End Function

        ''' <summary>
        ''' Get field values to call update stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForUpdate(ByVal entity As TIPOIGVObject) As Object()
            Dim TIPOIGV As IMappeableTIPOIGVObject = CType(entity, IMappeableTIPOIGVObject)
            Return TIPOIGV.GetFieldsForUpdate()
        End Function

        ''' <summary>
        ''' Get field values to call deletion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForDelete(ByVal entity As TIPOIGVObject) As Object()
            Dim TIPOIGV As IMappeableTIPOIGVObject = CType(entity, IMappeableTIPOIGVObject)
            Return TIPOIGV.GetFieldsForDelete()
        End Function

        ''' <summary>
        ''' Raised after insert and update. Update properties from Output parameters
        ''' </summary>
        Protected Overrides Sub UpdateObjectFromOutputParams(ByVal entity As TIPOIGVObject, ByVal parameters As Object())
            ' Update properties from Output parameters
            CType(entity, IMappeableTIPOIGVObject).UpdateObjectFromOutputParams(parameters)
        End Sub

        ''' <summary>
        ''' StoredProceduresPrefix, for example: coop_
        ''' </summary>
        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function


          



        ''' <summary>
        ''' Get a TIPOIGV by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As TIPOIGVObject
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a TIPOIGVList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As TIPOIGVObjectList
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetOne(TIPOIGV As System.Int32) As TIPOIGVObject
            Return MyBase.GetOne(New TIPOIGVObject(TIPOIGV))
        End Function

        

        ' GetOne By Objects and Params
            

        


        

        





        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(TIPOIGV As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "TIPOIGV_Delete", TIPOIGV)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(ByVal transaction As DbTransaction ,TIPOIGV As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "TIPOIGV_Delete", TIPOIGV)
        End Sub

        ' Delete By Objects and Params
            



        

    

    

    

    


        'Database Queries 
        






        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace


Namespace Wrappers
    ''' <summary>
    ''' 
    ''' </summary>
    Public Class TIPOIGVMapperWrapper

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            return Instance().GetPKPropertiesNames()
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return Instance().GetMappingType()
        End Function


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function Instance() As abacusRules.Mappers.TIPOIGVMapper
            Return abacusRules.Mappers.TIPOIGVMapper.Instance()
        End Function

        
        ''' <summary>
        ''' Get a TIPOIGV Entity by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetOne(ByVal TIPOIGV As System.Int32) As Objects.TIPOIGVObject         
            Return Instance().GetOne( TIPOIGV)
        End Function
        

        ' GetBy Objects and Params
            

        

        ''' <summary>
        ''' GetAll TIPOIGV 
        ''' </summary>
        Public Function GetAll() As Objects.TIPOIGVObjectList
            Return Instance().GetAll()
        End Function

        
        


            

        

        ''' <summary>
        ''' Delete TIPOIGV 
        ''' </summary>
        Public Overloads Sub Delete(ByVal TIPOIGV As System.Int32)
            Instance().Delete(TIPOIGV)
        End Sub

        ''' <summary>
        ''' Delete TIPOIGV 
        ''' </summary>
        Public Overloads Sub Delete(ByVal entity As Objects.TIPOIGVObject)
            Instance().Delete(entity)
        End Sub

        ''' <summary>
        ''' Save TIPOIGV  
        ''' </summary>
        Public Overloads Sub Save(ByVal entity As Objects.TIPOIGVObject)
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert TIPOIGV 
        ''' </summary>
        Public Overloads Sub Insert(ByVal entity As Objects.TIPOIGVObject)
            Instance().Insert(entity)
        End Sub

        ''' <summary>
        ''' Save TIPOIGV 
        ''' </summary>
        Public Overloads Sub Save(ByVal TIPOIGV As System.Int32, ByVal DESCRIP As System.String, ByVal TASA As System.Double, ByVal upsize_ts As System.DateTime)
            Dim entity As Objects.TIPOIGVObject = Instance().GetOne(TIPOIGV)
            If entity Is Nothing Then
                Throw New ApplicationException(String.Format("Entity not found. IUniqueIdentifiable values: {0} = {1}", "TIPOIGV", TIPOIGV))
            End If

            entity.DESCRIP = DESCRIP
            entity.TASA = TASA
            entity.upsize_ts = upsize_ts
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert TIPOIGV
        ''' </summary>
        Public Overloads Sub Insert(ByVal DESCRIP As System.String, ByVal TASA As System.Double, ByVal upsize_ts As System.DateTime)
            Dim entity As Objects.TIPOIGVObject = New Objects.TIPOIGVObject

            entity.DESCRIP = DESCRIP
            entity.TASA = TASA
            entity.upsize_ts = upsize_ts
            Instance().Insert(entity)
        End Sub

        

        'Database Queries 
        


    End Class
End Namespace


Namespace Loaders

    ''' <summary>
    ''' 
    ''' </summary>
    Partial Public Class TIPOIGVLoader(Of T As {TIPOIGVObject, New})
        Inherits BaseLoader(Of T, TIPOIGVObject, ObjectList(Of T))
        Implements IGenericGateway



#Region "Singleton"

        Private Shared _instance As TIPOIGVLoader(Of T)

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As TIPOIGVLoader(Of T)
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New TIPOIGVLoader(Of T)
                Else
                    Dim inst As TIPOIGVLoader(Of T) = TryCast(HttpContext.Current.Items("abacusRules.TIPOIGVLoaderSingleton"), TIPOIGVLoader(Of T))
                    If inst Is Nothing Then
                        inst = New TIPOIGVLoader(Of T)
                        HttpContext.Current.Items.Add("abacusRules.TIPOIGVLoaderSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function

#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim s() as String={"TIPOIGV"}
            Return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            Return GetType(TIPOIGVObject)
        End Function


        Protected Overrides ReadOnly Property TableName As String 
            Get
                Return "TIPOIGV"
            End Get
        End Property

        

        


        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As TIPOIGVObject)
            Dim _DESCRIP As String
If reader.IsDBNull(1) Then 
	 _DESCRIP = ""
Else
	 _DESCRIP = reader.GetString(1)
End If
Dim _TASA As System.Nullable(Of System.Double) 
If reader.IsDBNull(2) Then 
	 _TASA = New System.Nullable(Of System.Double)
Else
	 _TASA = reader.GetFloat(2)
End If
Dim _upsize_ts As System.Nullable(Of System.DateTime) 
If reader.IsDBNull(3) Then 
	 _upsize_ts = New System.Nullable(Of System.DateTime)
Else
	 _upsize_ts = reader.GetDateTime(3)
End If

            Dim TIPOIGV As IMappeableTIPOIGVObject  = CType(entity, IMappeableTIPOIGVObject)
            TIPOIGV.HydrateFields(reader.GetInt32(0), _
_DESCRIP, _
_TASA, _
_upsize_ts)
        End Sub


        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function

        


        ''' <summary>
        ''' Get a TIPOIGV by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As t
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a TIPOIGVList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As ObjectList(Of T)
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' GetOne By Params
        ''' </summary>
        Public Overloads Function GetOne(TIPOIGV As System.Int32) As t
            Return MyBase.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "TIPOIGV_GetOne", TIPOIGV)
        End Function
        


        ' GetOne By Objects and Params
            

        


        'Database Queries 
        


        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace




