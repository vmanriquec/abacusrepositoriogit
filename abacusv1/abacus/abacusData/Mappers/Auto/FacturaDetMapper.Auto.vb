
'------------------------------------------------------------------------------
' This file was generated by Cooperator Modeler, version 1.3.3.0
' Created: 15/08/2013 - 05:51 p.m.
' This is a partial class file. The other one is FacturaDetMapper.cs
' You should not modifiy this file, please edit the other partial class file.
'------------------------------------------------------------------------------

Imports System
Imports abacusRules.Entities
Imports abacusRules.Objects
Imports Cooperator.Framework.Data
Imports Cooperator.Framework.Data.Exceptions
Imports Cooperator.Framework.Core
Imports System.Data.Common
Imports System.Reflection
Imports System.Web


Namespace Mappers
    

    Public Partial Class FacturaDetMapper
        Inherits BaseGateway(Of FacturaDet, FacturaDetList)
        Implements IGenericGateway

#Region "Singleton"

        Private Shared _instance As FacturaDetMapper

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As FacturaDetMapper
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New FacturaDetMapper()
                Else
                    Dim inst As FacturaDetMapper = TryCast(HttpContext.Current.Items("abacusRules.FacturaDetMapperSingleton"), FacturaDetMapper)
                    If inst Is Nothing Then
                        inst = New FacturaDetMapper()
                        HttpContext.Current.Items.Add("abacusRules.FacturaDetMapperSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function


#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim  s() as String={"IdFactDet"}
            return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return GetType(FacturaDet)
        End Function


        ''' <summary>
        ''' Return the mapped table name
        ''' </summary>
        Protected Overrides ReadOnly Property TableName() As String 
            Get
                Return "FacturaDet"
            End Get
        End Property

        ''' <summary>
        ''' Return the FacturaDetGateway type FullName
        ''' </summary>
        Protected Overrides ReadOnly Property RuleName() As String
            Get
                Return GetType(FacturaDetMapper).FullName
            End Get
        End Property


        

        

        ''' <summary>
        ''' Assign properties values based on DataReader
        ''' </summary>
        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As FacturaDet)
            Dim _IdFactura As System.Nullable(Of System.Int32) 
If reader.IsDBNull(1) Then 
	 _IdFactura = New System.Nullable(Of System.Int32)
Else
	 _IdFactura = reader.GetInt32(1)
End If
Dim _Codigo As System.Nullable(Of System.Int32) 
If reader.IsDBNull(2) Then 
	 _Codigo = New System.Nullable(Of System.Int32)
Else
	 _Codigo = reader.GetInt32(2)
End If
Dim _Producto As System.Nullable(Of System.Int32) 
If reader.IsDBNull(3) Then 
	 _Producto = New System.Nullable(Of System.Int32)
Else
	 _Producto = reader.GetInt32(3)
End If
Dim _Cantidad As System.Nullable(Of System.Int32) 
If reader.IsDBNull(4) Then 
	 _Cantidad = New System.Nullable(Of System.Int32)
Else
	 _Cantidad = reader.GetInt32(4)
End If
Dim _PUnitario As System.Nullable(Of System.Decimal) 
If reader.IsDBNull(5) Then 
	 _PUnitario = New System.Nullable(Of System.Decimal)
Else
	 _PUnitario = reader.GetDecimal(5)
End If
Dim _Dscto As System.Nullable(Of System.Decimal) 
If reader.IsDBNull(6) Then 
	 _Dscto = New System.Nullable(Of System.Decimal)
Else
	 _Dscto = reader.GetDecimal(6)
End If
Dim _upsize_ts As System.Nullable(Of System.DateTime) 
If reader.IsDBNull(7) Then 
	 _upsize_ts = New System.Nullable(Of System.DateTime)
Else
	 _upsize_ts = reader.GetDateTime(7)
End If
Dim _FacturaString As String
If reader.IsDBNull(8) Then 
	 _FacturaString = ""
Else
	 _FacturaString = reader.GetString(8)
End If

            Dim FacturaDet As IMappeableFacturaDetObject  = CType(entity, IMappeableFacturaDetObject)
            FacturaDet.HydrateFields(reader.GetInt32(0), _
_IdFactura, _
_Codigo, _
_Producto, _
_Cantidad, _
_PUnitario, _
_Dscto, _
_upsize_ts, _
_FacturaString)
        End Sub

        ''' <summary>
        ''' Get field values to call insertion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForInsert(ByVal entity As FacturaDet) As Object()
            Dim FacturaDet As IMappeableFacturaDetObject = CType(entity, IMappeableFacturaDetObject)
            Return FacturaDet.GetFieldsForInsert()
        End Function

        ''' <summary>
        ''' Get field values to call update stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForUpdate(ByVal entity As FacturaDet) As Object()
            Dim FacturaDet As IMappeableFacturaDetObject = CType(entity, IMappeableFacturaDetObject)
            Return FacturaDet.GetFieldsForUpdate()
        End Function

        ''' <summary>
        ''' Get field values to call deletion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForDelete(ByVal entity As FacturaDet) As Object()
            Dim FacturaDet As IMappeableFacturaDetObject = CType(entity, IMappeableFacturaDetObject)
            Return FacturaDet.GetFieldsForDelete()
        End Function

        ''' <summary>
        ''' Raised after insert and update. Update properties from Output parameters
        ''' </summary>
        Protected Overrides Sub UpdateObjectFromOutputParams(ByVal entity As FacturaDet, ByVal parameters As Object())
            ' Update properties from Output parameters
            CType(entity, IMappeableFacturaDetObject).UpdateObjectFromOutputParams(parameters)
        End Sub

        ''' <summary>
        ''' StoredProceduresPrefix, for example: coop_
        ''' </summary>
        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function


        


        

        ''' <summary>
        ''' Complete the aggregations for this entity. 
        ''' </summary>
        Protected Overrides Sub CompleteEntity(ByVal entity As FacturaDet)
            Dim FacturaEntity As Objects.FacturaObject = Nothing 'Lazy load
            CType(entity, IMappeableFacturaDet).CompleteEntity(FacturaEntity)
        End Sub


        # Region "CRUD Operations"
        

        # End Region
        
        ''' <summary>
        ''' Delete children for this entity
        ''' </summary>
        Public Sub DeleteChildren(ByVal transaction As DbTransaction, ByVal entity As IUniqueIdentifiable)
                        
        End Sub


          



        ''' <summary>
        ''' Get a FacturaDet by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As FacturaDet
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a FacturaDetList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As FacturaDetList
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetOne(IdFactDet As System.Int32) As FacturaDet
            Return MyBase.GetOne(New FacturaDet(IdFactDet))
        End Function

        

        ' GetOne By Objects and Params
            

        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByFactura(IdFactura As System.Int32) As FacturaDetList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "FacturaDet_GetByFactura", IdFactura)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByFactura(ByVal Factura As IUniqueIdentifiable) As FacturaDetList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "FacturaDet_GetByFactura", Factura.Identifier())
        End Function

    


        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByFactura(ByVal transaction As DbTransaction,IdFactura As System.Int32) As FacturaDetList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "FacturaDet_GetByFactura", IdFactura)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByFactura(ByVal transaction As DbTransaction, ByVal Factura As IUniqueIdentifiable) As FacturaDetList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "FacturaDet_GetByFactura", Factura.Identifier())
        End Function

    

        





        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(IdFactDet As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "FacturaDet_Delete", IdFactDet)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(ByVal transaction As DbTransaction ,IdFactDet As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "FacturaDet_Delete", IdFactDet)
        End Sub

        ' Delete By Objects and Params
            



        

    

    

    

    

    

    

    

    

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByFactura(IdFactura As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "FacturaDet_DeleteByFactura", IdFactura)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByFactura(ByVal transaction As DbTransaction , IdFactura As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "FacturaDet_DeleteByFactura", IdFactura)
        End Sub


        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByFactura(ByVal Factura As IUniqueIdentifiable)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "FacturaDet_DeleteByFactura", Factura.Identifier())
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByFactura(ByVal transaction As DbTransaction, ByVal Factura As IUniqueIdentifiable)        
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "FacturaDet_DeleteByFactura", Factura.Identifier())
        End Sub

        

    


        'Database Queries 
        






        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace


Namespace Wrappers
    ''' <summary>
    ''' 
    ''' </summary>
    Public Class FacturaDetMapperWrapper

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            return Instance().GetPKPropertiesNames()
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return Instance().GetMappingType()
        End Function


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function Instance() As abacusRules.Mappers.FacturaDetMapper
            Return abacusRules.Mappers.FacturaDetMapper.Instance()
        End Function

        
        ''' <summary>
        ''' Get a FacturaDet Entity by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetOne(ByVal IdFactDet As System.Int32) As Entities.FacturaDet         
            Return Instance().GetOne( IdFactDet)
        End Function
        

        ' GetBy Objects and Params
            

        

        ''' <summary>
        ''' Get a FacturaDetList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByFactura( ByVal IdFactura As System.Int32) As Entities.FacturaDetList 
            Return Instance().GetByFactura(IdFactura)
        End Function

        ''' <summary>
        ''' Get a FacturaDetList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByFactura(ByVal  Factura As IUniqueIdentifiable) As Entities.FacturaDetList
            Return Instance().GetByFactura(Factura)
        End Function

    

        ''' <summary>
        ''' GetAll FacturaDet 
        ''' </summary>
        Public Function GetAll() As Entities.FacturaDetList
            Return Instance().GetAll()
        End Function

        
        

        ''' <summary>
        ''' Delete children for FacturaDet
        ''' </summary>
        Public Sub DeleteChildren(ByVal transaction As DbTransaction, ByVal entity As FacturaDet)
            Instance().DeleteChildren(transaction, entity)
        End Sub

        


            

        

        ''' <summary>
        ''' Delete FacturaDet by Factura
        ''' </summary>
        Public Sub DeleteByFactura( ByVal IdFactura As System.Int32)
            Instance().DeleteByFactura(IdFactura)
        End Sub

        ''' <summary>
        ''' Delete FacturaDet by Factura
        ''' </summary>
        Public Sub DeleteByFactura(ByVal Factura As IUniqueIdentifiable )
            Instance().DeleteByFactura(Factura)
        End Sub

    

        ''' <summary>
        ''' Delete FacturaDet 
        ''' </summary>
        Public Overloads Sub Delete(ByVal IdFactDet As System.Int32)
            Instance().Delete(IdFactDet)
        End Sub

        ''' <summary>
        ''' Delete FacturaDet 
        ''' </summary>
        Public Overloads Sub Delete(ByVal entity As Entities.FacturaDet)
            Instance().Delete(entity)
        End Sub

        ''' <summary>
        ''' Save FacturaDet  
        ''' </summary>
        Public Overloads Sub Save(ByVal entity As Entities.FacturaDet)
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert FacturaDet 
        ''' </summary>
        Public Overloads Sub Insert(ByVal entity As Entities.FacturaDet)
            Instance().Insert(entity)
        End Sub

        ''' <summary>
        ''' Save FacturaDet 
        ''' </summary>
        Public Overloads Sub Save(ByVal IdFactDet As System.Int32, ByVal IdFactura As System.Int32, ByVal Codigo As System.Int32, ByVal Producto As System.Int32, ByVal Cantidad As System.Int32, ByVal PUnitario As System.Decimal, ByVal Dscto As System.Decimal, ByVal upsize_ts As System.DateTime, ByVal FacturaString As System.String)
            Dim entity As Entities.FacturaDet = Instance().GetOne(IdFactDet)
            If entity Is Nothing Then
                Throw New ApplicationException(String.Format("Entity not found. IUniqueIdentifiable values: {0} = {1}", "IdFactDet", IdFactDet))
            End If

            entity.IdFactura = IdFactura
            entity.Codigo = Codigo
            entity.Producto = Producto
            entity.Cantidad = Cantidad
            entity.PUnitario = PUnitario
            entity.Dscto = Dscto
            entity.upsize_ts = upsize_ts
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert FacturaDet
        ''' </summary>
        Public Overloads Sub Insert(ByVal IdFactura As System.Int32, ByVal Codigo As System.Int32, ByVal Producto As System.Int32, ByVal Cantidad As System.Int32, ByVal PUnitario As System.Decimal, ByVal Dscto As System.Decimal, ByVal upsize_ts As System.DateTime)
            Dim entity As Entities.FacturaDet = New Entities.FacturaDet

            entity.IdFactura = IdFactura
            entity.Codigo = Codigo
            entity.Producto = Producto
            entity.Cantidad = Cantidad
            entity.PUnitario = PUnitario
            entity.Dscto = Dscto
            entity.upsize_ts = upsize_ts
            Instance().Insert(entity)
        End Sub

        

        'Database Queries 
        


    End Class
End Namespace


Namespace Loaders

    ''' <summary>
    ''' 
    ''' </summary>
    Partial Public Class FacturaDetLoader(Of T As {FacturaDet, New})
        Inherits BaseLoader(Of T, FacturaDet, ObjectList(Of T))
        Implements IGenericGateway



#Region "Singleton"

        Private Shared _instance As FacturaDetLoader(Of T)

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As FacturaDetLoader(Of T)
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New FacturaDetLoader(Of T)
                Else
                    Dim inst As FacturaDetLoader(Of T) = TryCast(HttpContext.Current.Items("abacusRules.FacturaDetLoaderSingleton"), FacturaDetLoader(Of T))
                    If inst Is Nothing Then
                        inst = New FacturaDetLoader(Of T)
                        HttpContext.Current.Items.Add("abacusRules.FacturaDetLoaderSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function

#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim s() as String={"IdFactDet"}
            Return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            Return GetType(FacturaDet)
        End Function


        Protected Overrides ReadOnly Property TableName As String 
            Get
                Return "FacturaDet"
            End Get
        End Property

        

        


        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As FacturaDet)
            Dim _IdFactura As System.Nullable(Of System.Int32) 
If reader.IsDBNull(1) Then 
	 _IdFactura = New System.Nullable(Of System.Int32)
Else
	 _IdFactura = reader.GetInt32(1)
End If
Dim _Codigo As System.Nullable(Of System.Int32) 
If reader.IsDBNull(2) Then 
	 _Codigo = New System.Nullable(Of System.Int32)
Else
	 _Codigo = reader.GetInt32(2)
End If
Dim _Producto As System.Nullable(Of System.Int32) 
If reader.IsDBNull(3) Then 
	 _Producto = New System.Nullable(Of System.Int32)
Else
	 _Producto = reader.GetInt32(3)
End If
Dim _Cantidad As System.Nullable(Of System.Int32) 
If reader.IsDBNull(4) Then 
	 _Cantidad = New System.Nullable(Of System.Int32)
Else
	 _Cantidad = reader.GetInt32(4)
End If
Dim _PUnitario As System.Nullable(Of System.Decimal) 
If reader.IsDBNull(5) Then 
	 _PUnitario = New System.Nullable(Of System.Decimal)
Else
	 _PUnitario = reader.GetDecimal(5)
End If
Dim _Dscto As System.Nullable(Of System.Decimal) 
If reader.IsDBNull(6) Then 
	 _Dscto = New System.Nullable(Of System.Decimal)
Else
	 _Dscto = reader.GetDecimal(6)
End If
Dim _upsize_ts As System.Nullable(Of System.DateTime) 
If reader.IsDBNull(7) Then 
	 _upsize_ts = New System.Nullable(Of System.DateTime)
Else
	 _upsize_ts = reader.GetDateTime(7)
End If
Dim _FacturaString As String
If reader.IsDBNull(8) Then 
	 _FacturaString = ""
Else
	 _FacturaString = reader.GetString(8)
End If

            Dim FacturaDet As IMappeableFacturaDetObject  = CType(entity, IMappeableFacturaDetObject)
            FacturaDet.HydrateFields(reader.GetInt32(0), _
_IdFactura, _
_Codigo, _
_Producto, _
_Cantidad, _
_PUnitario, _
_Dscto, _
_upsize_ts, _
_FacturaString)
        End Sub


        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function

        

        

        ' Complete the aggregations for this entity.         
        Protected Overrides Sub CompleteEntity(ByVal entity As t)
            Dim FacturaEntity As Objects.FacturaObject = Nothing 'Lazy load
            CType(entity, IMappeableFacturaDet).CompleteEntity(FacturaEntity)
        End Sub

        


        ''' <summary>
        ''' Get a FacturaDet by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As t
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a FacturaDetList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As ObjectList(Of T)
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' GetOne By Params
        ''' </summary>
        Public Overloads Function GetOne(IdFactDet As System.Int32) As t
            Return MyBase.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "FacturaDet_GetOne", IdFactDet)
        End Function
        


        ' GetOne By Objects and Params
            

        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByFactura(IdFactura As System.Int32) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "FacturaDet_GetByFactura", IdFactura)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByFactura(ByVal Factura As IUniqueIdentifiable) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "FacturaDet_GetByFactura", Factura.Identifier())
        End Function

    


        'Database Queries 
        


        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace




