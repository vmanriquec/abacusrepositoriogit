
'------------------------------------------------------------------------------
' This file was generated by Cooperator Modeler, version 1.3.3.0
' Created: 15/08/2013 - 05:51 p.m.
' This is a partial class file. The other one is CategoriasGateway.vb
' You should not modifiy this file, please edit the other partial class file.
'------------------------------------------------------------------------------

Imports System
Imports abacusRules.Objects
Imports Cooperator.Framework.Data
Imports Cooperator.Framework.Data.Exceptions
Imports Cooperator.Framework.Core
Imports System.Data.Common
Imports System.Reflection
Imports System.Web

Namespace Gateways
        
    Public Partial Class CategoriasGateway 
        Inherits BaseGateway(Of CategoriasObject, CategoriasObjectList)
        Implements IGenericGateway

#Region "Singleton"

        Private Shared _instance As CategoriasGateway

        Private Sub New()
        End Sub

        Public Shared Function Instance() As CategoriasGateway
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New CategoriasGateway()
                Else
                    Dim inst As CategoriasGateway = TryCast(HttpContext.Current.Items("abacusRules.CategoriasGatewaySingleton"), CategoriasGateway)
                    If inst Is Nothing Then
                        inst = New CategoriasGateway()
                        HttpContext.Current.Items.Add("abacusRules.CategoriasGatewaySingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function

#End Region

        ''' <summary>
        ''' Return the mapped table name
        ''' </summary>
        Protected Overrides ReadOnly Property TableName() As String
            Get
                Return "Categorias"
            End Get
        End Property

        ''' <summary>
        ''' Return the CategoriasGateway type FullName
        ''' </summary>
        Protected Overrides ReadOnly Property RuleName() As String
            Get
                Return GetType(CategoriasGateway ).FullName
            End Get
        End Property


        

        


        ''' <summary>
        ''' Assign properties values based on DataReader
        ''' </summary>
        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As CategoriasObject )
            Dim _Categoria As String
If reader.IsDBNull(1) Then 
	 _Categoria = ""
Else
	 _Categoria = reader.GetString(1)
End If
Dim _IdFamilia As System.Nullable(Of System.Int32) 
If reader.IsDBNull(2) Then 
	 _IdFamilia = New System.Nullable(Of System.Int32)
Else
	 _IdFamilia = reader.GetInt32(2)
End If
Dim _FamiliasString As String
If reader.IsDBNull(3) Then 
	 _FamiliasString = ""
Else
	 _FamiliasString = reader.GetString(3)
End If

            Dim Categorias As IMappeableCategoriasObject  = CType(entity, IMappeableCategoriasObject)
            Categorias.HydrateFields(reader.GetInt32(0), _
_Categoria, _
_IdFamilia, _
_FamiliasString)
            CType(entity, IObject).State = ObjectState.Restored
        End Sub

        ''' <summary>
        ''' Get field values to call insertion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForInsert(ByVal entity As CategoriasObject) As Object()
            Dim Categorias As IMappeableCategoriasObject = CType(entity, IMappeableCategoriasObject)
            Return Categorias.GetFieldsForInsert()
        End Function

        ''' <summary>
        ''' Get field values to call update stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForUpdate(ByVal entity As CategoriasObject) As Object()
            Dim Categorias As IMappeableCategoriasObject = CType(entity, IMappeableCategoriasObject)
            Return Categorias.GetFieldsForUpdate()
        End Function

        ''' <summary>
        ''' Get field values to call deletion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForDelete(ByVal entity As CategoriasObject) As Object()
            Dim Categorias As IMappeableCategoriasObject = CType(entity, IMappeableCategoriasObject)
            Return Categorias.GetFieldsForDelete()
        End Function

        ''' <summary>
        ''' Raised after insert and update. Update properties from Output parameters
        ''' </summary>
        Protected Overrides Sub UpdateObjectFromOutputParams(ByVal row As CategoriasObject, parameters As Object())
            ' Update properties from Output parameters
            CType(row, IMappeableCategoriasObject).UpdateObjectFromOutputParams(parameters)
            CType(row, IObject).State = ObjectState.Restored
        End Sub

        ''' <summary>
        ''' StoredProceduresPrefix, for example: coop_
        ''' </summary>
        Protected Overrides Function StoredProceduresPrefix() As String
            Return "coop_"
        End Function


        ''' <summary>
        ''' Get a CategoriasObject by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As CategoriasObject 
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a CategoriasObjectList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As CategoriasObjectList 
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function



        ''' <summary>
        ''' Get a CategoriasObject by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetOne(ByVal Id_Categoria As System.Int32) As CategoriasObject         
            Return MyBase.GetOne(New CategoriasObject(Id_Categoria))
        End Function

            


        
        ''' <summary>
        ''' Get a CategoriasObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByFamilias(ByVal transaction As DbTransaction, ByVal IdFamilia As System.Int32) As CategoriasObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Categorias_GetByFamilias", IdFamilia)
        End Function

        ''' <summary>
        ''' Get a CategoriasObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByFamilias(ByVal transaction As DbTransaction, Familias As IUniqueIdentifiable) As CategoriasObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Categorias_GetByFamilias", Familias.Identifier())
        End Function
    


        
        ''' <summary>
        ''' Get a CategoriasObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByFamilias(ByVal IdFamilia As System.Int32) As CategoriasObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Categorias_GetByFamilias", IdFamilia)
        End Function

        ''' <summary>
        ''' Get a CategoriasObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByFamilias(Familias As IUniqueIdentifiable) As CategoriasObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Categorias_GetByFamilias", Familias.Identifier())
        End Function
    

        
        ''' <summary>
        ''' Delete Categorias 
        ''' </summary>
        Public Overloads Sub Delete(ByVal Id_Categoria As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Categorias_Delete", Id_Categoria)
        End Sub

        ''' <summary>
        ''' Delete Categorias
        ''' </summary>
        Public Overloads Sub Delete(transaction As DbTransaction , ByVal Id_Categoria As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Categorias_Delete", Id_Categoria)
        End Sub

            



        

    

    

    

    

        ''' <summary>
        ''' Delete Categorias By Familias
        ''' </summary>
        Public Overloads Sub DeleteByFamilias(ByVal IdFamilia As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Categorias_DeleteByFamilias", IdFamilia)
        End Sub

        ''' <summary>
        ''' Delete Categorias By Familias
        ''' </summary>
        Public Overloads Sub DeleteByFamilias(ByVal transaction As DbTransaction , ByVal IdFamilia As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Categorias_DeleteByFamilias", IdFamilia)
        End Sub

        ''' <summary>
        ''' Delete Categorias By Familias
        ''' </summary>
        Public Overloads Sub DeleteByFamilias(ByVal Familias As IUniqueIdentifiable )
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Categorias_DeleteByFamilias", Familias.Identifier())
        End Sub

        ''' <summary>
        ''' Delete Categorias By Familias
        ''' </summary>
        Public Overloads Sub DeleteByFamilias(ByVal transaction As DbTransaction , ByVal Familias As IUniqueIdentifiable)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Categorias_DeleteByFamilias", Familias.Identifier())
        End Sub

        

    


        'Database Queries 
        



        #Region "IGenericGateway"

        Private Function GetOne2(identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GeyByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class
End Namespace




