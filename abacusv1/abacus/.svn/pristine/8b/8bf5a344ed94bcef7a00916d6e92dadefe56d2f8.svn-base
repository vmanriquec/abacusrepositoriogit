
'------------------------------------------------------------------------------
' This file was generated by Cooperator Modeler, version 1.3.3.0
' Created: 15/08/2013 - 05:50 p.m.
' This is a Partial class file. The other one is TipoProductoObject.vb
' You should not modifiy this file, please edit the other partial class file.
'------------------------------------------------------------------------------

Imports Cooperator.Framework.Core
Imports System

Namespace Objects

    Public Partial Class TipoProductoObject
        Inherits BaseObject
        Implements IMappeableTipoProductoObject
        Implements IUniqueIdentifiable
        Implements IEquatable(Of TipoProductoObject)
        Implements ICloneable

#Region "Ctor"

        Public Sub New()
            MyBase.New()

			_Id_TipoProducto =  ValuesGenerator.GetInt32

        End Sub

        
        Public Sub New(ByVal Id_TipoProducto As System.Int32)
            MyBase.New()

			_Id_TipoProducto = Id_TipoProducto

            Call Initialized()
        End Sub
        

        
        Public Sub New(ByVal Id_TipoProducto As System.Int32, _
			ByVal TipoProducto As System.String)
            MyBase.New()

			_Id_TipoProducto = Id_TipoProducto
			_TipoProducto = TipoProducto

            Call Initialized()
        End Sub
        

#End Region

#Region "Events"

        
#End Region

#Region "Fields"

        Protected _Id_TipoProducto As System.Int32
Protected _TipoProducto As System.String

#End Region

#Region "Properties"
        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overridable ReadOnly Property Id_TipoProducto As System.Int32
            Get
                Return _Id_TipoProducto
            End Get
            
        End Property
        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overridable Property TipoProducto As System.String
            Get
                Return _TipoProducto
            End Get
            
            Set
                MyBase.PropertyModified()
                _TipoProducto = value
                
            End Set
            
        End Property
        
        #End Region

        

        Protected Overrides Sub SetOriginalValue()
            MyBase.InternalOriginalValue = CType(Me.MemberwiseClone(), IObject)
        End Sub

        Protected Overridable Function Clone() As Object Implements ICloneable.Clone
            Dim newObject As TipoProductoObject 
            Dim newOriginalValue As TipoProductoObject 

            newObject = CType(Me.MemberwiseClone(), TipoProductoObject) 
            If (MyBase.InternalOriginalValue IsNot Nothing) Then
                newOriginalValue = CType(Me.OriginalValue().MemberwiseClone(), TipoProductoObject)
                newObject.InternalOriginalValue = newOriginalValue
            End If
            Return newObject
        End Function


        ''' <summary>
        ''' Returns de original value of object since was created or restored.
        ''' </summary>
        Public Shadows Function OriginalValue() As TipoProductoObject 
           Return CType(MyBase.OriginalValue, TipoProductoObject)
        End Function


        Private Sub HydrateFields(ByVal Id_TipoProducto As System.Int32, _
			ByVal TipoProducto As System.String) Implements IMappeableTipoProductoObject.HydrateFields        
        	_Id_TipoProducto = Id_TipoProducto
			_TipoProducto = TipoProducto
        End Sub

        Private Function GetFieldsForInsert() As Object() Implements IMappeableTipoProductoObject.GetFieldsForInsert
        
        
            Dim _myArray(1) As Object
            _myArray(0) = _Id_TipoProducto
			If (Not System.String.IsNullOrEmpty(_TipoProducto)) Then _myArray(1) = _TipoProducto
			
            Return _myArray
        
        End Function

        Private Function GetFieldsForUpdate() As Object() Implements IMappeableTipoProductoObject.GetFieldsForUpdate
        
        
            
            Dim _myArray(1) As Object
            _myArray(0) = _Id_TipoProducto
			If (Not System.String.IsNullOrEmpty(_TipoProducto)) Then _myArray(1) = _TipoProducto
			
            Return _myArray
        
        End Function

        Private Function GetFieldsForDelete() As Object() Implements IMappeableTipoProductoObject.GetFieldsForDelete
        
            Dim _myArray(0) As Object
            _myArray(0) = _Id_TipoProducto
			
            Return _myArray
        
        End Function


        Private Sub UpdateObjectFromOutputParams(parameters As Object()) Implements IMappeableTipoProductoObject.UpdateObjectFromOutputParams
            ' Update properties from Output parameters
            _Id_TipoProducto = CType(parameters(0), System.Int32)

        End Sub

        Private Function Identifier() As Object() Implements IUniqueIdentifiable.Identifier
            Dim o As TipoProductoObject = Nothing
            If ObjectStateHelper.IsModified(Me) Then
                o = Me.OriginalValue()
            Else
                o = Me
            End If

            Return New Object() {o.Id_TipoProducto}
        End Function


        Public Overloads Function Equals(other As TipoProductoObject) As Boolean Implements IEquatable(Of TipoProductoObject).Equals
            Return UniqueIdentifierHelper.IsSameObject(CType(Me, IUniqueIdentifiable), CType(other, IUniqueIdentifiable))
        End Function


    End Class

    Public Interface IMappeableTipoProductoObject
        Sub HydrateFields( ByVal Id_TipoProducto As System.Int32, _
				 ByVal TipoProducto As System.String)

        Function GetFieldsForInsert() As Object() 

        Function GetFieldsForUpdate() As Object() 

        Function GetFieldsForDelete() As Object()

        Sub UpdateObjectFromOutputParams(ByVal parameters As Object() )
    End Interface

    Public Partial Class TipoProductoObjectList
        Inherits ObjectList(Of TipoProductoObject)
    End Class
End Namespace

Namespace Views
    Partial Public Class TipoProductoObjectListView
        Inherits ObjectListView(Of Objects.TipoProductoObject)

        Sub New(ByVal list As Objects.TipoProductoObjectList)
            MyBase.New(list)
        End Sub
    End Class
End NameSpace


