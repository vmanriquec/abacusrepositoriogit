
'------------------------------------------------------------------------------
' This file was generated by Cooperator Modeler, version 1.3.3.0
' Created: 15/08/2013 - 05:51 p.m.
' This is a partial class file. The other one is registrodevisitasMapper.cs
' You should not modifiy this file, please edit the other partial class file.
'------------------------------------------------------------------------------

Imports System
Imports abacusRules.Entities
Imports abacusRules.Objects
Imports Cooperator.Framework.Data
Imports Cooperator.Framework.Data.Exceptions
Imports Cooperator.Framework.Core
Imports System.Data.Common
Imports System.Reflection
Imports System.Web


Namespace Mappers
    

    Public Partial Class registrodevisitasMapper
        Inherits BaseGateway(Of registrodevisitas, registrodevisitasList)
        Implements IGenericGateway

#Region "Singleton"

        Private Shared _instance As registrodevisitasMapper

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As registrodevisitasMapper
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New registrodevisitasMapper()
                Else
                    Dim inst As registrodevisitasMapper = TryCast(HttpContext.Current.Items("abacusRules.registrodevisitasMapperSingleton"), registrodevisitasMapper)
                    If inst Is Nothing Then
                        inst = New registrodevisitasMapper()
                        HttpContext.Current.Items.Add("abacusRules.registrodevisitasMapperSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function


#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim  s() as String={"Idvisitas"}
            return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return GetType(registrodevisitas)
        End Function


        ''' <summary>
        ''' Return the mapped table name
        ''' </summary>
        Protected Overrides ReadOnly Property TableName() As String 
            Get
                Return "registrodevisitas"
            End Get
        End Property

        ''' <summary>
        ''' Return the registrodevisitasGateway type FullName
        ''' </summary>
        Protected Overrides ReadOnly Property RuleName() As String
            Get
                Return GetType(registrodevisitasMapper).FullName
            End Get
        End Property


        

        

        ''' <summary>
        ''' Assign properties values based on DataReader
        ''' </summary>
        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As registrodevisitas)
            Dim _IdTrabjador As System.Nullable(Of System.Int32) 
If reader.IsDBNull(1) Then 
	 _IdTrabjador = New System.Nullable(Of System.Int32)
Else
	 _IdTrabjador = reader.GetInt32(1)
End If
Dim _idruta As System.Nullable(Of System.Int32) 
If reader.IsDBNull(2) Then 
	 _idruta = New System.Nullable(Of System.Int32)
Else
	 _idruta = reader.GetInt32(2)
End If
Dim _fechavisita As System.Nullable(Of System.DateTime) 
If reader.IsDBNull(3) Then 
	 _fechavisita = New System.Nullable(Of System.DateTime)
Else
	 _fechavisita = reader.GetDateTime(3)
End If
Dim _observaciones As String
If reader.IsDBNull(4) Then 
	 _observaciones = ""
Else
	 _observaciones = reader.GetString(4)
End If
Dim _idtrabajador2 As System.Nullable(Of System.Int32) 
If reader.IsDBNull(5) Then 
	 _idtrabajador2 = New System.Nullable(Of System.Int32)
Else
	 _idtrabajador2 = reader.GetInt32(5)
End If
Dim _rutaString As String
If reader.IsDBNull(6) Then 
	 _rutaString = ""
Else
	 _rutaString = reader.GetString(6)
End If
Dim _TrabajadoresString As String
If reader.IsDBNull(7) Then 
	 _TrabajadoresString = ""
Else
	 _TrabajadoresString = reader.GetString(7)
End If

            Dim registrodevisitas As IMappeableregistrodevisitasObject  = CType(entity, IMappeableregistrodevisitasObject)
            registrodevisitas.HydrateFields(reader.GetInt32(0), _
_IdTrabjador, _
_idruta, _
_fechavisita, _
_observaciones, _
_idtrabajador2, _
_rutaString, _
_TrabajadoresString)
        End Sub

        ''' <summary>
        ''' Get field values to call insertion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForInsert(ByVal entity As registrodevisitas) As Object()
            Dim registrodevisitas As IMappeableregistrodevisitasObject = CType(entity, IMappeableregistrodevisitasObject)
            Return registrodevisitas.GetFieldsForInsert()
        End Function

        ''' <summary>
        ''' Get field values to call update stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForUpdate(ByVal entity As registrodevisitas) As Object()
            Dim registrodevisitas As IMappeableregistrodevisitasObject = CType(entity, IMappeableregistrodevisitasObject)
            Return registrodevisitas.GetFieldsForUpdate()
        End Function

        ''' <summary>
        ''' Get field values to call deletion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForDelete(ByVal entity As registrodevisitas) As Object()
            Dim registrodevisitas As IMappeableregistrodevisitasObject = CType(entity, IMappeableregistrodevisitasObject)
            Return registrodevisitas.GetFieldsForDelete()
        End Function

        ''' <summary>
        ''' Raised after insert and update. Update properties from Output parameters
        ''' </summary>
        Protected Overrides Sub UpdateObjectFromOutputParams(ByVal entity As registrodevisitas, ByVal parameters As Object())
            ' Update properties from Output parameters
            CType(entity, IMappeableregistrodevisitasObject).UpdateObjectFromOutputParams(parameters)
        End Sub

        ''' <summary>
        ''' StoredProceduresPrefix, for example: coop_
        ''' </summary>
        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function


        


        

        ''' <summary>
        ''' Complete the aggregations for this entity. 
        ''' </summary>
        Protected Overrides Sub CompleteEntity(ByVal entity As registrodevisitas)
            Dim rutaEntity As Objects.rutaObject = Nothing 'Lazy load
Dim TrabajadoresEntity As Objects.TrabajadoresObject = Nothing 'Lazy load
            CType(entity, IMappeableregistrodevisitas).CompleteEntity(rutaEntity, TrabajadoresEntity)
        End Sub


        # Region "CRUD Operations"
        

        # End Region
        
        ''' <summary>
        ''' Delete children for this entity
        ''' </summary>
        Public Sub DeleteChildren(ByVal transaction As DbTransaction, ByVal entity As IUniqueIdentifiable)
                        
        End Sub


          



        ''' <summary>
        ''' Get a registrodevisitas by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As registrodevisitas
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a registrodevisitasList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As registrodevisitasList
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetOne(Idvisitas As System.Int32) As registrodevisitas
            Return MyBase.GetOne(New registrodevisitas(Idvisitas))
        End Function

        

        ' GetOne By Objects and Params
            

        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByruta(idruta As System.Int32) As registrodevisitasList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "registrodevisitas_GetByruta", idruta)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByruta(ByVal ruta As IUniqueIdentifiable) As registrodevisitasList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "registrodevisitas_GetByruta", ruta.Identifier())
        End Function

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByTrabajadores(IdTrabjador As System.Int32) As registrodevisitasList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "registrodevisitas_GetByTrabajadores", IdTrabjador)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByTrabajadores(ByVal Trabajadores As IUniqueIdentifiable) As registrodevisitasList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "registrodevisitas_GetByTrabajadores", Trabajadores.Identifier())
        End Function

    


        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByruta(ByVal transaction As DbTransaction,idruta As System.Int32) As registrodevisitasList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "registrodevisitas_GetByruta", idruta)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByruta(ByVal transaction As DbTransaction, ByVal ruta As IUniqueIdentifiable) As registrodevisitasList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "registrodevisitas_GetByruta", ruta.Identifier())
        End Function

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByTrabajadores(ByVal transaction As DbTransaction,IdTrabjador As System.Int32) As registrodevisitasList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "registrodevisitas_GetByTrabajadores", IdTrabjador)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByTrabajadores(ByVal transaction As DbTransaction, ByVal Trabajadores As IUniqueIdentifiable) As registrodevisitasList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "registrodevisitas_GetByTrabajadores", Trabajadores.Identifier())
        End Function

    

        





        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(Idvisitas As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "registrodevisitas_Delete", Idvisitas)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(ByVal transaction As DbTransaction ,Idvisitas As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "registrodevisitas_Delete", Idvisitas)
        End Sub

        ' Delete By Objects and Params
            



        

    

    

    

    

    

    

    

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByruta(idruta As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "registrodevisitas_DeleteByruta", idruta)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByruta(ByVal transaction As DbTransaction , idruta As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "registrodevisitas_DeleteByruta", idruta)
        End Sub


        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByruta(ByVal ruta As IUniqueIdentifiable)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "registrodevisitas_DeleteByruta", ruta.Identifier())
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByruta(ByVal transaction As DbTransaction, ByVal ruta As IUniqueIdentifiable)        
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "registrodevisitas_DeleteByruta", ruta.Identifier())
        End Sub

        

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByTrabajadores(IdTrabjador As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "registrodevisitas_DeleteByTrabajadores", IdTrabjador)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByTrabajadores(ByVal transaction As DbTransaction , IdTrabjador As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "registrodevisitas_DeleteByTrabajadores", IdTrabjador)
        End Sub


        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByTrabajadores(ByVal Trabajadores As IUniqueIdentifiable)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "registrodevisitas_DeleteByTrabajadores", Trabajadores.Identifier())
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByTrabajadores(ByVal transaction As DbTransaction, ByVal Trabajadores As IUniqueIdentifiable)        
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "registrodevisitas_DeleteByTrabajadores", Trabajadores.Identifier())
        End Sub

        

    


        'Database Queries 
        






        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace


Namespace Wrappers
    ''' <summary>
    ''' 
    ''' </summary>
    Public Class registrodevisitasMapperWrapper

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            return Instance().GetPKPropertiesNames()
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return Instance().GetMappingType()
        End Function


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function Instance() As abacusRules.Mappers.registrodevisitasMapper
            Return abacusRules.Mappers.registrodevisitasMapper.Instance()
        End Function

        
        ''' <summary>
        ''' Get a registrodevisitas Entity by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetOne(ByVal Idvisitas As System.Int32) As Entities.registrodevisitas         
            Return Instance().GetOne( Idvisitas)
        End Function
        

        ' GetBy Objects and Params
            

        

        ''' <summary>
        ''' Get a registrodevisitasList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByruta( ByVal idruta As System.Int32) As Entities.registrodevisitasList 
            Return Instance().GetByruta(idruta)
        End Function

        ''' <summary>
        ''' Get a registrodevisitasList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByruta(ByVal  ruta As IUniqueIdentifiable) As Entities.registrodevisitasList
            Return Instance().GetByruta(ruta)
        End Function

    

        ''' <summary>
        ''' Get a registrodevisitasList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByTrabajadores( ByVal IdTrabjador As System.Int32) As Entities.registrodevisitasList 
            Return Instance().GetByTrabajadores(IdTrabjador)
        End Function

        ''' <summary>
        ''' Get a registrodevisitasList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByTrabajadores(ByVal  Trabajadores As IUniqueIdentifiable) As Entities.registrodevisitasList
            Return Instance().GetByTrabajadores(Trabajadores)
        End Function

    

        ''' <summary>
        ''' GetAll registrodevisitas 
        ''' </summary>
        Public Function GetAll() As Entities.registrodevisitasList
            Return Instance().GetAll()
        End Function

        
        

        ''' <summary>
        ''' Delete children for registrodevisitas
        ''' </summary>
        Public Sub DeleteChildren(ByVal transaction As DbTransaction, ByVal entity As registrodevisitas)
            Instance().DeleteChildren(transaction, entity)
        End Sub

        


            

        

        ''' <summary>
        ''' Delete registrodevisitas by ruta
        ''' </summary>
        Public Sub DeleteByruta( ByVal idruta As System.Int32)
            Instance().DeleteByruta(idruta)
        End Sub

        ''' <summary>
        ''' Delete registrodevisitas by ruta
        ''' </summary>
        Public Sub DeleteByruta(ByVal ruta As IUniqueIdentifiable )
            Instance().DeleteByruta(ruta)
        End Sub

    

        ''' <summary>
        ''' Delete registrodevisitas by Trabajadores
        ''' </summary>
        Public Sub DeleteByTrabajadores( ByVal IdTrabjador As System.Int32)
            Instance().DeleteByTrabajadores(IdTrabjador)
        End Sub

        ''' <summary>
        ''' Delete registrodevisitas by Trabajadores
        ''' </summary>
        Public Sub DeleteByTrabajadores(ByVal Trabajadores As IUniqueIdentifiable )
            Instance().DeleteByTrabajadores(Trabajadores)
        End Sub

    

        ''' <summary>
        ''' Delete registrodevisitas 
        ''' </summary>
        Public Overloads Sub Delete(ByVal Idvisitas As System.Int32)
            Instance().Delete(Idvisitas)
        End Sub

        ''' <summary>
        ''' Delete registrodevisitas 
        ''' </summary>
        Public Overloads Sub Delete(ByVal entity As Entities.registrodevisitas)
            Instance().Delete(entity)
        End Sub

        ''' <summary>
        ''' Save registrodevisitas  
        ''' </summary>
        Public Overloads Sub Save(ByVal entity As Entities.registrodevisitas)
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert registrodevisitas 
        ''' </summary>
        Public Overloads Sub Insert(ByVal entity As Entities.registrodevisitas)
            Instance().Insert(entity)
        End Sub

        ''' <summary>
        ''' Save registrodevisitas 
        ''' </summary>
        Public Overloads Sub Save(ByVal Idvisitas As System.Int32, ByVal IdTrabjador As System.Int32, ByVal idruta As System.Int32, ByVal fechavisita As System.DateTime, ByVal observaciones As System.String, ByVal idtrabajador2 As System.Int32, ByVal rutaString As System.String, ByVal TrabajadoresString As System.String)
            Dim entity As Entities.registrodevisitas = Instance().GetOne(Idvisitas)
            If entity Is Nothing Then
                Throw New ApplicationException(String.Format("Entity not found. IUniqueIdentifiable values: {0} = {1}", "Idvisitas", Idvisitas))
            End If

            entity.IdTrabjador = IdTrabjador
            entity.idruta = idruta
            entity.fechavisita = fechavisita
            entity.observaciones = observaciones
            entity.idtrabajador2 = idtrabajador2
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert registrodevisitas
        ''' </summary>
        Public Overloads Sub Insert(ByVal IdTrabjador As System.Int32, ByVal idruta As System.Int32, ByVal fechavisita As System.DateTime, ByVal observaciones As System.String, ByVal idtrabajador2 As System.Int32)
            Dim entity As Entities.registrodevisitas = New Entities.registrodevisitas

            entity.IdTrabjador = IdTrabjador
            entity.idruta = idruta
            entity.fechavisita = fechavisita
            entity.observaciones = observaciones
            entity.idtrabajador2 = idtrabajador2
            Instance().Insert(entity)
        End Sub

        

        'Database Queries 
        


    End Class
End Namespace


Namespace Loaders

    ''' <summary>
    ''' 
    ''' </summary>
    Partial Public Class registrodevisitasLoader(Of T As {registrodevisitas, New})
        Inherits BaseLoader(Of T, registrodevisitas, ObjectList(Of T))
        Implements IGenericGateway



#Region "Singleton"

        Private Shared _instance As registrodevisitasLoader(Of T)

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As registrodevisitasLoader(Of T)
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New registrodevisitasLoader(Of T)
                Else
                    Dim inst As registrodevisitasLoader(Of T) = TryCast(HttpContext.Current.Items("abacusRules.registrodevisitasLoaderSingleton"), registrodevisitasLoader(Of T))
                    If inst Is Nothing Then
                        inst = New registrodevisitasLoader(Of T)
                        HttpContext.Current.Items.Add("abacusRules.registrodevisitasLoaderSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function

#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim s() as String={"Idvisitas"}
            Return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            Return GetType(registrodevisitas)
        End Function


        Protected Overrides ReadOnly Property TableName As String 
            Get
                Return "registrodevisitas"
            End Get
        End Property

        

        


        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As registrodevisitas)
            Dim _IdTrabjador As System.Nullable(Of System.Int32) 
If reader.IsDBNull(1) Then 
	 _IdTrabjador = New System.Nullable(Of System.Int32)
Else
	 _IdTrabjador = reader.GetInt32(1)
End If
Dim _idruta As System.Nullable(Of System.Int32) 
If reader.IsDBNull(2) Then 
	 _idruta = New System.Nullable(Of System.Int32)
Else
	 _idruta = reader.GetInt32(2)
End If
Dim _fechavisita As System.Nullable(Of System.DateTime) 
If reader.IsDBNull(3) Then 
	 _fechavisita = New System.Nullable(Of System.DateTime)
Else
	 _fechavisita = reader.GetDateTime(3)
End If
Dim _observaciones As String
If reader.IsDBNull(4) Then 
	 _observaciones = ""
Else
	 _observaciones = reader.GetString(4)
End If
Dim _idtrabajador2 As System.Nullable(Of System.Int32) 
If reader.IsDBNull(5) Then 
	 _idtrabajador2 = New System.Nullable(Of System.Int32)
Else
	 _idtrabajador2 = reader.GetInt32(5)
End If
Dim _rutaString As String
If reader.IsDBNull(6) Then 
	 _rutaString = ""
Else
	 _rutaString = reader.GetString(6)
End If
Dim _TrabajadoresString As String
If reader.IsDBNull(7) Then 
	 _TrabajadoresString = ""
Else
	 _TrabajadoresString = reader.GetString(7)
End If

            Dim registrodevisitas As IMappeableregistrodevisitasObject  = CType(entity, IMappeableregistrodevisitasObject)
            registrodevisitas.HydrateFields(reader.GetInt32(0), _
_IdTrabjador, _
_idruta, _
_fechavisita, _
_observaciones, _
_idtrabajador2, _
_rutaString, _
_TrabajadoresString)
        End Sub


        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function

        

        

        ' Complete the aggregations for this entity.         
        Protected Overrides Sub CompleteEntity(ByVal entity As t)
            Dim rutaEntity As Objects.rutaObject = Nothing 'Lazy load
Dim TrabajadoresEntity As Objects.TrabajadoresObject = Nothing 'Lazy load
            CType(entity, IMappeableregistrodevisitas).CompleteEntity(rutaEntity, TrabajadoresEntity)
        End Sub

        


        ''' <summary>
        ''' Get a registrodevisitas by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As t
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a registrodevisitasList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As ObjectList(Of T)
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' GetOne By Params
        ''' </summary>
        Public Overloads Function GetOne(Idvisitas As System.Int32) As t
            Return MyBase.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "registrodevisitas_GetOne", Idvisitas)
        End Function
        


        ' GetOne By Objects and Params
            

        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByruta(idruta As System.Int32) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "registrodevisitas_GetByruta", idruta)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByruta(ByVal ruta As IUniqueIdentifiable) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "registrodevisitas_GetByruta", ruta.Identifier())
        End Function

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByTrabajadores(IdTrabjador As System.Int32) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "registrodevisitas_GetByTrabajadores", IdTrabjador)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByTrabajadores(ByVal Trabajadores As IUniqueIdentifiable) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "registrodevisitas_GetByTrabajadores", Trabajadores.Identifier())
        End Function

    


        'Database Queries 
        


        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace




