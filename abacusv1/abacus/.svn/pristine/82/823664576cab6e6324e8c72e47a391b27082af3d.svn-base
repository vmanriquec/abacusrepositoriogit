
'------------------------------------------------------------------------------
' This file was generated by Cooperator Modeler, version 1.3.3.0
' Created: 15/08/2013 - 05:51 p.m.
' This is a partial class file. The other one is FacturaDetEntity.cs
' You should not modifiy this file, please edit the other partial class file.
'------------------------------------------------------------------------------

Imports abacusRules.Objects


Imports Cooperator.Framework.Core
Imports Cooperator.Framework.Core.LazyLoad
Imports System

Namespace Entities

    Public Partial Class FacturaDet
        Inherits Objects.FacturaDetObject
        Implements IMappeableFacturaDet
        Implements IEquatable(Of FacturaDet)
        Implements ICloneable

        #Region "Ctor"

        Public Sub New()
            MyBase.New()
            
        End Sub

        
        Public Sub New (ByVal IdFactDet As System.Int32)
            MyBase.New()

			_IdFactDet = IdFactDet

            
            Call Initialized()
        End Sub
        

        
        Public Sub New(ByVal IdFactDet As System.Int32, _
			ByVal IdFactura As System.Nullable(Of System.Int32), _
			ByVal Codigo As System.Nullable(Of System.Int32), _
			ByVal Producto As System.Nullable(Of System.Int32), _
			ByVal Cantidad As System.Nullable(Of System.Int32), _
			ByVal PUnitario As System.Nullable(Of System.Decimal), _
			ByVal Dscto As System.Nullable(Of System.Decimal), _
			ByVal upsize_ts As System.Nullable(Of System.DateTime), _
			ByVal FacturaString As System.String)
            MyBase.New()

			_IdFactDet = IdFactDet
			_IdFactura = IdFactura
			_Codigo = Codigo
			_Producto = Producto
			_Cantidad = Cantidad
			_PUnitario = PUnitario
			_Dscto = Dscto
			_upsize_ts = upsize_ts
			_FacturaString = FacturaString

            
            Call Initialized()
        End Sub
        
        #End Region

        #Region "Fields"

        Protected  _FacturaEntity As Objects.FacturaObject

        #End Region

        #Region "Properties"
        
Dim _FacturaEntityFetched As Boolean
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overridable Property FacturaEntity As Objects.FacturaObject
            Get
                If _FacturaEntity Is Nothing  AndAlso Me.IdFactura.HasValue AndAlso Not _FacturaEntityFetched  Then
_FacturaEntityFetched = True
Dim _FacturaEntityTemp As Objects.FacturaObject = New Objects.FacturaObject(Me.IdFactura.Value) 
Dim lazyProvider As ILazyProvider = LazyProviderFactory.Get(GetType(Objects.FacturaObject))
 _FacturaEntity = CType(lazyProvider.GetEntity(GetType(Objects.FacturaObject), _FacturaEntityTemp), Objects.FacturaObject)
End If

                Return _FacturaEntity
            End Get
            Set (value As Objects.FacturaObject)
                MyBase.PropertyModified()
                _FacturaEntity = value
                If value IsNot Nothing Then
   _IdFactura = value.IdFactura
If value.SFactura IsNot Nothing Then 
_FacturaString = value.SFactura.ToString() 
Else
    _FacturaString = "" 
End If

Else 
   _IdFactura = Nothing
_FacturaString = ""
End If

                            CorrectDescriptionField(value)


            End Set
        End Property
        
        #End Region

        ''' <summary>
        ''' Returns de original value of entity since was created or restored. 
        ''' </summary>
        Public Shadows Function OriginalValue() As FacturaDet 
                Return CType(MyBase.OriginalValue, FacturaDet)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Protected Overrides Function Clone() As Object 
            Dim newObject As FacturaDet 
            

            newObject = CType(Me.MemberwiseClone(), FacturaDet)
            ' Entities
                         
            If Me._FacturaEntity IsNot Nothing Then
                newObject._FacturaEntity = CType(CType(Me._FacturaEntity, ICloneable).Clone(),Objects.FacturaObject)
            End If
            
            ' Colections
            
            ' OriginalValue
            Dim newOriginalValue As FacturaDet
            If MyBase.InternalOriginalValue IsNot Nothing Then
                newOriginalValue = CType(Me.OriginalValue().MemberwiseClone(), FacturaDet)
                ' Entities
                             
                If Me.OriginalValue()._FacturaEntity IsNot Nothing Then
                    newOriginalValue._FacturaEntity = CType(CType(Me.OriginalValue()._FacturaEntity, ICloneable).Clone(), Objects.FacturaObject)
                End If
                
                ' Colections
                            
                newObject.InternalOriginalValue = newOriginalValue

            End If
            Return newObject
        End Function



        Private Sub CompleteEntity(FacturaEntity As Objects.FacturaObject) Implements IMappeableFacturaDet.CompleteEntity
        _FacturaEntity = FacturaEntity
        End Sub

        
        Private Function IsFacturaEntityNull() As Boolean Implements IMappeableFacturaDet.IsFacturaEntityNull
            Return IsNothing(_FacturaEntity)
        End Function
        

        Private Sub SetFKValuesForChilds(entity As FacturaDet) Implements IMappeableFacturaDet.SetFKValuesForChilds
                
        End Sub

        Public Overloads Function Equals(other As FacturaDet) As Boolean Implements IEquatable(Of FacturaDet).Equals
            Return UniqueIdentifierHelper.IsSameObject(CType(Me, IUniqueIdentifiable), CType(other, IUniqueIdentifiable))
        End Function

    End Class

    Public Interface IMappeableFacturaDet
        Sub CompleteEntity(FacturaEntity As Objects.FacturaObject)
        
        Function IsFacturaEntityNull() As Boolean
        
        Sub SetFKValuesForChilds(entity As FacturaDet )
    End Interface

    Public Partial Class FacturaDetList
        Inherits ObjectList(Of FacturaDet)    
    End Class
End Namespace

Namespace Views
    Partial Public Class FacturaDetListView
        Inherits ObjectListView(Of Entities.FacturaDet)

        Sub New(ByVal list As Entities.FacturaDetList)
            MyBase.New(list)
        End Sub
    End Class
End NameSpace


