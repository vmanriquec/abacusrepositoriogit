
'------------------------------------------------------------------------------
' This file was generated by Cooperator Modeler, version 1.3.3.0
' Created: 15/08/2013 - 05:51 p.m.
' This is a partial class file. The other one is KardexGateway.vb
' You should not modifiy this file, please edit the other partial class file.
'------------------------------------------------------------------------------

Imports System
Imports abacusRules.Objects
Imports Cooperator.Framework.Data
Imports Cooperator.Framework.Data.Exceptions
Imports Cooperator.Framework.Core
Imports System.Data.Common
Imports System.Reflection
Imports System.Web

Namespace Gateways
        
    Public Partial Class KardexGateway 
        Inherits BaseGateway(Of KardexObject, KardexObjectList)
        Implements IGenericGateway

#Region "Singleton"

        Private Shared _instance As KardexGateway

        Private Sub New()
        End Sub

        Public Shared Function Instance() As KardexGateway
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New KardexGateway()
                Else
                    Dim inst As KardexGateway = TryCast(HttpContext.Current.Items("abacusRules.KardexGatewaySingleton"), KardexGateway)
                    If inst Is Nothing Then
                        inst = New KardexGateway()
                        HttpContext.Current.Items.Add("abacusRules.KardexGatewaySingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function

#End Region

        ''' <summary>
        ''' Return the mapped table name
        ''' </summary>
        Protected Overrides ReadOnly Property TableName() As String
            Get
                Return "Kardex"
            End Get
        End Property

        ''' <summary>
        ''' Return the KardexGateway type FullName
        ''' </summary>
        Protected Overrides ReadOnly Property RuleName() As String
            Get
                Return GetType(KardexGateway ).FullName
            End Get
        End Property


        

        


        ''' <summary>
        ''' Assign properties values based on DataReader
        ''' </summary>
        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As KardexObject )
            Dim _IdSalidasP As System.Nullable(Of System.Int32) 
If reader.IsDBNull(1) Then 
	 _IdSalidasP = New System.Nullable(Of System.Int32)
Else
	 _IdSalidasP = reader.GetInt32(1)
End If
Dim _IdIngresos As System.Nullable(Of System.Int32) 
If reader.IsDBNull(2) Then 
	 _IdIngresos = New System.Nullable(Of System.Int32)
Else
	 _IdIngresos = reader.GetInt32(2)
End If
Dim _IdProducto As System.Nullable(Of System.Int32) 
If reader.IsDBNull(3) Then 
	 _IdProducto = New System.Nullable(Of System.Int32)
Else
	 _IdProducto = reader.GetInt32(3)
End If
Dim _CodProducto As String
If reader.IsDBNull(4) Then 
	 _CodProducto = ""
Else
	 _CodProducto = reader.GetString(4)
End If
Dim _Producto As String
If reader.IsDBNull(5) Then 
	 _Producto = ""
Else
	 _Producto = reader.GetString(5)
End If
Dim _Lote As String
If reader.IsDBNull(6) Then 
	 _Lote = ""
Else
	 _Lote = reader.GetString(6)
End If
Dim _FechaK As System.Nullable(Of System.DateTime) 
If reader.IsDBNull(7) Then 
	 _FechaK = New System.Nullable(Of System.DateTime)
Else
	 _FechaK = reader.GetDateTime(7)
End If
Dim _SerieK As String
If reader.IsDBNull(8) Then 
	 _SerieK = ""
Else
	 _SerieK = reader.GetString(8)
End If
Dim _NumeroK As String
If reader.IsDBNull(9) Then 
	 _NumeroK = ""
Else
	 _NumeroK = reader.GetString(9)
End If
Dim _CantidadK As System.Nullable(Of System.Decimal) 
If reader.IsDBNull(10) Then 
	 _CantidadK = New System.Nullable(Of System.Decimal)
Else
	 _CantidadK = reader.GetDecimal(10)
End If
Dim _CUnitarioK As System.Nullable(Of System.Decimal) 
If reader.IsDBNull(11) Then 
	 _CUnitarioK = New System.Nullable(Of System.Decimal)
Else
	 _CUnitarioK = reader.GetDecimal(11)
End If
Dim _IdSalida As System.Nullable(Of System.Int32) 
If reader.IsDBNull(12) Then 
	 _IdSalida = New System.Nullable(Of System.Int32)
Else
	 _IdSalida = reader.GetInt32(12)
End If
Dim _CliProv As System.Nullable(Of System.Double) 
If reader.IsDBNull(13) Then 
	 _CliProv = New System.Nullable(Of System.Double)
Else
	 _CliProv = reader.GetFloat(13)
End If
Dim _Tienda As System.Nullable(Of System.Int32) 
If reader.IsDBNull(14) Then 
	 _Tienda = New System.Nullable(Of System.Int32)
Else
	 _Tienda = reader.GetInt32(14)
End If
Dim _upsize_ts As System.Nullable(Of System.DateTime) 
If reader.IsDBNull(15) Then 
	 _upsize_ts = New System.Nullable(Of System.DateTime)
Else
	 _upsize_ts = reader.GetDateTime(15)
End If
Dim _IngresosString As String
If reader.IsDBNull(16) Then 
	 _IngresosString = ""
Else
	 _IngresosString = reader.GetString(16)
End If
Dim _ProductosString As String
If reader.IsDBNull(17) Then 
	 _ProductosString = ""
Else
	 _ProductosString = reader.GetString(17)
End If
Dim _SalidasString As String
If reader.IsDBNull(18) Then 
	 _SalidasString = ""
Else
	 _SalidasString = reader.GetString(18)
End If

            Dim Kardex As IMappeableKardexObject  = CType(entity, IMappeableKardexObject)
            Kardex.HydrateFields(reader.GetInt32(0), _
_IdSalidasP, _
_IdIngresos, _
_IdProducto, _
_CodProducto, _
_Producto, _
_Lote, _
_FechaK, _
_SerieK, _
_NumeroK, _
_CantidadK, _
_CUnitarioK, _
_IdSalida, _
_CliProv, _
_Tienda, _
_upsize_ts, _
_IngresosString, _
_ProductosString, _
_SalidasString)
            CType(entity, IObject).State = ObjectState.Restored
        End Sub

        ''' <summary>
        ''' Get field values to call insertion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForInsert(ByVal entity As KardexObject) As Object()
            Dim Kardex As IMappeableKardexObject = CType(entity, IMappeableKardexObject)
            Return Kardex.GetFieldsForInsert()
        End Function

        ''' <summary>
        ''' Get field values to call update stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForUpdate(ByVal entity As KardexObject) As Object()
            Dim Kardex As IMappeableKardexObject = CType(entity, IMappeableKardexObject)
            Return Kardex.GetFieldsForUpdate()
        End Function

        ''' <summary>
        ''' Get field values to call deletion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForDelete(ByVal entity As KardexObject) As Object()
            Dim Kardex As IMappeableKardexObject = CType(entity, IMappeableKardexObject)
            Return Kardex.GetFieldsForDelete()
        End Function

        ''' <summary>
        ''' Raised after insert and update. Update properties from Output parameters
        ''' </summary>
        Protected Overrides Sub UpdateObjectFromOutputParams(ByVal row As KardexObject, parameters As Object())
            ' Update properties from Output parameters
            CType(row, IMappeableKardexObject).UpdateObjectFromOutputParams(parameters)
            CType(row, IObject).State = ObjectState.Restored
        End Sub

        ''' <summary>
        ''' StoredProceduresPrefix, for example: coop_
        ''' </summary>
        Protected Overrides Function StoredProceduresPrefix() As String
            Return "coop_"
        End Function


        ''' <summary>
        ''' Get a KardexObject by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As KardexObject 
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a KardexObjectList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As KardexObjectList 
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function



        ''' <summary>
        ''' Get a KardexObject by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetOne(ByVal IdKardexT As System.Int32) As KardexObject         
            Return MyBase.GetOne(New KardexObject(IdKardexT))
        End Function

            


        
        ''' <summary>
        ''' Get a KardexObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByIngresos(ByVal transaction As DbTransaction, ByVal IdIngresos As System.Int32) As KardexObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Kardex_GetByIngresos", IdIngresos)
        End Function

        ''' <summary>
        ''' Get a KardexObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByIngresos(ByVal transaction As DbTransaction, Ingresos As IUniqueIdentifiable) As KardexObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Kardex_GetByIngresos", Ingresos.Identifier())
        End Function
    
        ''' <summary>
        ''' Get a KardexObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByProductos(ByVal transaction As DbTransaction, ByVal IdProducto As System.Int32) As KardexObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Kardex_GetByProductos", IdProducto)
        End Function

        ''' <summary>
        ''' Get a KardexObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByProductos(ByVal transaction As DbTransaction, Productos As IUniqueIdentifiable) As KardexObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Kardex_GetByProductos", Productos.Identifier())
        End Function
    
        ''' <summary>
        ''' Get a KardexObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetBySalidas(ByVal transaction As DbTransaction, ByVal IdSalidasP As System.Int32) As KardexObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Kardex_GetBySalidas", IdSalidasP)
        End Function

        ''' <summary>
        ''' Get a KardexObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetBySalidas(ByVal transaction As DbTransaction, Salidas As IUniqueIdentifiable) As KardexObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Kardex_GetBySalidas", Salidas.Identifier())
        End Function
    


        
        ''' <summary>
        ''' Get a KardexObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByIngresos(ByVal IdIngresos As System.Int32) As KardexObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Kardex_GetByIngresos", IdIngresos)
        End Function

        ''' <summary>
        ''' Get a KardexObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByIngresos(Ingresos As IUniqueIdentifiable) As KardexObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Kardex_GetByIngresos", Ingresos.Identifier())
        End Function
    
        ''' <summary>
        ''' Get a KardexObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByProductos(ByVal IdProducto As System.Int32) As KardexObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Kardex_GetByProductos", IdProducto)
        End Function

        ''' <summary>
        ''' Get a KardexObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByProductos(Productos As IUniqueIdentifiable) As KardexObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Kardex_GetByProductos", Productos.Identifier())
        End Function
    
        ''' <summary>
        ''' Get a KardexObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetBySalidas(ByVal IdSalidasP As System.Int32) As KardexObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Kardex_GetBySalidas", IdSalidasP)
        End Function

        ''' <summary>
        ''' Get a KardexObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetBySalidas(Salidas As IUniqueIdentifiable) As KardexObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Kardex_GetBySalidas", Salidas.Identifier())
        End Function
    

        
        ''' <summary>
        ''' Delete Kardex 
        ''' </summary>
        Public Overloads Sub Delete(ByVal IdKardexT As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Kardex_Delete", IdKardexT)
        End Sub

        ''' <summary>
        ''' Delete Kardex
        ''' </summary>
        Public Overloads Sub Delete(transaction As DbTransaction , ByVal IdKardexT As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Kardex_Delete", IdKardexT)
        End Sub

            



        

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

        ''' <summary>
        ''' Delete Kardex By Ingresos
        ''' </summary>
        Public Overloads Sub DeleteByIngresos(ByVal IdIngresos As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Kardex_DeleteByIngresos", IdIngresos)
        End Sub

        ''' <summary>
        ''' Delete Kardex By Ingresos
        ''' </summary>
        Public Overloads Sub DeleteByIngresos(ByVal transaction As DbTransaction , ByVal IdIngresos As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Kardex_DeleteByIngresos", IdIngresos)
        End Sub

        ''' <summary>
        ''' Delete Kardex By Ingresos
        ''' </summary>
        Public Overloads Sub DeleteByIngresos(ByVal Ingresos As IUniqueIdentifiable )
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Kardex_DeleteByIngresos", Ingresos.Identifier())
        End Sub

        ''' <summary>
        ''' Delete Kardex By Ingresos
        ''' </summary>
        Public Overloads Sub DeleteByIngresos(ByVal transaction As DbTransaction , ByVal Ingresos As IUniqueIdentifiable)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Kardex_DeleteByIngresos", Ingresos.Identifier())
        End Sub

        

    

        ''' <summary>
        ''' Delete Kardex By Productos
        ''' </summary>
        Public Overloads Sub DeleteByProductos(ByVal IdProducto As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Kardex_DeleteByProductos", IdProducto)
        End Sub

        ''' <summary>
        ''' Delete Kardex By Productos
        ''' </summary>
        Public Overloads Sub DeleteByProductos(ByVal transaction As DbTransaction , ByVal IdProducto As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Kardex_DeleteByProductos", IdProducto)
        End Sub

        ''' <summary>
        ''' Delete Kardex By Productos
        ''' </summary>
        Public Overloads Sub DeleteByProductos(ByVal Productos As IUniqueIdentifiable )
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Kardex_DeleteByProductos", Productos.Identifier())
        End Sub

        ''' <summary>
        ''' Delete Kardex By Productos
        ''' </summary>
        Public Overloads Sub DeleteByProductos(ByVal transaction As DbTransaction , ByVal Productos As IUniqueIdentifiable)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Kardex_DeleteByProductos", Productos.Identifier())
        End Sub

        

    

        ''' <summary>
        ''' Delete Kardex By Salidas
        ''' </summary>
        Public Overloads Sub DeleteBySalidas(ByVal IdSalidasP As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Kardex_DeleteBySalidas", IdSalidasP)
        End Sub

        ''' <summary>
        ''' Delete Kardex By Salidas
        ''' </summary>
        Public Overloads Sub DeleteBySalidas(ByVal transaction As DbTransaction , ByVal IdSalidasP As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Kardex_DeleteBySalidas", IdSalidasP)
        End Sub

        ''' <summary>
        ''' Delete Kardex By Salidas
        ''' </summary>
        Public Overloads Sub DeleteBySalidas(ByVal Salidas As IUniqueIdentifiable )
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Kardex_DeleteBySalidas", Salidas.Identifier())
        End Sub

        ''' <summary>
        ''' Delete Kardex By Salidas
        ''' </summary>
        Public Overloads Sub DeleteBySalidas(ByVal transaction As DbTransaction , ByVal Salidas As IUniqueIdentifiable)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Kardex_DeleteBySalidas", Salidas.Identifier())
        End Sub

        

    


        'Database Queries 
        



        #Region "IGenericGateway"

        Private Function GetOne2(identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GeyByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class
End Namespace




