
        
'------------------------------------------------------------------------------
' This file was generated by Cooperator Modeler, version 1.3.3.0
' Created: 15/08/2013 - 05:51 p.m.
' This is a partial class file. The other one is CategoriasEntity.cs
' You should not modifiy this file, please edit the other partial class file.
'------------------------------------------------------------------------------

Imports abacusRules.Objects


Imports Cooperator.Framework.Core
Imports Cooperator.Framework.Core.LazyLoad
Imports System

Namespace Entities

    Public Partial Class Categorias
        Inherits Objects.CategoriasObject
        Implements IMappeableCategorias
        Implements IEquatable(Of Categorias)
        Implements ICloneable

        #Region "Ctor"

        Public Sub New()
            MyBase.New()
            
        End Sub

        
        Public Sub New (ByVal Id_Categoria As System.Int32)
            MyBase.New()

			_Id_Categoria = Id_Categoria

            
            Call Initialized()
        End Sub
        

        
        Public Sub New(ByVal Id_Categoria As System.Int32, _
			ByVal Categoria As System.String, _
			ByVal IdFamilia As System.Nullable(Of System.Int32), _
			ByVal FamiliasString As System.String)
            MyBase.New()

			_Id_Categoria = Id_Categoria
			_Categoria = Categoria
			_IdFamilia = IdFamilia
			_FamiliasString = FamiliasString

            
            Call Initialized()
        End Sub
        
        #End Region

        #Region "Fields"

        Protected  _FamiliasEntity As Objects.FamiliasObject

        #End Region

        #Region "Properties"
        
Dim _FamiliasEntityFetched As Boolean
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overridable Property FamiliasEntity As Objects.FamiliasObject
            Get
                If _FamiliasEntity Is Nothing  AndAlso Me.IdFamilia.HasValue AndAlso Not _FamiliasEntityFetched  Then
_FamiliasEntityFetched = True
Dim _FamiliasEntityTemp As Objects.FamiliasObject = New Objects.FamiliasObject(Me.IdFamilia.Value) 
Dim lazyProvider As ILazyProvider = LazyProviderFactory.Get(GetType(Objects.FamiliasObject))
 _FamiliasEntity = CType(lazyProvider.GetEntity(GetType(Objects.FamiliasObject), _FamiliasEntityTemp), Objects.FamiliasObject)
End If

                Return _FamiliasEntity
            End Get
            Set (value As Objects.FamiliasObject)
                MyBase.PropertyModified()
                _FamiliasEntity = value
                If value IsNot Nothing Then
   _IdFamilia = value.IdFamilia
If value.Familia IsNot Nothing Then 
_FamiliasString = value.Familia.ToString() 
Else
    _FamiliasString = "" 
End If

Else 
   _IdFamilia = Nothing
_FamiliasString = ""
End If

                            CorrectDescriptionField(value)


            End Set
        End Property
        
        #End Region

        ''' <summary>
        ''' Returns de original value of entity since was created or restored. 
        ''' </summary>
        Public Shadows Function OriginalValue() As Categorias 
                Return CType(MyBase.OriginalValue, Categorias)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Protected Overrides Function Clone() As Object 
            Dim newObject As Categorias 
            

            newObject = CType(Me.MemberwiseClone(), Categorias)
            ' Entities
                         
            If Me._FamiliasEntity IsNot Nothing Then
                newObject._FamiliasEntity = CType(CType(Me._FamiliasEntity, ICloneable).Clone(),Objects.FamiliasObject)
            End If
            
            ' Colections
            
            ' OriginalValue
            Dim newOriginalValue As Categorias
            If MyBase.InternalOriginalValue IsNot Nothing Then
                newOriginalValue = CType(Me.OriginalValue().MemberwiseClone(), Categorias)
                ' Entities
                             
                If Me.OriginalValue()._FamiliasEntity IsNot Nothing Then
                    newOriginalValue._FamiliasEntity = CType(CType(Me.OriginalValue()._FamiliasEntity, ICloneable).Clone(), Objects.FamiliasObject)
                End If
                
                ' Colections
                            
                newObject.InternalOriginalValue = newOriginalValue

            End If
            Return newObject
        End Function



        Private Sub CompleteEntity(FamiliasEntity As Objects.FamiliasObject) Implements IMappeableCategorias.CompleteEntity
        _FamiliasEntity = FamiliasEntity
        End Sub

        
        Private Function IsFamiliasEntityNull() As Boolean Implements IMappeableCategorias.IsFamiliasEntityNull
            Return IsNothing(_FamiliasEntity)
        End Function
        

        Private Sub SetFKValuesForChilds(entity As Categorias) Implements IMappeableCategorias.SetFKValuesForChilds
                
        End Sub

        Public Overloads Function Equals(other As Categorias) As Boolean Implements IEquatable(Of Categorias).Equals
            Return UniqueIdentifierHelper.IsSameObject(CType(Me, IUniqueIdentifiable), CType(other, IUniqueIdentifiable))
        End Function

    End Class

    Public Interface IMappeableCategorias
        Sub CompleteEntity(FamiliasEntity As Objects.FamiliasObject)
        
        Function IsFamiliasEntityNull() As Boolean
        
        Sub SetFKValuesForChilds(entity As Categorias )
    End Interface

    Public Partial Class CategoriasList
        Inherits ObjectList(Of Categorias)    
    End Class
End Namespace

Namespace Views
    Partial Public Class CategoriasListView
        Inherits ObjectListView(Of Entities.Categorias)

        Sub New(ByVal list As Entities.CategoriasList)
            MyBase.New(list)
        End Sub
    End Class
End NameSpace


