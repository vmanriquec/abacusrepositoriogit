
'------------------------------------------------------------------------------
' This file was generated by Cooperator Modeler, version 1.3.3.0
' Created: 15/08/2013 - 05:51 p.m.
' This is a partial class file. The other one is LoginMapper.cs
' You should not modifiy this file, please edit the other partial class file.
'------------------------------------------------------------------------------

Imports System
Imports abacusRules.Entities
Imports abacusRules.Objects
Imports Cooperator.Framework.Data
Imports Cooperator.Framework.Data.Exceptions
Imports Cooperator.Framework.Core
Imports System.Data.Common
Imports System.Reflection
Imports System.Web


Namespace Mappers
    

    Public Partial Class LoginMapper
        Inherits BaseGateway(Of Login, LoginList)
        Implements IGenericGateway

#Region "Singleton"

        Private Shared _instance As LoginMapper

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As LoginMapper
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New LoginMapper()
                Else
                    Dim inst As LoginMapper = TryCast(HttpContext.Current.Items("abacusRules.LoginMapperSingleton"), LoginMapper)
                    If inst Is Nothing Then
                        inst = New LoginMapper()
                        HttpContext.Current.Items.Add("abacusRules.LoginMapperSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function


#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim  s() as String={"Idlogin"}
            return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return GetType(Login)
        End Function


        ''' <summary>
        ''' Return the mapped table name
        ''' </summary>
        Protected Overrides ReadOnly Property TableName() As String 
            Get
                Return "Login"
            End Get
        End Property

        ''' <summary>
        ''' Return the LoginGateway type FullName
        ''' </summary>
        Protected Overrides ReadOnly Property RuleName() As String
            Get
                Return GetType(LoginMapper).FullName
            End Get
        End Property


        

        

        ''' <summary>
        ''' Assign properties values based on DataReader
        ''' </summary>
        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As Login)
            Dim _IdProveedor As System.Nullable(Of System.Int32) 
If reader.IsDBNull(1) Then 
	 _IdProveedor = New System.Nullable(Of System.Int32)
Else
	 _IdProveedor = reader.GetInt32(1)
End If
Dim _Usuario As String
If reader.IsDBNull(2) Then 
	 _Usuario = ""
Else
	 _Usuario = reader.GetString(2)
End If
Dim _Contrase単a As String
If reader.IsDBNull(3) Then 
	 _Contrase単a = ""
Else
	 _Contrase単a = reader.GetString(3)
End If
Dim _Administrador As System.Nullable(Of System.Boolean) 
If reader.IsDBNull(4) Then 
	 _Administrador = New System.Nullable(Of System.Boolean)
Else
	 _Administrador = reader.GetBoolean(4)
End If
Dim _Produccion As System.Nullable(Of System.Boolean) 
If reader.IsDBNull(5) Then 
	 _Produccion = New System.Nullable(Of System.Boolean)
Else
	 _Produccion = reader.GetBoolean(5)
End If
Dim _Lectura As System.Nullable(Of System.Boolean) 
If reader.IsDBNull(6) Then 
	 _Lectura = New System.Nullable(Of System.Boolean)
Else
	 _Lectura = reader.GetBoolean(6)
End If
Dim _ProveedoresString As String
If reader.IsDBNull(7) Then 
	 _ProveedoresString = ""
Else
	 _ProveedoresString = reader.GetString(7)
End If

            Dim Login As IMappeableLoginObject  = CType(entity, IMappeableLoginObject)
            Login.HydrateFields(reader.GetInt32(0), _
_IdProveedor, _
_Usuario, _
_Contrase単a, _
_Administrador, _
_Produccion, _
_Lectura, _
_ProveedoresString)
        End Sub

        ''' <summary>
        ''' Get field values to call insertion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForInsert(ByVal entity As Login) As Object()
            Dim Login As IMappeableLoginObject = CType(entity, IMappeableLoginObject)
            Return Login.GetFieldsForInsert()
        End Function

        ''' <summary>
        ''' Get field values to call update stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForUpdate(ByVal entity As Login) As Object()
            Dim Login As IMappeableLoginObject = CType(entity, IMappeableLoginObject)
            Return Login.GetFieldsForUpdate()
        End Function

        ''' <summary>
        ''' Get field values to call deletion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForDelete(ByVal entity As Login) As Object()
            Dim Login As IMappeableLoginObject = CType(entity, IMappeableLoginObject)
            Return Login.GetFieldsForDelete()
        End Function

        ''' <summary>
        ''' Raised after insert and update. Update properties from Output parameters
        ''' </summary>
        Protected Overrides Sub UpdateObjectFromOutputParams(ByVal entity As Login, ByVal parameters As Object())
            ' Update properties from Output parameters
            CType(entity, IMappeableLoginObject).UpdateObjectFromOutputParams(parameters)
        End Sub

        ''' <summary>
        ''' StoredProceduresPrefix, for example: coop_
        ''' </summary>
        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function


        


        

        ''' <summary>
        ''' Complete the aggregations for this entity. 
        ''' </summary>
        Protected Overrides Sub CompleteEntity(ByVal entity As Login)
            Dim ProveedoresEntity As Objects.ProveedoresObject = Nothing 'Lazy load
            CType(entity, IMappeableLogin).CompleteEntity(ProveedoresEntity)
        End Sub


        # Region "CRUD Operations"
        

        # End Region
        
        ''' <summary>
        ''' Delete children for this entity
        ''' </summary>
        Public Sub DeleteChildren(ByVal transaction As DbTransaction, ByVal entity As IUniqueIdentifiable)
                        
        End Sub


          



        ''' <summary>
        ''' Get a Login by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As Login
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a LoginList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As LoginList
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetOne(Idlogin As System.Int32) As Login
            Return MyBase.GetOne(New Login(Idlogin))
        End Function

        

        ' GetOne By Objects and Params
            

        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByProveedores(IdProveedor As System.Int32) As LoginList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Login_GetByProveedores", IdProveedor)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByProveedores(ByVal Proveedores As IUniqueIdentifiable) As LoginList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Login_GetByProveedores", Proveedores.Identifier())
        End Function

    


        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByProveedores(ByVal transaction As DbTransaction,IdProveedor As System.Int32) As LoginList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Login_GetByProveedores", IdProveedor)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByProveedores(ByVal transaction As DbTransaction, ByVal Proveedores As IUniqueIdentifiable) As LoginList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Login_GetByProveedores", Proveedores.Identifier())
        End Function

    

        





        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(Idlogin As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Login_Delete", Idlogin)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(ByVal transaction As DbTransaction ,Idlogin As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Login_Delete", Idlogin)
        End Sub

        ' Delete By Objects and Params
            



        

    

    

    

    

    

    

    

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByProveedores(IdProveedor As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Login_DeleteByProveedores", IdProveedor)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByProveedores(ByVal transaction As DbTransaction , IdProveedor As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Login_DeleteByProveedores", IdProveedor)
        End Sub


        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByProveedores(ByVal Proveedores As IUniqueIdentifiable)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Login_DeleteByProveedores", Proveedores.Identifier())
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByProveedores(ByVal transaction As DbTransaction, ByVal Proveedores As IUniqueIdentifiable)        
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Login_DeleteByProveedores", Proveedores.Identifier())
        End Sub

        

    


        'Database Queries 
        






        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace


Namespace Wrappers
    ''' <summary>
    ''' 
    ''' </summary>
    Public Class LoginMapperWrapper

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            return Instance().GetPKPropertiesNames()
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return Instance().GetMappingType()
        End Function


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function Instance() As abacusRules.Mappers.LoginMapper
            Return abacusRules.Mappers.LoginMapper.Instance()
        End Function

        
        ''' <summary>
        ''' Get a Login Entity by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetOne(ByVal Idlogin As System.Int32) As Entities.Login         
            Return Instance().GetOne( Idlogin)
        End Function
        

        ' GetBy Objects and Params
            

        

        ''' <summary>
        ''' Get a LoginList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByProveedores( ByVal IdProveedor As System.Int32) As Entities.LoginList 
            Return Instance().GetByProveedores(IdProveedor)
        End Function

        ''' <summary>
        ''' Get a LoginList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByProveedores(ByVal  Proveedores As IUniqueIdentifiable) As Entities.LoginList
            Return Instance().GetByProveedores(Proveedores)
        End Function

    

        ''' <summary>
        ''' GetAll Login 
        ''' </summary>
        Public Function GetAll() As Entities.LoginList
            Return Instance().GetAll()
        End Function

        
        

        ''' <summary>
        ''' Delete children for Login
        ''' </summary>
        Public Sub DeleteChildren(ByVal transaction As DbTransaction, ByVal entity As Login)
            Instance().DeleteChildren(transaction, entity)
        End Sub

        


            

        

        ''' <summary>
        ''' Delete Login by Proveedores
        ''' </summary>
        Public Sub DeleteByProveedores( ByVal IdProveedor As System.Int32)
            Instance().DeleteByProveedores(IdProveedor)
        End Sub

        ''' <summary>
        ''' Delete Login by Proveedores
        ''' </summary>
        Public Sub DeleteByProveedores(ByVal Proveedores As IUniqueIdentifiable )
            Instance().DeleteByProveedores(Proveedores)
        End Sub

    

        ''' <summary>
        ''' Delete Login 
        ''' </summary>
        Public Overloads Sub Delete(ByVal Idlogin As System.Int32)
            Instance().Delete(Idlogin)
        End Sub

        ''' <summary>
        ''' Delete Login 
        ''' </summary>
        Public Overloads Sub Delete(ByVal entity As Entities.Login)
            Instance().Delete(entity)
        End Sub

        ''' <summary>
        ''' Save Login  
        ''' </summary>
        Public Overloads Sub Save(ByVal entity As Entities.Login)
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert Login 
        ''' </summary>
        Public Overloads Sub Insert(ByVal entity As Entities.Login)
            Instance().Insert(entity)
        End Sub

        ''' <summary>
        ''' Save Login 
        ''' </summary>
        Public Overloads Sub Save(ByVal Idlogin As System.Int32, ByVal IdProveedor As System.Int32, ByVal Usuario As System.String, ByVal Contrase単a As System.String, ByVal Administrador As System.Boolean, ByVal Produccion As System.Boolean, ByVal Lectura As System.Boolean, ByVal ProveedoresString As System.String)
            Dim entity As Entities.Login = Instance().GetOne(Idlogin)
            If entity Is Nothing Then
                Throw New ApplicationException(String.Format("Entity not found. IUniqueIdentifiable values: {0} = {1}", "Idlogin", Idlogin))
            End If

            entity.IdProveedor = IdProveedor
            entity.Usuario = Usuario
            entity.Contrase単a = Contrase単a
            entity.Administrador = Administrador
            entity.Produccion = Produccion
            entity.Lectura = Lectura
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert Login
        ''' </summary>
        Public Overloads Sub Insert(ByVal IdProveedor As System.Int32, ByVal Usuario As System.String, ByVal Contrase単a As System.String, ByVal Administrador As System.Boolean, ByVal Produccion As System.Boolean, ByVal Lectura As System.Boolean)
            Dim entity As Entities.Login = New Entities.Login

            entity.IdProveedor = IdProveedor
            entity.Usuario = Usuario
            entity.Contrase単a = Contrase単a
            entity.Administrador = Administrador
            entity.Produccion = Produccion
            entity.Lectura = Lectura
            Instance().Insert(entity)
        End Sub

        

        'Database Queries 
        


    End Class
End Namespace


Namespace Loaders

    ''' <summary>
    ''' 
    ''' </summary>
    Partial Public Class LoginLoader(Of T As {Login, New})
        Inherits BaseLoader(Of T, Login, ObjectList(Of T))
        Implements IGenericGateway



#Region "Singleton"

        Private Shared _instance As LoginLoader(Of T)

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As LoginLoader(Of T)
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New LoginLoader(Of T)
                Else
                    Dim inst As LoginLoader(Of T) = TryCast(HttpContext.Current.Items("abacusRules.LoginLoaderSingleton"), LoginLoader(Of T))
                    If inst Is Nothing Then
                        inst = New LoginLoader(Of T)
                        HttpContext.Current.Items.Add("abacusRules.LoginLoaderSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function

#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim s() as String={"Idlogin"}
            Return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            Return GetType(Login)
        End Function


        Protected Overrides ReadOnly Property TableName As String 
            Get
                Return "Login"
            End Get
        End Property

        

        


        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As Login)
            Dim _IdProveedor As System.Nullable(Of System.Int32) 
If reader.IsDBNull(1) Then 
	 _IdProveedor = New System.Nullable(Of System.Int32)
Else
	 _IdProveedor = reader.GetInt32(1)
End If
Dim _Usuario As String
If reader.IsDBNull(2) Then 
	 _Usuario = ""
Else
	 _Usuario = reader.GetString(2)
End If
Dim _Contrase単a As String
If reader.IsDBNull(3) Then 
	 _Contrase単a = ""
Else
	 _Contrase単a = reader.GetString(3)
End If
Dim _Administrador As System.Nullable(Of System.Boolean) 
If reader.IsDBNull(4) Then 
	 _Administrador = New System.Nullable(Of System.Boolean)
Else
	 _Administrador = reader.GetBoolean(4)
End If
Dim _Produccion As System.Nullable(Of System.Boolean) 
If reader.IsDBNull(5) Then 
	 _Produccion = New System.Nullable(Of System.Boolean)
Else
	 _Produccion = reader.GetBoolean(5)
End If
Dim _Lectura As System.Nullable(Of System.Boolean) 
If reader.IsDBNull(6) Then 
	 _Lectura = New System.Nullable(Of System.Boolean)
Else
	 _Lectura = reader.GetBoolean(6)
End If
Dim _ProveedoresString As String
If reader.IsDBNull(7) Then 
	 _ProveedoresString = ""
Else
	 _ProveedoresString = reader.GetString(7)
End If

            Dim Login As IMappeableLoginObject  = CType(entity, IMappeableLoginObject)
            Login.HydrateFields(reader.GetInt32(0), _
_IdProveedor, _
_Usuario, _
_Contrase単a, _
_Administrador, _
_Produccion, _
_Lectura, _
_ProveedoresString)
        End Sub


        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function

        

        

        ' Complete the aggregations for this entity.         
        Protected Overrides Sub CompleteEntity(ByVal entity As t)
            Dim ProveedoresEntity As Objects.ProveedoresObject = Nothing 'Lazy load
            CType(entity, IMappeableLogin).CompleteEntity(ProveedoresEntity)
        End Sub

        


        ''' <summary>
        ''' Get a Login by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As t
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a LoginList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As ObjectList(Of T)
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' GetOne By Params
        ''' </summary>
        Public Overloads Function GetOne(Idlogin As System.Int32) As t
            Return MyBase.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "Login_GetOne", Idlogin)
        End Function
        


        ' GetOne By Objects and Params
            

        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByProveedores(IdProveedor As System.Int32) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Login_GetByProveedores", IdProveedor)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByProveedores(ByVal Proveedores As IUniqueIdentifiable) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Login_GetByProveedores", Proveedores.Identifier())
        End Function

    


        'Database Queries 
        


        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace




