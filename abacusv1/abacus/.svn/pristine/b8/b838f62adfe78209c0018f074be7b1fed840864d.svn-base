
'------------------------------------------------------------------------------
' This file was generated by Cooperator Modeler, version 1.3.3.0
' Created: 15/08/2013 - 05:51 p.m.
' This is a partial class file. The other one is KardexMapper.cs
' You should not modifiy this file, please edit the other partial class file.
'------------------------------------------------------------------------------

Imports System
Imports abacusRules.Entities
Imports abacusRules.Objects
Imports Cooperator.Framework.Data
Imports Cooperator.Framework.Data.Exceptions
Imports Cooperator.Framework.Core
Imports System.Data.Common
Imports System.Reflection
Imports System.Web


Namespace Mappers
    

    Public Partial Class KardexMapper
        Inherits BaseGateway(Of Kardex, KardexList)
        Implements IGenericGateway

#Region "Singleton"

        Private Shared _instance As KardexMapper

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As KardexMapper
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New KardexMapper()
                Else
                    Dim inst As KardexMapper = TryCast(HttpContext.Current.Items("abacusRules.KardexMapperSingleton"), KardexMapper)
                    If inst Is Nothing Then
                        inst = New KardexMapper()
                        HttpContext.Current.Items.Add("abacusRules.KardexMapperSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function


#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim  s() as String={"IdKardexT"}
            return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return GetType(Kardex)
        End Function


        ''' <summary>
        ''' Return the mapped table name
        ''' </summary>
        Protected Overrides ReadOnly Property TableName() As String 
            Get
                Return "Kardex"
            End Get
        End Property

        ''' <summary>
        ''' Return the KardexGateway type FullName
        ''' </summary>
        Protected Overrides ReadOnly Property RuleName() As String
            Get
                Return GetType(KardexMapper).FullName
            End Get
        End Property


        

        

        ''' <summary>
        ''' Assign properties values based on DataReader
        ''' </summary>
        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As Kardex)
            Dim _IdSalidasP As System.Nullable(Of System.Int32) 
If reader.IsDBNull(1) Then 
	 _IdSalidasP = New System.Nullable(Of System.Int32)
Else
	 _IdSalidasP = reader.GetInt32(1)
End If
Dim _IdIngresos As System.Nullable(Of System.Int32) 
If reader.IsDBNull(2) Then 
	 _IdIngresos = New System.Nullable(Of System.Int32)
Else
	 _IdIngresos = reader.GetInt32(2)
End If
Dim _IdProducto As System.Nullable(Of System.Int32) 
If reader.IsDBNull(3) Then 
	 _IdProducto = New System.Nullable(Of System.Int32)
Else
	 _IdProducto = reader.GetInt32(3)
End If
Dim _CodProducto As String
If reader.IsDBNull(4) Then 
	 _CodProducto = ""
Else
	 _CodProducto = reader.GetString(4)
End If
Dim _Producto As String
If reader.IsDBNull(5) Then 
	 _Producto = ""
Else
	 _Producto = reader.GetString(5)
End If
Dim _Lote As String
If reader.IsDBNull(6) Then 
	 _Lote = ""
Else
	 _Lote = reader.GetString(6)
End If
Dim _FechaK As System.Nullable(Of System.DateTime) 
If reader.IsDBNull(7) Then 
	 _FechaK = New System.Nullable(Of System.DateTime)
Else
	 _FechaK = reader.GetDateTime(7)
End If
Dim _SerieK As String
If reader.IsDBNull(8) Then 
	 _SerieK = ""
Else
	 _SerieK = reader.GetString(8)
End If
Dim _NumeroK As String
If reader.IsDBNull(9) Then 
	 _NumeroK = ""
Else
	 _NumeroK = reader.GetString(9)
End If
Dim _CantidadK As System.Nullable(Of System.Decimal) 
If reader.IsDBNull(10) Then 
	 _CantidadK = New System.Nullable(Of System.Decimal)
Else
	 _CantidadK = reader.GetDecimal(10)
End If
Dim _CUnitarioK As System.Nullable(Of System.Decimal) 
If reader.IsDBNull(11) Then 
	 _CUnitarioK = New System.Nullable(Of System.Decimal)
Else
	 _CUnitarioK = reader.GetDecimal(11)
End If
Dim _IdSalida As System.Nullable(Of System.Int32) 
If reader.IsDBNull(12) Then 
	 _IdSalida = New System.Nullable(Of System.Int32)
Else
	 _IdSalida = reader.GetInt32(12)
End If
Dim _CliProv As System.Nullable(Of System.Double) 
If reader.IsDBNull(13) Then 
	 _CliProv = New System.Nullable(Of System.Double)
Else
	 _CliProv = reader.GetFloat(13)
End If
Dim _Tienda As System.Nullable(Of System.Int32) 
If reader.IsDBNull(14) Then 
	 _Tienda = New System.Nullable(Of System.Int32)
Else
	 _Tienda = reader.GetInt32(14)
End If
Dim _upsize_ts As System.Nullable(Of System.DateTime) 
If reader.IsDBNull(15) Then 
	 _upsize_ts = New System.Nullable(Of System.DateTime)
Else
	 _upsize_ts = reader.GetDateTime(15)
End If
Dim _IngresosString As String
If reader.IsDBNull(16) Then 
	 _IngresosString = ""
Else
	 _IngresosString = reader.GetString(16)
End If
Dim _ProductosString As String
If reader.IsDBNull(17) Then 
	 _ProductosString = ""
Else
	 _ProductosString = reader.GetString(17)
End If
Dim _SalidasString As String
If reader.IsDBNull(18) Then 
	 _SalidasString = ""
Else
	 _SalidasString = reader.GetString(18)
End If

            Dim Kardex As IMappeableKardexObject  = CType(entity, IMappeableKardexObject)
            Kardex.HydrateFields(reader.GetInt32(0), _
_IdSalidasP, _
_IdIngresos, _
_IdProducto, _
_CodProducto, _
_Producto, _
_Lote, _
_FechaK, _
_SerieK, _
_NumeroK, _
_CantidadK, _
_CUnitarioK, _
_IdSalida, _
_CliProv, _
_Tienda, _
_upsize_ts, _
_IngresosString, _
_ProductosString, _
_SalidasString)
        End Sub

        ''' <summary>
        ''' Get field values to call insertion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForInsert(ByVal entity As Kardex) As Object()
            Dim Kardex As IMappeableKardexObject = CType(entity, IMappeableKardexObject)
            Return Kardex.GetFieldsForInsert()
        End Function

        ''' <summary>
        ''' Get field values to call update stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForUpdate(ByVal entity As Kardex) As Object()
            Dim Kardex As IMappeableKardexObject = CType(entity, IMappeableKardexObject)
            Return Kardex.GetFieldsForUpdate()
        End Function

        ''' <summary>
        ''' Get field values to call deletion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForDelete(ByVal entity As Kardex) As Object()
            Dim Kardex As IMappeableKardexObject = CType(entity, IMappeableKardexObject)
            Return Kardex.GetFieldsForDelete()
        End Function

        ''' <summary>
        ''' Raised after insert and update. Update properties from Output parameters
        ''' </summary>
        Protected Overrides Sub UpdateObjectFromOutputParams(ByVal entity As Kardex, ByVal parameters As Object())
            ' Update properties from Output parameters
            CType(entity, IMappeableKardexObject).UpdateObjectFromOutputParams(parameters)
        End Sub

        ''' <summary>
        ''' StoredProceduresPrefix, for example: coop_
        ''' </summary>
        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function


        


        

        ''' <summary>
        ''' Complete the aggregations for this entity. 
        ''' </summary>
        Protected Overrides Sub CompleteEntity(ByVal entity As Kardex)
            Dim IngresosEntity As Objects.IngresosObject = Nothing 'Lazy load
Dim ProductosEntity As Objects.ProductosObject = Nothing 'Lazy load
Dim SalidasEntity As Objects.SalidasObject = Nothing 'Lazy load
            CType(entity, IMappeableKardex).CompleteEntity(IngresosEntity, ProductosEntity, SalidasEntity)
        End Sub


        # Region "CRUD Operations"
        

        # End Region
        
        ''' <summary>
        ''' Delete children for this entity
        ''' </summary>
        Public Sub DeleteChildren(ByVal transaction As DbTransaction, ByVal entity As IUniqueIdentifiable)
                        
        End Sub


          



        ''' <summary>
        ''' Get a Kardex by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As Kardex
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a KardexList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As KardexList
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetOne(IdKardexT As System.Int32) As Kardex
            Return MyBase.GetOne(New Kardex(IdKardexT))
        End Function

        

        ' GetOne By Objects and Params
            

        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByIngresos(IdIngresos As System.Int32) As KardexList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Kardex_GetByIngresos", IdIngresos)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByIngresos(ByVal Ingresos As IUniqueIdentifiable) As KardexList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Kardex_GetByIngresos", Ingresos.Identifier())
        End Function

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByProductos(IdProducto As System.Int32) As KardexList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Kardex_GetByProductos", IdProducto)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByProductos(ByVal Productos As IUniqueIdentifiable) As KardexList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Kardex_GetByProductos", Productos.Identifier())
        End Function

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetBySalidas(IdSalidasP As System.Int32) As KardexList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Kardex_GetBySalidas", IdSalidasP)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetBySalidas(ByVal Salidas As IUniqueIdentifiable) As KardexList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Kardex_GetBySalidas", Salidas.Identifier())
        End Function

    


        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByIngresos(ByVal transaction As DbTransaction,IdIngresos As System.Int32) As KardexList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Kardex_GetByIngresos", IdIngresos)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByIngresos(ByVal transaction As DbTransaction, ByVal Ingresos As IUniqueIdentifiable) As KardexList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Kardex_GetByIngresos", Ingresos.Identifier())
        End Function

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByProductos(ByVal transaction As DbTransaction,IdProducto As System.Int32) As KardexList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Kardex_GetByProductos", IdProducto)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByProductos(ByVal transaction As DbTransaction, ByVal Productos As IUniqueIdentifiable) As KardexList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Kardex_GetByProductos", Productos.Identifier())
        End Function

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetBySalidas(ByVal transaction As DbTransaction,IdSalidasP As System.Int32) As KardexList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Kardex_GetBySalidas", IdSalidasP)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetBySalidas(ByVal transaction As DbTransaction, ByVal Salidas As IUniqueIdentifiable) As KardexList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Kardex_GetBySalidas", Salidas.Identifier())
        End Function

    

        





        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(IdKardexT As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Kardex_Delete", IdKardexT)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(ByVal transaction As DbTransaction ,IdKardexT As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Kardex_Delete", IdKardexT)
        End Sub

        ' Delete By Objects and Params
            



        

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByIngresos(IdIngresos As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Kardex_DeleteByIngresos", IdIngresos)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByIngresos(ByVal transaction As DbTransaction , IdIngresos As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Kardex_DeleteByIngresos", IdIngresos)
        End Sub


        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByIngresos(ByVal Ingresos As IUniqueIdentifiable)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Kardex_DeleteByIngresos", Ingresos.Identifier())
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByIngresos(ByVal transaction As DbTransaction, ByVal Ingresos As IUniqueIdentifiable)        
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Kardex_DeleteByIngresos", Ingresos.Identifier())
        End Sub

        

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByProductos(IdProducto As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Kardex_DeleteByProductos", IdProducto)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByProductos(ByVal transaction As DbTransaction , IdProducto As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Kardex_DeleteByProductos", IdProducto)
        End Sub


        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByProductos(ByVal Productos As IUniqueIdentifiable)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Kardex_DeleteByProductos", Productos.Identifier())
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByProductos(ByVal transaction As DbTransaction, ByVal Productos As IUniqueIdentifiable)        
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Kardex_DeleteByProductos", Productos.Identifier())
        End Sub

        

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteBySalidas(IdSalidasP As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Kardex_DeleteBySalidas", IdSalidasP)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteBySalidas(ByVal transaction As DbTransaction , IdSalidasP As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Kardex_DeleteBySalidas", IdSalidasP)
        End Sub


        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteBySalidas(ByVal Salidas As IUniqueIdentifiable)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Kardex_DeleteBySalidas", Salidas.Identifier())
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteBySalidas(ByVal transaction As DbTransaction, ByVal Salidas As IUniqueIdentifiable)        
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Kardex_DeleteBySalidas", Salidas.Identifier())
        End Sub

        

    


        'Database Queries 
        






        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace


Namespace Wrappers
    ''' <summary>
    ''' 
    ''' </summary>
    Public Class KardexMapperWrapper

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            return Instance().GetPKPropertiesNames()
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return Instance().GetMappingType()
        End Function


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function Instance() As abacusRules.Mappers.KardexMapper
            Return abacusRules.Mappers.KardexMapper.Instance()
        End Function

        
        ''' <summary>
        ''' Get a Kardex Entity by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetOne(ByVal IdKardexT As System.Int32) As Entities.Kardex         
            Return Instance().GetOne( IdKardexT)
        End Function
        

        ' GetBy Objects and Params
            

        

        ''' <summary>
        ''' Get a KardexList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByIngresos( ByVal IdIngresos As System.Int32) As Entities.KardexList 
            Return Instance().GetByIngresos(IdIngresos)
        End Function

        ''' <summary>
        ''' Get a KardexList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByIngresos(ByVal  Ingresos As IUniqueIdentifiable) As Entities.KardexList
            Return Instance().GetByIngresos(Ingresos)
        End Function

    

        ''' <summary>
        ''' Get a KardexList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByProductos( ByVal IdProducto As System.Int32) As Entities.KardexList 
            Return Instance().GetByProductos(IdProducto)
        End Function

        ''' <summary>
        ''' Get a KardexList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByProductos(ByVal  Productos As IUniqueIdentifiable) As Entities.KardexList
            Return Instance().GetByProductos(Productos)
        End Function

    

        ''' <summary>
        ''' Get a KardexList by calling a Stored Procedure
        ''' </summary>
        Public Function GetBySalidas( ByVal IdSalidasP As System.Int32) As Entities.KardexList 
            Return Instance().GetBySalidas(IdSalidasP)
        End Function

        ''' <summary>
        ''' Get a KardexList by calling a Stored Procedure
        ''' </summary>
        Public Function GetBySalidas(ByVal  Salidas As IUniqueIdentifiable) As Entities.KardexList
            Return Instance().GetBySalidas(Salidas)
        End Function

    

        ''' <summary>
        ''' GetAll Kardex 
        ''' </summary>
        Public Function GetAll() As Entities.KardexList
            Return Instance().GetAll()
        End Function

        
        

        ''' <summary>
        ''' Delete children for Kardex
        ''' </summary>
        Public Sub DeleteChildren(ByVal transaction As DbTransaction, ByVal entity As Kardex)
            Instance().DeleteChildren(transaction, entity)
        End Sub

        


            

        

        ''' <summary>
        ''' Delete Kardex by Ingresos
        ''' </summary>
        Public Sub DeleteByIngresos( ByVal IdIngresos As System.Int32)
            Instance().DeleteByIngresos(IdIngresos)
        End Sub

        ''' <summary>
        ''' Delete Kardex by Ingresos
        ''' </summary>
        Public Sub DeleteByIngresos(ByVal Ingresos As IUniqueIdentifiable )
            Instance().DeleteByIngresos(Ingresos)
        End Sub

    

        ''' <summary>
        ''' Delete Kardex by Productos
        ''' </summary>
        Public Sub DeleteByProductos( ByVal IdProducto As System.Int32)
            Instance().DeleteByProductos(IdProducto)
        End Sub

        ''' <summary>
        ''' Delete Kardex by Productos
        ''' </summary>
        Public Sub DeleteByProductos(ByVal Productos As IUniqueIdentifiable )
            Instance().DeleteByProductos(Productos)
        End Sub

    

        ''' <summary>
        ''' Delete Kardex by Salidas
        ''' </summary>
        Public Sub DeleteBySalidas( ByVal IdSalidasP As System.Int32)
            Instance().DeleteBySalidas(IdSalidasP)
        End Sub

        ''' <summary>
        ''' Delete Kardex by Salidas
        ''' </summary>
        Public Sub DeleteBySalidas(ByVal Salidas As IUniqueIdentifiable )
            Instance().DeleteBySalidas(Salidas)
        End Sub

    

        ''' <summary>
        ''' Delete Kardex 
        ''' </summary>
        Public Overloads Sub Delete(ByVal IdKardexT As System.Int32)
            Instance().Delete(IdKardexT)
        End Sub

        ''' <summary>
        ''' Delete Kardex 
        ''' </summary>
        Public Overloads Sub Delete(ByVal entity As Entities.Kardex)
            Instance().Delete(entity)
        End Sub

        ''' <summary>
        ''' Save Kardex  
        ''' </summary>
        Public Overloads Sub Save(ByVal entity As Entities.Kardex)
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert Kardex 
        ''' </summary>
        Public Overloads Sub Insert(ByVal entity As Entities.Kardex)
            Instance().Insert(entity)
        End Sub

        ''' <summary>
        ''' Save Kardex 
        ''' </summary>
        Public Overloads Sub Save(ByVal IdKardexT As System.Int32, ByVal IdSalidasP As System.Int32, ByVal IdIngresos As System.Int32, ByVal IdProducto As System.Int32, ByVal CodProducto As System.String, ByVal Producto As System.String, ByVal Lote As System.String, ByVal FechaK As System.DateTime, ByVal SerieK As System.String, ByVal NumeroK As System.String, ByVal CantidadK As System.Decimal, ByVal CUnitarioK As System.Decimal, ByVal IdSalida As System.Int32, ByVal CliProv As System.Double, ByVal Tienda As System.Int32, ByVal upsize_ts As System.DateTime, ByVal IngresosString As System.String, ByVal ProductosString As System.String, ByVal SalidasString As System.String)
            Dim entity As Entities.Kardex = Instance().GetOne(IdKardexT)
            If entity Is Nothing Then
                Throw New ApplicationException(String.Format("Entity not found. IUniqueIdentifiable values: {0} = {1}", "IdKardexT", IdKardexT))
            End If

            entity.IdSalidasP = IdSalidasP
            entity.IdIngresos = IdIngresos
            entity.IdProducto = IdProducto
            entity.CodProducto = CodProducto
            entity.Producto = Producto
            entity.Lote = Lote
            entity.FechaK = FechaK
            entity.SerieK = SerieK
            entity.NumeroK = NumeroK
            entity.CantidadK = CantidadK
            entity.CUnitarioK = CUnitarioK
            entity.IdSalida = IdSalida
            entity.CliProv = CliProv
            entity.Tienda = Tienda
            entity.upsize_ts = upsize_ts
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert Kardex
        ''' </summary>
        Public Overloads Sub Insert(ByVal IdSalidasP As System.Int32, ByVal IdIngresos As System.Int32, ByVal IdProducto As System.Int32, ByVal CodProducto As System.String, ByVal Producto As System.String, ByVal Lote As System.String, ByVal FechaK As System.DateTime, ByVal SerieK As System.String, ByVal NumeroK As System.String, ByVal CantidadK As System.Decimal, ByVal CUnitarioK As System.Decimal, ByVal IdSalida As System.Int32, ByVal CliProv As System.Double, ByVal Tienda As System.Int32, ByVal upsize_ts As System.DateTime)
            Dim entity As Entities.Kardex = New Entities.Kardex

            entity.IdSalidasP = IdSalidasP
            entity.IdIngresos = IdIngresos
            entity.IdProducto = IdProducto
            entity.CodProducto = CodProducto
            entity.Producto = Producto
            entity.Lote = Lote
            entity.FechaK = FechaK
            entity.SerieK = SerieK
            entity.NumeroK = NumeroK
            entity.CantidadK = CantidadK
            entity.CUnitarioK = CUnitarioK
            entity.IdSalida = IdSalida
            entity.CliProv = CliProv
            entity.Tienda = Tienda
            entity.upsize_ts = upsize_ts
            Instance().Insert(entity)
        End Sub

        

        'Database Queries 
        


    End Class
End Namespace


Namespace Loaders

    ''' <summary>
    ''' 
    ''' </summary>
    Partial Public Class KardexLoader(Of T As {Kardex, New})
        Inherits BaseLoader(Of T, Kardex, ObjectList(Of T))
        Implements IGenericGateway



#Region "Singleton"

        Private Shared _instance As KardexLoader(Of T)

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As KardexLoader(Of T)
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New KardexLoader(Of T)
                Else
                    Dim inst As KardexLoader(Of T) = TryCast(HttpContext.Current.Items("abacusRules.KardexLoaderSingleton"), KardexLoader(Of T))
                    If inst Is Nothing Then
                        inst = New KardexLoader(Of T)
                        HttpContext.Current.Items.Add("abacusRules.KardexLoaderSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function

#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim s() as String={"IdKardexT"}
            Return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            Return GetType(Kardex)
        End Function


        Protected Overrides ReadOnly Property TableName As String 
            Get
                Return "Kardex"
            End Get
        End Property

        

        


        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As Kardex)
            Dim _IdSalidasP As System.Nullable(Of System.Int32) 
If reader.IsDBNull(1) Then 
	 _IdSalidasP = New System.Nullable(Of System.Int32)
Else
	 _IdSalidasP = reader.GetInt32(1)
End If
Dim _IdIngresos As System.Nullable(Of System.Int32) 
If reader.IsDBNull(2) Then 
	 _IdIngresos = New System.Nullable(Of System.Int32)
Else
	 _IdIngresos = reader.GetInt32(2)
End If
Dim _IdProducto As System.Nullable(Of System.Int32) 
If reader.IsDBNull(3) Then 
	 _IdProducto = New System.Nullable(Of System.Int32)
Else
	 _IdProducto = reader.GetInt32(3)
End If
Dim _CodProducto As String
If reader.IsDBNull(4) Then 
	 _CodProducto = ""
Else
	 _CodProducto = reader.GetString(4)
End If
Dim _Producto As String
If reader.IsDBNull(5) Then 
	 _Producto = ""
Else
	 _Producto = reader.GetString(5)
End If
Dim _Lote As String
If reader.IsDBNull(6) Then 
	 _Lote = ""
Else
	 _Lote = reader.GetString(6)
End If
Dim _FechaK As System.Nullable(Of System.DateTime) 
If reader.IsDBNull(7) Then 
	 _FechaK = New System.Nullable(Of System.DateTime)
Else
	 _FechaK = reader.GetDateTime(7)
End If
Dim _SerieK As String
If reader.IsDBNull(8) Then 
	 _SerieK = ""
Else
	 _SerieK = reader.GetString(8)
End If
Dim _NumeroK As String
If reader.IsDBNull(9) Then 
	 _NumeroK = ""
Else
	 _NumeroK = reader.GetString(9)
End If
Dim _CantidadK As System.Nullable(Of System.Decimal) 
If reader.IsDBNull(10) Then 
	 _CantidadK = New System.Nullable(Of System.Decimal)
Else
	 _CantidadK = reader.GetDecimal(10)
End If
Dim _CUnitarioK As System.Nullable(Of System.Decimal) 
If reader.IsDBNull(11) Then 
	 _CUnitarioK = New System.Nullable(Of System.Decimal)
Else
	 _CUnitarioK = reader.GetDecimal(11)
End If
Dim _IdSalida As System.Nullable(Of System.Int32) 
If reader.IsDBNull(12) Then 
	 _IdSalida = New System.Nullable(Of System.Int32)
Else
	 _IdSalida = reader.GetInt32(12)
End If
Dim _CliProv As System.Nullable(Of System.Double) 
If reader.IsDBNull(13) Then 
	 _CliProv = New System.Nullable(Of System.Double)
Else
	 _CliProv = reader.GetFloat(13)
End If
Dim _Tienda As System.Nullable(Of System.Int32) 
If reader.IsDBNull(14) Then 
	 _Tienda = New System.Nullable(Of System.Int32)
Else
	 _Tienda = reader.GetInt32(14)
End If
Dim _upsize_ts As System.Nullable(Of System.DateTime) 
If reader.IsDBNull(15) Then 
	 _upsize_ts = New System.Nullable(Of System.DateTime)
Else
	 _upsize_ts = reader.GetDateTime(15)
End If
Dim _IngresosString As String
If reader.IsDBNull(16) Then 
	 _IngresosString = ""
Else
	 _IngresosString = reader.GetString(16)
End If
Dim _ProductosString As String
If reader.IsDBNull(17) Then 
	 _ProductosString = ""
Else
	 _ProductosString = reader.GetString(17)
End If
Dim _SalidasString As String
If reader.IsDBNull(18) Then 
	 _SalidasString = ""
Else
	 _SalidasString = reader.GetString(18)
End If

            Dim Kardex As IMappeableKardexObject  = CType(entity, IMappeableKardexObject)
            Kardex.HydrateFields(reader.GetInt32(0), _
_IdSalidasP, _
_IdIngresos, _
_IdProducto, _
_CodProducto, _
_Producto, _
_Lote, _
_FechaK, _
_SerieK, _
_NumeroK, _
_CantidadK, _
_CUnitarioK, _
_IdSalida, _
_CliProv, _
_Tienda, _
_upsize_ts, _
_IngresosString, _
_ProductosString, _
_SalidasString)
        End Sub


        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function

        

        

        ' Complete the aggregations for this entity.         
        Protected Overrides Sub CompleteEntity(ByVal entity As t)
            Dim IngresosEntity As Objects.IngresosObject = Nothing 'Lazy load
Dim ProductosEntity As Objects.ProductosObject = Nothing 'Lazy load
Dim SalidasEntity As Objects.SalidasObject = Nothing 'Lazy load
            CType(entity, IMappeableKardex).CompleteEntity(IngresosEntity, ProductosEntity, SalidasEntity)
        End Sub

        


        ''' <summary>
        ''' Get a Kardex by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As t
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a KardexList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As ObjectList(Of T)
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' GetOne By Params
        ''' </summary>
        Public Overloads Function GetOne(IdKardexT As System.Int32) As t
            Return MyBase.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "Kardex_GetOne", IdKardexT)
        End Function
        


        ' GetOne By Objects and Params
            

        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByIngresos(IdIngresos As System.Int32) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Kardex_GetByIngresos", IdIngresos)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByIngresos(ByVal Ingresos As IUniqueIdentifiable) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Kardex_GetByIngresos", Ingresos.Identifier())
        End Function

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByProductos(IdProducto As System.Int32) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Kardex_GetByProductos", IdProducto)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByProductos(ByVal Productos As IUniqueIdentifiable) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Kardex_GetByProductos", Productos.Identifier())
        End Function

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetBySalidas(IdSalidasP As System.Int32) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Kardex_GetBySalidas", IdSalidasP)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetBySalidas(ByVal Salidas As IUniqueIdentifiable) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Kardex_GetBySalidas", Salidas.Identifier())
        End Function

    


        'Database Queries 
        


        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace




