
'------------------------------------------------------------------------------
' This file was generated by Cooperator Modeler, version 1.3.3.0
' Created: 15/08/2013 - 05:51 p.m.
' This is a partial class file. The other one is ProductosGateway.vb
' You should not modifiy this file, please edit the other partial class file.
'------------------------------------------------------------------------------

Imports System
Imports abacusRules.Objects
Imports Cooperator.Framework.Data
Imports Cooperator.Framework.Data.Exceptions
Imports Cooperator.Framework.Core
Imports System.Data.Common
Imports System.Reflection
Imports System.Web

Namespace Gateways
        
    Public Partial Class ProductosGateway 
        Inherits BaseGateway(Of ProductosObject, ProductosObjectList)
        Implements IGenericGateway

#Region "Singleton"

        Private Shared _instance As ProductosGateway

        Private Sub New()
        End Sub

        Public Shared Function Instance() As ProductosGateway
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New ProductosGateway()
                Else
                    Dim inst As ProductosGateway = TryCast(HttpContext.Current.Items("abacusRules.ProductosGatewaySingleton"), ProductosGateway)
                    If inst Is Nothing Then
                        inst = New ProductosGateway()
                        HttpContext.Current.Items.Add("abacusRules.ProductosGatewaySingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function

#End Region

        ''' <summary>
        ''' Return the mapped table name
        ''' </summary>
        Protected Overrides ReadOnly Property TableName() As String
            Get
                Return "Productos"
            End Get
        End Property

        ''' <summary>
        ''' Return the ProductosGateway type FullName
        ''' </summary>
        Protected Overrides ReadOnly Property RuleName() As String
            Get
                Return GetType(ProductosGateway ).FullName
            End Get
        End Property


        

        


        ''' <summary>
        ''' Assign properties values based on DataReader
        ''' </summary>
        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As ProductosObject )
            Dim _IdProveedor As System.Nullable(Of System.Int32) 
If reader.IsDBNull(1) Then 
	 _IdProveedor = New System.Nullable(Of System.Int32)
Else
	 _IdProveedor = reader.GetInt32(1)
End If
Dim _Id_TipoProducto As System.Nullable(Of System.Int32) 
If reader.IsDBNull(2) Then 
	 _Id_TipoProducto = New System.Nullable(Of System.Int32)
Else
	 _Id_TipoProducto = reader.GetInt32(2)
End If
Dim _CodProducto As String
If reader.IsDBNull(3) Then 
	 _CodProducto = ""
Else
	 _CodProducto = reader.GetString(3)
End If
Dim _Producto As String
If reader.IsDBNull(4) Then 
	 _Producto = ""
Else
	 _Producto = reader.GetString(4)
End If
Dim _TipoProducto As System.Nullable(Of System.Int32) 
If reader.IsDBNull(5) Then 
	 _TipoProducto = New System.Nullable(Of System.Int32)
Else
	 _TipoProducto = reader.GetInt32(5)
End If
Dim _Capacidad As String
If reader.IsDBNull(6) Then 
	 _Capacidad = ""
Else
	 _Capacidad = reader.GetString(6)
End If
Dim _UMedida As String
If reader.IsDBNull(7) Then 
	 _UMedida = ""
Else
	 _UMedida = reader.GetString(7)
End If
Dim _NumParte As String
If reader.IsDBNull(8) Then 
	 _NumParte = ""
Else
	 _NumParte = reader.GetString(8)
End If
Dim _Familia As System.Nullable(Of System.Int32) 
If reader.IsDBNull(9) Then 
	 _Familia = New System.Nullable(Of System.Int32)
Else
	 _Familia = reader.GetInt32(9)
End If
Dim _Categoria As System.Nullable(Of System.Int32) 
If reader.IsDBNull(10) Then 
	 _Categoria = New System.Nullable(Of System.Int32)
Else
	 _Categoria = reader.GetInt32(10)
End If
Dim _Observaciones As String
If reader.IsDBNull(11) Then 
	 _Observaciones = ""
Else
	 _Observaciones = reader.GetString(11)
End If
Dim _IdProveedores As String
If reader.IsDBNull(12) Then 
	 _IdProveedores = ""
Else
	 _IdProveedores = reader.GetString(12)
End If
Dim _ImagenProd As String
If reader.IsDBNull(13) Then 
	 _ImagenProd = ""
Else
	 _ImagenProd = reader.GetString(13)
End If
Dim _PrecioCosto As System.Nullable(Of System.Decimal) 
If reader.IsDBNull(14) Then 
	 _PrecioCosto = New System.Nullable(Of System.Decimal)
Else
	 _PrecioCosto = reader.GetDecimal(14)
End If
Dim _MonedaC As System.Nullable(Of System.Int32) 
If reader.IsDBNull(15) Then 
	 _MonedaC = New System.Nullable(Of System.Int32)
Else
	 _MonedaC = reader.GetInt32(15)
End If
Dim _PrecioVenta As System.Nullable(Of System.Int32) 
If reader.IsDBNull(16) Then 
	 _PrecioVenta = New System.Nullable(Of System.Int32)
Else
	 _PrecioVenta = reader.GetInt32(16)
End If
Dim _MonedaV As System.Nullable(Of System.Int32) 
If reader.IsDBNull(17) Then 
	 _MonedaV = New System.Nullable(Of System.Int32)
Else
	 _MonedaV = reader.GetInt32(17)
End If
Dim _upsize_ts As System.Nullable(Of System.DateTime) 
If reader.IsDBNull(18) Then 
	 _upsize_ts = New System.Nullable(Of System.DateTime)
Else
	 _upsize_ts = reader.GetDateTime(18)
End If
Dim _ProveedoresString As String
If reader.IsDBNull(19) Then 
	 _ProveedoresString = ""
Else
	 _ProveedoresString = reader.GetString(19)
End If
Dim _TipoProductoString As String
If reader.IsDBNull(20) Then 
	 _TipoProductoString = ""
Else
	 _TipoProductoString = reader.GetString(20)
End If

            Dim Productos As IMappeableProductosObject  = CType(entity, IMappeableProductosObject)
            Productos.HydrateFields(reader.GetInt32(0), _
_IdProveedor, _
_Id_TipoProducto, _
_CodProducto, _
_Producto, _
_TipoProducto, _
_Capacidad, _
_UMedida, _
_NumParte, _
_Familia, _
_Categoria, _
_Observaciones, _
_IdProveedores, _
_ImagenProd, _
_PrecioCosto, _
_MonedaC, _
_PrecioVenta, _
_MonedaV, _
_upsize_ts, _
_ProveedoresString, _
_TipoProductoString)
            CType(entity, IObject).State = ObjectState.Restored
        End Sub

        ''' <summary>
        ''' Get field values to call insertion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForInsert(ByVal entity As ProductosObject) As Object()
            Dim Productos As IMappeableProductosObject = CType(entity, IMappeableProductosObject)
            Return Productos.GetFieldsForInsert()
        End Function

        ''' <summary>
        ''' Get field values to call update stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForUpdate(ByVal entity As ProductosObject) As Object()
            Dim Productos As IMappeableProductosObject = CType(entity, IMappeableProductosObject)
            Return Productos.GetFieldsForUpdate()
        End Function

        ''' <summary>
        ''' Get field values to call deletion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForDelete(ByVal entity As ProductosObject) As Object()
            Dim Productos As IMappeableProductosObject = CType(entity, IMappeableProductosObject)
            Return Productos.GetFieldsForDelete()
        End Function

        ''' <summary>
        ''' Raised after insert and update. Update properties from Output parameters
        ''' </summary>
        Protected Overrides Sub UpdateObjectFromOutputParams(ByVal row As ProductosObject, parameters As Object())
            ' Update properties from Output parameters
            CType(row, IMappeableProductosObject).UpdateObjectFromOutputParams(parameters)
            CType(row, IObject).State = ObjectState.Restored
        End Sub

        ''' <summary>
        ''' StoredProceduresPrefix, for example: coop_
        ''' </summary>
        Protected Overrides Function StoredProceduresPrefix() As String
            Return "coop_"
        End Function


        ''' <summary>
        ''' Get a ProductosObject by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As ProductosObject 
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a ProductosObjectList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As ProductosObjectList 
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function



        ''' <summary>
        ''' Get a ProductosObject by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetOne(ByVal IdProducto As System.Int32) As ProductosObject         
            Return MyBase.GetOne(New ProductosObject(IdProducto))
        End Function

            


        
        ''' <summary>
        ''' Get a ProductosObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByProveedores(ByVal transaction As DbTransaction, ByVal IdProveedor As System.Int32) As ProductosObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Productos_GetByProveedores", IdProveedor)
        End Function

        ''' <summary>
        ''' Get a ProductosObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByProveedores(ByVal transaction As DbTransaction, Proveedores As IUniqueIdentifiable) As ProductosObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Productos_GetByProveedores", Proveedores.Identifier())
        End Function
    
        ''' <summary>
        ''' Get a ProductosObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByTipoProducto(ByVal transaction As DbTransaction, ByVal Id_TipoProducto As System.Int32) As ProductosObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Productos_GetByTipoProducto", Id_TipoProducto)
        End Function

        ''' <summary>
        ''' Get a ProductosObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByTipoProducto(ByVal transaction As DbTransaction, TipoProducto As IUniqueIdentifiable) As ProductosObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Productos_GetByTipoProducto", TipoProducto.Identifier())
        End Function
    


        
        ''' <summary>
        ''' Get a ProductosObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByProveedores(ByVal IdProveedor As System.Int32) As ProductosObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Productos_GetByProveedores", IdProveedor)
        End Function

        ''' <summary>
        ''' Get a ProductosObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByProveedores(Proveedores As IUniqueIdentifiable) As ProductosObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Productos_GetByProveedores", Proveedores.Identifier())
        End Function
    
        ''' <summary>
        ''' Get a ProductosObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByTipoProducto(ByVal Id_TipoProducto As System.Int32) As ProductosObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Productos_GetByTipoProducto", Id_TipoProducto)
        End Function

        ''' <summary>
        ''' Get a ProductosObjectList by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetByTipoProducto(TipoProducto As IUniqueIdentifiable) As ProductosObjectList 
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Productos_GetByTipoProducto", TipoProducto.Identifier())
        End Function
    

        
        ''' <summary>
        ''' Delete Productos 
        ''' </summary>
        Public Overloads Sub Delete(ByVal IdProducto As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Productos_Delete", IdProducto)
        End Sub

        ''' <summary>
        ''' Delete Productos
        ''' </summary>
        Public Overloads Sub Delete(transaction As DbTransaction , ByVal IdProducto As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Productos_Delete", IdProducto)
        End Sub

            



        

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

        ''' <summary>
        ''' Delete Productos By Proveedores
        ''' </summary>
        Public Overloads Sub DeleteByProveedores(ByVal IdProveedor As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Productos_DeleteByProveedores", IdProveedor)
        End Sub

        ''' <summary>
        ''' Delete Productos By Proveedores
        ''' </summary>
        Public Overloads Sub DeleteByProveedores(ByVal transaction As DbTransaction , ByVal IdProveedor As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Productos_DeleteByProveedores", IdProveedor)
        End Sub

        ''' <summary>
        ''' Delete Productos By Proveedores
        ''' </summary>
        Public Overloads Sub DeleteByProveedores(ByVal Proveedores As IUniqueIdentifiable )
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Productos_DeleteByProveedores", Proveedores.Identifier())
        End Sub

        ''' <summary>
        ''' Delete Productos By Proveedores
        ''' </summary>
        Public Overloads Sub DeleteByProveedores(ByVal transaction As DbTransaction , ByVal Proveedores As IUniqueIdentifiable)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Productos_DeleteByProveedores", Proveedores.Identifier())
        End Sub

        

    

        ''' <summary>
        ''' Delete Productos By TipoProducto
        ''' </summary>
        Public Overloads Sub DeleteByTipoProducto(ByVal Id_TipoProducto As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Productos_DeleteByTipoProducto", Id_TipoProducto)
        End Sub

        ''' <summary>
        ''' Delete Productos By TipoProducto
        ''' </summary>
        Public Overloads Sub DeleteByTipoProducto(ByVal transaction As DbTransaction , ByVal Id_TipoProducto As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Productos_DeleteByTipoProducto", Id_TipoProducto)
        End Sub

        ''' <summary>
        ''' Delete Productos By TipoProducto
        ''' </summary>
        Public Overloads Sub DeleteByTipoProducto(ByVal TipoProducto As IUniqueIdentifiable )
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Productos_DeleteByTipoProducto", TipoProducto.Identifier())
        End Sub

        ''' <summary>
        ''' Delete Productos By TipoProducto
        ''' </summary>
        Public Overloads Sub DeleteByTipoProducto(ByVal transaction As DbTransaction , ByVal TipoProducto As IUniqueIdentifiable)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Productos_DeleteByTipoProducto", TipoProducto.Identifier())
        End Sub

        

    


        'Database Queries 
        



        #Region "IGenericGateway"

        Private Function GetOne2(identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GeyByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class
End Namespace




