
'------------------------------------------------------------------------------
' This file was generated by Cooperator Modeler, version 1.3.3.0
' Created: 15/08/2013 - 05:51 p.m.
' This is a partial class file. The other one is IngresosMapper.cs
' You should not modifiy this file, please edit the other partial class file.
'------------------------------------------------------------------------------

Imports System
Imports abacusRules.Entities
Imports abacusRules.Objects
Imports Cooperator.Framework.Data
Imports Cooperator.Framework.Data.Exceptions
Imports Cooperator.Framework.Core
Imports System.Data.Common
Imports System.Reflection
Imports System.Web


Namespace Mappers
    

    Public Partial Class IngresosMapper
        Inherits BaseGateway(Of Ingresos, IngresosList)
        Implements IGenericGateway

#Region "Singleton"

        Private Shared _instance As IngresosMapper

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As IngresosMapper
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New IngresosMapper()
                Else
                    Dim inst As IngresosMapper = TryCast(HttpContext.Current.Items("abacusRules.IngresosMapperSingleton"), IngresosMapper)
                    If inst Is Nothing Then
                        inst = New IngresosMapper()
                        HttpContext.Current.Items.Add("abacusRules.IngresosMapperSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function


#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim  s() as String={"IdIngresos"}
            return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return GetType(Ingresos)
        End Function


        ''' <summary>
        ''' Return the mapped table name
        ''' </summary>
        Protected Overrides ReadOnly Property TableName() As String 
            Get
                Return "Ingresos"
            End Get
        End Property

        ''' <summary>
        ''' Return the IngresosGateway type FullName
        ''' </summary>
        Protected Overrides ReadOnly Property RuleName() As String
            Get
                Return GetType(IngresosMapper).FullName
            End Get
        End Property


        

        

        ''' <summary>
        ''' Assign properties values based on DataReader
        ''' </summary>
        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As Ingresos)
            Dim _IdAlmacen As System.Nullable(Of System.Int32) 
If reader.IsDBNull(1) Then 
	 _IdAlmacen = New System.Nullable(Of System.Int32)
Else
	 _IdAlmacen = reader.GetInt32(1)
End If
Dim _IdTrabjador As System.Nullable(Of System.Int32) 
If reader.IsDBNull(2) Then 
	 _IdTrabjador = New System.Nullable(Of System.Int32)
Else
	 _IdTrabjador = reader.GetInt32(2)
End If
Dim _Fecha As System.Nullable(Of System.DateTime) 
If reader.IsDBNull(3) Then 
	 _Fecha = New System.Nullable(Of System.DateTime)
Else
	 _Fecha = reader.GetDateTime(3)
End If
Dim _Clasificacion As System.Nullable(Of System.Int32) 
If reader.IsDBNull(4) Then 
	 _Clasificacion = New System.Nullable(Of System.Int32)
Else
	 _Clasificacion = reader.GetInt32(4)
End If
Dim _TipDoc As System.Nullable(Of System.Int32) 
If reader.IsDBNull(5) Then 
	 _TipDoc = New System.Nullable(Of System.Int32)
Else
	 _TipDoc = reader.GetInt32(5)
End If
Dim _Serie As String
If reader.IsDBNull(6) Then 
	 _Serie = ""
Else
	 _Serie = reader.GetString(6)
End If
Dim _Numero As String
If reader.IsDBNull(7) Then 
	 _Numero = ""
Else
	 _Numero = reader.GetString(7)
End If
Dim _IdProveedor As System.Nullable(Of System.Int32) 
If reader.IsDBNull(8) Then 
	 _IdProveedor = New System.Nullable(Of System.Int32)
Else
	 _IdProveedor = reader.GetInt32(8)
End If
Dim _Moneda As System.Nullable(Of System.Int32) 
If reader.IsDBNull(9) Then 
	 _Moneda = New System.Nullable(Of System.Int32)
Else
	 _Moneda = reader.GetInt32(9)
End If
Dim _ModoPago As System.Nullable(Of System.Int32) 
If reader.IsDBNull(10) Then 
	 _ModoPago = New System.Nullable(Of System.Int32)
Else
	 _ModoPago = reader.GetInt32(10)
End If
Dim _AlmacenesString As String
If reader.IsDBNull(11) Then 
	 _AlmacenesString = ""
Else
	 _AlmacenesString = reader.GetString(11)
End If
Dim _ProveedoresString As String
If reader.IsDBNull(12) Then 
	 _ProveedoresString = ""
Else
	 _ProveedoresString = reader.GetString(12)
End If
Dim _TrabajadoresString As String
If reader.IsDBNull(13) Then 
	 _TrabajadoresString = ""
Else
	 _TrabajadoresString = reader.GetString(13)
End If

            Dim Ingresos As IMappeableIngresosObject  = CType(entity, IMappeableIngresosObject)
            Ingresos.HydrateFields(reader.GetInt32(0), _
_IdAlmacen, _
_IdTrabjador, _
_Fecha, _
_Clasificacion, _
_TipDoc, _
_Serie, _
_Numero, _
_IdProveedor, _
_Moneda, _
_ModoPago, _
_AlmacenesString, _
_ProveedoresString, _
_TrabajadoresString)
        End Sub

        ''' <summary>
        ''' Get field values to call insertion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForInsert(ByVal entity As Ingresos) As Object()
            Dim Ingresos As IMappeableIngresosObject = CType(entity, IMappeableIngresosObject)
            Return Ingresos.GetFieldsForInsert()
        End Function

        ''' <summary>
        ''' Get field values to call update stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForUpdate(ByVal entity As Ingresos) As Object()
            Dim Ingresos As IMappeableIngresosObject = CType(entity, IMappeableIngresosObject)
            Return Ingresos.GetFieldsForUpdate()
        End Function

        ''' <summary>
        ''' Get field values to call deletion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForDelete(ByVal entity As Ingresos) As Object()
            Dim Ingresos As IMappeableIngresosObject = CType(entity, IMappeableIngresosObject)
            Return Ingresos.GetFieldsForDelete()
        End Function

        ''' <summary>
        ''' Raised after insert and update. Update properties from Output parameters
        ''' </summary>
        Protected Overrides Sub UpdateObjectFromOutputParams(ByVal entity As Ingresos, ByVal parameters As Object())
            ' Update properties from Output parameters
            CType(entity, IMappeableIngresosObject).UpdateObjectFromOutputParams(parameters)
        End Sub

        ''' <summary>
        ''' StoredProceduresPrefix, for example: coop_
        ''' </summary>
        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function


        


        

        ''' <summary>
        ''' Complete the aggregations for this entity. 
        ''' </summary>
        Protected Overrides Sub CompleteEntity(ByVal entity As Ingresos)
            Dim AlmacenesEntity As Objects.AlmacenesObject = Nothing 'Lazy load
Dim ProveedoresEntity As Objects.ProveedoresObject = Nothing 'Lazy load
Dim TrabajadoresEntity As Objects.TrabajadoresObject = Nothing 'Lazy load
            CType(entity, IMappeableIngresos).CompleteEntity(AlmacenesEntity, ProveedoresEntity, TrabajadoresEntity)
        End Sub


        # Region "CRUD Operations"
        

        # End Region
        
        ''' <summary>
        ''' Delete children for this entity
        ''' </summary>
        Public Sub DeleteChildren(ByVal transaction As DbTransaction, ByVal entity As IUniqueIdentifiable)
                        
        End Sub


          



        ''' <summary>
        ''' Get a Ingresos by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As Ingresos
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a IngresosList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As IngresosList
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetOne(IdIngresos As System.Int32) As Ingresos
            Return MyBase.GetOne(New Ingresos(IdIngresos))
        End Function

        

        ' GetOne By Objects and Params
            

        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByAlmacenes(IdAlmacen As System.Int32) As IngresosList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Ingresos_GetByAlmacenes", IdAlmacen)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByAlmacenes(ByVal Almacenes As IUniqueIdentifiable) As IngresosList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Ingresos_GetByAlmacenes", Almacenes.Identifier())
        End Function

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByProveedores(IdProveedor As System.Int32) As IngresosList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Ingresos_GetByProveedores", IdProveedor)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByProveedores(ByVal Proveedores As IUniqueIdentifiable) As IngresosList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Ingresos_GetByProveedores", Proveedores.Identifier())
        End Function

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByTrabajadores(IdTrabjador As System.Int32) As IngresosList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Ingresos_GetByTrabajadores", IdTrabjador)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByTrabajadores(ByVal Trabajadores As IUniqueIdentifiable) As IngresosList
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Ingresos_GetByTrabajadores", Trabajadores.Identifier())
        End Function

    


        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByAlmacenes(ByVal transaction As DbTransaction,IdAlmacen As System.Int32) As IngresosList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Ingresos_GetByAlmacenes", IdAlmacen)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByAlmacenes(ByVal transaction As DbTransaction, ByVal Almacenes As IUniqueIdentifiable) As IngresosList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Ingresos_GetByAlmacenes", Almacenes.Identifier())
        End Function

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByProveedores(ByVal transaction As DbTransaction,IdProveedor As System.Int32) As IngresosList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Ingresos_GetByProveedores", IdProveedor)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByProveedores(ByVal transaction As DbTransaction, ByVal Proveedores As IUniqueIdentifiable) As IngresosList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Ingresos_GetByProveedores", Proveedores.Identifier())
        End Function

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByTrabajadores(ByVal transaction As DbTransaction,IdTrabjador As System.Int32) As IngresosList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Ingresos_GetByTrabajadores", IdTrabjador)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByTrabajadores(ByVal transaction As DbTransaction, ByVal Trabajadores As IUniqueIdentifiable) As IngresosList
            Return MyBase.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Ingresos_GetByTrabajadores", Trabajadores.Identifier())
        End Function

    

        





        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(IdIngresos As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Ingresos_Delete", IdIngresos)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(ByVal transaction As DbTransaction ,IdIngresos As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Ingresos_Delete", IdIngresos)
        End Sub

        ' Delete By Objects and Params
            



        

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByAlmacenes(IdAlmacen As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Ingresos_DeleteByAlmacenes", IdAlmacen)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByAlmacenes(ByVal transaction As DbTransaction , IdAlmacen As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Ingresos_DeleteByAlmacenes", IdAlmacen)
        End Sub


        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByAlmacenes(ByVal Almacenes As IUniqueIdentifiable)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Ingresos_DeleteByAlmacenes", Almacenes.Identifier())
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByAlmacenes(ByVal transaction As DbTransaction, ByVal Almacenes As IUniqueIdentifiable)        
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Ingresos_DeleteByAlmacenes", Almacenes.Identifier())
        End Sub

        

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByProveedores(IdProveedor As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Ingresos_DeleteByProveedores", IdProveedor)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByProveedores(ByVal transaction As DbTransaction , IdProveedor As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Ingresos_DeleteByProveedores", IdProveedor)
        End Sub


        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByProveedores(ByVal Proveedores As IUniqueIdentifiable)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Ingresos_DeleteByProveedores", Proveedores.Identifier())
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByProveedores(ByVal transaction As DbTransaction, ByVal Proveedores As IUniqueIdentifiable)        
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Ingresos_DeleteByProveedores", Proveedores.Identifier())
        End Sub

        

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByTrabajadores(IdTrabjador As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Ingresos_DeleteByTrabajadores", IdTrabjador)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByTrabajadores(ByVal transaction As DbTransaction , IdTrabjador As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Ingresos_DeleteByTrabajadores", IdTrabjador)
        End Sub


        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByTrabajadores(ByVal Trabajadores As IUniqueIdentifiable)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Ingresos_DeleteByTrabajadores", Trabajadores.Identifier())
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub DeleteByTrabajadores(ByVal transaction As DbTransaction, ByVal Trabajadores As IUniqueIdentifiable)        
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Ingresos_DeleteByTrabajadores", Trabajadores.Identifier())
        End Sub

        

    


        'Database Queries 
        






        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace


Namespace Wrappers
    ''' <summary>
    ''' 
    ''' </summary>
    Public Class IngresosMapperWrapper

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            return Instance().GetPKPropertiesNames()
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return Instance().GetMappingType()
        End Function


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function Instance() As abacusRules.Mappers.IngresosMapper
            Return abacusRules.Mappers.IngresosMapper.Instance()
        End Function

        
        ''' <summary>
        ''' Get a Ingresos Entity by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetOne(ByVal IdIngresos As System.Int32) As Entities.Ingresos         
            Return Instance().GetOne( IdIngresos)
        End Function
        

        ' GetBy Objects and Params
            

        

        ''' <summary>
        ''' Get a IngresosList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByAlmacenes( ByVal IdAlmacen As System.Int32) As Entities.IngresosList 
            Return Instance().GetByAlmacenes(IdAlmacen)
        End Function

        ''' <summary>
        ''' Get a IngresosList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByAlmacenes(ByVal  Almacenes As IUniqueIdentifiable) As Entities.IngresosList
            Return Instance().GetByAlmacenes(Almacenes)
        End Function

    

        ''' <summary>
        ''' Get a IngresosList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByProveedores( ByVal IdProveedor As System.Int32) As Entities.IngresosList 
            Return Instance().GetByProveedores(IdProveedor)
        End Function

        ''' <summary>
        ''' Get a IngresosList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByProveedores(ByVal  Proveedores As IUniqueIdentifiable) As Entities.IngresosList
            Return Instance().GetByProveedores(Proveedores)
        End Function

    

        ''' <summary>
        ''' Get a IngresosList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByTrabajadores( ByVal IdTrabjador As System.Int32) As Entities.IngresosList 
            Return Instance().GetByTrabajadores(IdTrabjador)
        End Function

        ''' <summary>
        ''' Get a IngresosList by calling a Stored Procedure
        ''' </summary>
        Public Function GetByTrabajadores(ByVal  Trabajadores As IUniqueIdentifiable) As Entities.IngresosList
            Return Instance().GetByTrabajadores(Trabajadores)
        End Function

    

        ''' <summary>
        ''' GetAll Ingresos 
        ''' </summary>
        Public Function GetAll() As Entities.IngresosList
            Return Instance().GetAll()
        End Function

        
        

        ''' <summary>
        ''' Delete children for Ingresos
        ''' </summary>
        Public Sub DeleteChildren(ByVal transaction As DbTransaction, ByVal entity As Ingresos)
            Instance().DeleteChildren(transaction, entity)
        End Sub

        


            

        

        ''' <summary>
        ''' Delete Ingresos by Almacenes
        ''' </summary>
        Public Sub DeleteByAlmacenes( ByVal IdAlmacen As System.Int32)
            Instance().DeleteByAlmacenes(IdAlmacen)
        End Sub

        ''' <summary>
        ''' Delete Ingresos by Almacenes
        ''' </summary>
        Public Sub DeleteByAlmacenes(ByVal Almacenes As IUniqueIdentifiable )
            Instance().DeleteByAlmacenes(Almacenes)
        End Sub

    

        ''' <summary>
        ''' Delete Ingresos by Proveedores
        ''' </summary>
        Public Sub DeleteByProveedores( ByVal IdProveedor As System.Int32)
            Instance().DeleteByProveedores(IdProveedor)
        End Sub

        ''' <summary>
        ''' Delete Ingresos by Proveedores
        ''' </summary>
        Public Sub DeleteByProveedores(ByVal Proveedores As IUniqueIdentifiable )
            Instance().DeleteByProveedores(Proveedores)
        End Sub

    

        ''' <summary>
        ''' Delete Ingresos by Trabajadores
        ''' </summary>
        Public Sub DeleteByTrabajadores( ByVal IdTrabjador As System.Int32)
            Instance().DeleteByTrabajadores(IdTrabjador)
        End Sub

        ''' <summary>
        ''' Delete Ingresos by Trabajadores
        ''' </summary>
        Public Sub DeleteByTrabajadores(ByVal Trabajadores As IUniqueIdentifiable )
            Instance().DeleteByTrabajadores(Trabajadores)
        End Sub

    

        ''' <summary>
        ''' Delete Ingresos 
        ''' </summary>
        Public Overloads Sub Delete(ByVal IdIngresos As System.Int32)
            Instance().Delete(IdIngresos)
        End Sub

        ''' <summary>
        ''' Delete Ingresos 
        ''' </summary>
        Public Overloads Sub Delete(ByVal entity As Entities.Ingresos)
            Instance().Delete(entity)
        End Sub

        ''' <summary>
        ''' Save Ingresos  
        ''' </summary>
        Public Overloads Sub Save(ByVal entity As Entities.Ingresos)
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert Ingresos 
        ''' </summary>
        Public Overloads Sub Insert(ByVal entity As Entities.Ingresos)
            Instance().Insert(entity)
        End Sub

        ''' <summary>
        ''' Save Ingresos 
        ''' </summary>
        Public Overloads Sub Save(ByVal IdIngresos As System.Int32, ByVal IdAlmacen As System.Int32, ByVal IdTrabjador As System.Int32, ByVal Fecha As System.DateTime, ByVal Clasificacion As System.Int32, ByVal TipDoc As System.Int32, ByVal Serie As System.String, ByVal Numero As System.String, ByVal IdProveedor As System.Int32, ByVal Moneda As System.Int32, ByVal ModoPago As System.Int32, ByVal AlmacenesString As System.String, ByVal ProveedoresString As System.String, ByVal TrabajadoresString As System.String)
            Dim entity As Entities.Ingresos = Instance().GetOne(IdIngresos)
            If entity Is Nothing Then
                Throw New ApplicationException(String.Format("Entity not found. IUniqueIdentifiable values: {0} = {1}", "IdIngresos", IdIngresos))
            End If

            entity.IdAlmacen = IdAlmacen
            entity.IdTrabjador = IdTrabjador
            entity.Fecha = Fecha
            entity.Clasificacion = Clasificacion
            entity.TipDoc = TipDoc
            entity.Serie = Serie
            entity.Numero = Numero
            entity.IdProveedor = IdProveedor
            entity.Moneda = Moneda
            entity.ModoPago = ModoPago
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert Ingresos
        ''' </summary>
        Public Overloads Sub Insert(ByVal IdAlmacen As System.Int32, ByVal IdTrabjador As System.Int32, ByVal Fecha As System.DateTime, ByVal Clasificacion As System.Int32, ByVal TipDoc As System.Int32, ByVal Serie As System.String, ByVal Numero As System.String, ByVal IdProveedor As System.Int32, ByVal Moneda As System.Int32, ByVal ModoPago As System.Int32)
            Dim entity As Entities.Ingresos = New Entities.Ingresos

            entity.IdAlmacen = IdAlmacen
            entity.IdTrabjador = IdTrabjador
            entity.Fecha = Fecha
            entity.Clasificacion = Clasificacion
            entity.TipDoc = TipDoc
            entity.Serie = Serie
            entity.Numero = Numero
            entity.IdProveedor = IdProveedor
            entity.Moneda = Moneda
            entity.ModoPago = ModoPago
            Instance().Insert(entity)
        End Sub

        

        'Database Queries 
        


    End Class
End Namespace


Namespace Loaders

    ''' <summary>
    ''' 
    ''' </summary>
    Partial Public Class IngresosLoader(Of T As {Ingresos, New})
        Inherits BaseLoader(Of T, Ingresos, ObjectList(Of T))
        Implements IGenericGateway



#Region "Singleton"

        Private Shared _instance As IngresosLoader(Of T)

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As IngresosLoader(Of T)
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New IngresosLoader(Of T)
                Else
                    Dim inst As IngresosLoader(Of T) = TryCast(HttpContext.Current.Items("abacusRules.IngresosLoaderSingleton"), IngresosLoader(Of T))
                    If inst Is Nothing Then
                        inst = New IngresosLoader(Of T)
                        HttpContext.Current.Items.Add("abacusRules.IngresosLoaderSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function

#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim s() as String={"IdIngresos"}
            Return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            Return GetType(Ingresos)
        End Function


        Protected Overrides ReadOnly Property TableName As String 
            Get
                Return "Ingresos"
            End Get
        End Property

        

        


        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As Ingresos)
            Dim _IdAlmacen As System.Nullable(Of System.Int32) 
If reader.IsDBNull(1) Then 
	 _IdAlmacen = New System.Nullable(Of System.Int32)
Else
	 _IdAlmacen = reader.GetInt32(1)
End If
Dim _IdTrabjador As System.Nullable(Of System.Int32) 
If reader.IsDBNull(2) Then 
	 _IdTrabjador = New System.Nullable(Of System.Int32)
Else
	 _IdTrabjador = reader.GetInt32(2)
End If
Dim _Fecha As System.Nullable(Of System.DateTime) 
If reader.IsDBNull(3) Then 
	 _Fecha = New System.Nullable(Of System.DateTime)
Else
	 _Fecha = reader.GetDateTime(3)
End If
Dim _Clasificacion As System.Nullable(Of System.Int32) 
If reader.IsDBNull(4) Then 
	 _Clasificacion = New System.Nullable(Of System.Int32)
Else
	 _Clasificacion = reader.GetInt32(4)
End If
Dim _TipDoc As System.Nullable(Of System.Int32) 
If reader.IsDBNull(5) Then 
	 _TipDoc = New System.Nullable(Of System.Int32)
Else
	 _TipDoc = reader.GetInt32(5)
End If
Dim _Serie As String
If reader.IsDBNull(6) Then 
	 _Serie = ""
Else
	 _Serie = reader.GetString(6)
End If
Dim _Numero As String
If reader.IsDBNull(7) Then 
	 _Numero = ""
Else
	 _Numero = reader.GetString(7)
End If
Dim _IdProveedor As System.Nullable(Of System.Int32) 
If reader.IsDBNull(8) Then 
	 _IdProveedor = New System.Nullable(Of System.Int32)
Else
	 _IdProveedor = reader.GetInt32(8)
End If
Dim _Moneda As System.Nullable(Of System.Int32) 
If reader.IsDBNull(9) Then 
	 _Moneda = New System.Nullable(Of System.Int32)
Else
	 _Moneda = reader.GetInt32(9)
End If
Dim _ModoPago As System.Nullable(Of System.Int32) 
If reader.IsDBNull(10) Then 
	 _ModoPago = New System.Nullable(Of System.Int32)
Else
	 _ModoPago = reader.GetInt32(10)
End If
Dim _AlmacenesString As String
If reader.IsDBNull(11) Then 
	 _AlmacenesString = ""
Else
	 _AlmacenesString = reader.GetString(11)
End If
Dim _ProveedoresString As String
If reader.IsDBNull(12) Then 
	 _ProveedoresString = ""
Else
	 _ProveedoresString = reader.GetString(12)
End If
Dim _TrabajadoresString As String
If reader.IsDBNull(13) Then 
	 _TrabajadoresString = ""
Else
	 _TrabajadoresString = reader.GetString(13)
End If

            Dim Ingresos As IMappeableIngresosObject  = CType(entity, IMappeableIngresosObject)
            Ingresos.HydrateFields(reader.GetInt32(0), _
_IdAlmacen, _
_IdTrabjador, _
_Fecha, _
_Clasificacion, _
_TipDoc, _
_Serie, _
_Numero, _
_IdProveedor, _
_Moneda, _
_ModoPago, _
_AlmacenesString, _
_ProveedoresString, _
_TrabajadoresString)
        End Sub


        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function

        

        

        ' Complete the aggregations for this entity.         
        Protected Overrides Sub CompleteEntity(ByVal entity As t)
            Dim AlmacenesEntity As Objects.AlmacenesObject = Nothing 'Lazy load
Dim ProveedoresEntity As Objects.ProveedoresObject = Nothing 'Lazy load
Dim TrabajadoresEntity As Objects.TrabajadoresObject = Nothing 'Lazy load
            CType(entity, IMappeableIngresos).CompleteEntity(AlmacenesEntity, ProveedoresEntity, TrabajadoresEntity)
        End Sub

        


        ''' <summary>
        ''' Get a Ingresos by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As t
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a IngresosList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As ObjectList(Of T)
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' GetOne By Params
        ''' </summary>
        Public Overloads Function GetOne(IdIngresos As System.Int32) As t
            Return MyBase.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "Ingresos_GetOne", IdIngresos)
        End Function
        


        ' GetOne By Objects and Params
            

        

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByAlmacenes(IdAlmacen As System.Int32) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Ingresos_GetByAlmacenes", IdAlmacen)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByAlmacenes(ByVal Almacenes As IUniqueIdentifiable) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Ingresos_GetByAlmacenes", Almacenes.Identifier())
        End Function

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByProveedores(IdProveedor As System.Int32) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Ingresos_GetByProveedores", IdProveedor)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByProveedores(ByVal Proveedores As IUniqueIdentifiable) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Ingresos_GetByProveedores", Proveedores.Identifier())
        End Function

    

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByTrabajadores(IdTrabjador As System.Int32) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Ingresos_GetByTrabajadores", IdTrabjador)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetByTrabajadores(ByVal Trabajadores As IUniqueIdentifiable) As ObjectList(Of T)
            Return MyBase.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Ingresos_GetByTrabajadores", Trabajadores.Identifier())
        End Function

    


        'Database Queries 
        


        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace




