
'------------------------------------------------------------------------------
' This file was generated by Cooperator Modeler, version 1.3.3.0
' Created: 15/08/2013 - 05:51 p.m.
' This is a partial class file. The other one is MovilesMapper.cs
' You should not modifiy this file, please edit the other partial class file.
'------------------------------------------------------------------------------

Imports System
Imports abacusRules.Entities
Imports abacusRules.Objects
Imports Cooperator.Framework.Data
Imports Cooperator.Framework.Data.Exceptions
Imports Cooperator.Framework.Core
Imports System.Data.Common
Imports System.Reflection
Imports System.Web


Namespace Mappers
    

    Public Partial Class MovilesMapper
        Inherits BaseGateway(Of MovilesObject, MovilesObjectList)
        Implements IGenericGateway

#Region "Singleton"

        Private Shared _instance As MovilesMapper

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As MovilesMapper
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New MovilesMapper()
                Else
                    Dim inst As MovilesMapper = TryCast(HttpContext.Current.Items("abacusRules.MovilesMapperSingleton"), MovilesMapper)
                    If inst Is Nothing Then
                        inst = New MovilesMapper()
                        HttpContext.Current.Items.Add("abacusRules.MovilesMapperSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function


#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim  s() as String={"IdMovil"}
            return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return GetType(MovilesObject)
        End Function


        ''' <summary>
        ''' Return the mapped table name
        ''' </summary>
        Protected Overrides ReadOnly Property TableName() As String 
            Get
                Return "Moviles"
            End Get
        End Property

        ''' <summary>
        ''' Return the MovilesGateway type FullName
        ''' </summary>
        Protected Overrides ReadOnly Property RuleName() As String
            Get
                Return GetType(MovilesMapper).FullName
            End Get
        End Property


        

        

        ''' <summary>
        ''' Assign properties values based on DataReader
        ''' </summary>
        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As MovilesObject)
            Dim _Marca As String
If reader.IsDBNull(1) Then 
	 _Marca = ""
Else
	 _Marca = reader.GetString(1)
End If
Dim _Placa As String
If reader.IsDBNull(2) Then 
	 _Placa = ""
Else
	 _Placa = reader.GetString(2)
End If
Dim _ConfVehicular As String
If reader.IsDBNull(3) Then 
	 _ConfVehicular = ""
Else
	 _ConfVehicular = reader.GetString(3)
End If
Dim _IdTransportista As System.Nullable(Of System.Int32) 
If reader.IsDBNull(4) Then 
	 _IdTransportista = New System.Nullable(Of System.Int32)
Else
	 _IdTransportista = reader.GetInt32(4)
End If

            Dim Moviles As IMappeableMovilesObject  = CType(entity, IMappeableMovilesObject)
            Moviles.HydrateFields(reader.GetInt32(0), _
_Marca, _
_Placa, _
_ConfVehicular, _
_IdTransportista)
        End Sub

        ''' <summary>
        ''' Get field values to call insertion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForInsert(ByVal entity As MovilesObject) As Object()
            Dim Moviles As IMappeableMovilesObject = CType(entity, IMappeableMovilesObject)
            Return Moviles.GetFieldsForInsert()
        End Function

        ''' <summary>
        ''' Get field values to call update stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForUpdate(ByVal entity As MovilesObject) As Object()
            Dim Moviles As IMappeableMovilesObject = CType(entity, IMappeableMovilesObject)
            Return Moviles.GetFieldsForUpdate()
        End Function

        ''' <summary>
        ''' Get field values to call deletion stored procedure
        ''' </summary>
        Protected Overrides Function GetFieldsForDelete(ByVal entity As MovilesObject) As Object()
            Dim Moviles As IMappeableMovilesObject = CType(entity, IMappeableMovilesObject)
            Return Moviles.GetFieldsForDelete()
        End Function

        ''' <summary>
        ''' Raised after insert and update. Update properties from Output parameters
        ''' </summary>
        Protected Overrides Sub UpdateObjectFromOutputParams(ByVal entity As MovilesObject, ByVal parameters As Object())
            ' Update properties from Output parameters
            CType(entity, IMappeableMovilesObject).UpdateObjectFromOutputParams(parameters)
        End Sub

        ''' <summary>
        ''' StoredProceduresPrefix, for example: coop_
        ''' </summary>
        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function


          



        ''' <summary>
        ''' Get a Moviles by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As MovilesObject
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a MovilesList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As MovilesObjectList
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Function GetOne(IdMovil As System.Int32) As MovilesObject
            Return MyBase.GetOne(New MovilesObject(IdMovil))
        End Function

        

        ' GetOne By Objects and Params
            

        


        

        





        
        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(IdMovil As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Moviles_Delete", IdMovil)
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Overloads Sub Delete(ByVal transaction As DbTransaction ,IdMovil As System.Int32)
            MyBase.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Moviles_Delete", IdMovil)
        End Sub

        ' Delete By Objects and Params
            



        

    

    

    

    

    


        'Database Queries 
        






        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace


Namespace Wrappers
    ''' <summary>
    ''' 
    ''' </summary>
    Public Class MovilesMapperWrapper

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            return Instance().GetPKPropertiesNames()
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            return Instance().GetMappingType()
        End Function


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function Instance() As abacusRules.Mappers.MovilesMapper
            Return abacusRules.Mappers.MovilesMapper.Instance()
        End Function

        
        ''' <summary>
        ''' Get a Moviles Entity by calling a Stored Procedure
        ''' </summary>
        Public Overloads Function GetOne(ByVal IdMovil As System.Int32) As Objects.MovilesObject         
            Return Instance().GetOne( IdMovil)
        End Function
        

        ' GetBy Objects and Params
            

        

        ''' <summary>
        ''' GetAll Moviles 
        ''' </summary>
        Public Function GetAll() As Objects.MovilesObjectList
            Return Instance().GetAll()
        End Function

        
        


            

        

        ''' <summary>
        ''' Delete Moviles 
        ''' </summary>
        Public Overloads Sub Delete(ByVal IdMovil As System.Int32)
            Instance().Delete(IdMovil)
        End Sub

        ''' <summary>
        ''' Delete Moviles 
        ''' </summary>
        Public Overloads Sub Delete(ByVal entity As Objects.MovilesObject)
            Instance().Delete(entity)
        End Sub

        ''' <summary>
        ''' Save Moviles  
        ''' </summary>
        Public Overloads Sub Save(ByVal entity As Objects.MovilesObject)
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert Moviles 
        ''' </summary>
        Public Overloads Sub Insert(ByVal entity As Objects.MovilesObject)
            Instance().Insert(entity)
        End Sub

        ''' <summary>
        ''' Save Moviles 
        ''' </summary>
        Public Overloads Sub Save(ByVal IdMovil As System.Int32, ByVal Marca As System.String, ByVal Placa As System.String, ByVal ConfVehicular As System.String, ByVal IdTransportista As System.Int32)
            Dim entity As Objects.MovilesObject = Instance().GetOne(IdMovil)
            If entity Is Nothing Then
                Throw New ApplicationException(String.Format("Entity not found. IUniqueIdentifiable values: {0} = {1}", "IdMovil", IdMovil))
            End If

            entity.Marca = Marca
            entity.Placa = Placa
            entity.ConfVehicular = ConfVehicular
            entity.IdTransportista = IdTransportista
            Instance().Save(entity)
        End Sub

        ''' <summary>
        ''' Insert Moviles
        ''' </summary>
        Public Overloads Sub Insert(ByVal Marca As System.String, ByVal Placa As System.String, ByVal ConfVehicular As System.String, ByVal IdTransportista As System.Int32)
            Dim entity As Objects.MovilesObject = New Objects.MovilesObject

            entity.Marca = Marca
            entity.Placa = Placa
            entity.ConfVehicular = ConfVehicular
            entity.IdTransportista = IdTransportista
            Instance().Insert(entity)
        End Sub

        

        'Database Queries 
        


    End Class
End Namespace


Namespace Loaders

    ''' <summary>
    ''' 
    ''' </summary>
    Partial Public Class MovilesLoader(Of T As {MovilesObject, New})
        Inherits BaseLoader(Of T, MovilesObject, ObjectList(Of T))
        Implements IGenericGateway



#Region "Singleton"

        Private Shared _instance As MovilesLoader(Of T)

        Private Sub New()
        End Sub

        ''' <summary>
        ''' 
        ''' </summary>
        Public Shared Function Instance() As MovilesLoader(Of T)
            If _instance Is Nothing Then
                If HttpContext.Current Is Nothing Then
                    _instance = New MovilesLoader(Of T)
                Else
                    Dim inst As MovilesLoader(Of T) = TryCast(HttpContext.Current.Items("abacusRules.MovilesLoaderSingleton"), MovilesLoader(Of T))
                    If inst Is Nothing Then
                        inst = New MovilesLoader(Of T)
                        HttpContext.Current.Items.Add("abacusRules.MovilesLoaderSingleton", inst)
                    End If
                    Return inst
                End If
            End If
            Return _instance
        End Function

#End Region


        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetPKPropertiesNames() as string()
            
            Dim s() as String={"IdMovil"}
            Return s
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        Public Function GetMappingType() as Type
            Return GetType(MovilesObject)
        End Function


        Protected Overrides ReadOnly Property TableName As String 
            Get
                Return "Moviles"
            End Get
        End Property

        

        


        Protected Overrides Sub HydrateFields(ByVal reader As DbDataReader, ByVal entity As MovilesObject)
            Dim _Marca As String
If reader.IsDBNull(1) Then 
	 _Marca = ""
Else
	 _Marca = reader.GetString(1)
End If
Dim _Placa As String
If reader.IsDBNull(2) Then 
	 _Placa = ""
Else
	 _Placa = reader.GetString(2)
End If
Dim _ConfVehicular As String
If reader.IsDBNull(3) Then 
	 _ConfVehicular = ""
Else
	 _ConfVehicular = reader.GetString(3)
End If
Dim _IdTransportista As System.Nullable(Of System.Int32) 
If reader.IsDBNull(4) Then 
	 _IdTransportista = New System.Nullable(Of System.Int32)
Else
	 _IdTransportista = reader.GetInt32(4)
End If

            Dim Moviles As IMappeableMovilesObject  = CType(entity, IMappeableMovilesObject)
            Moviles.HydrateFields(reader.GetInt32(0), _
_Marca, _
_Placa, _
_ConfVehicular, _
_IdTransportista)
        End Sub


        Protected Overrides Function StoredProceduresPrefix() As String 
            Return "coop_"
        End Function

        


        ''' <summary>
        ''' Get a Moviles by execute a SQL Query Text
        ''' </summary>
        Public Function GetOneBySQLQuery(sqlQueryText As String) As t
            Return MyBase.GetObjectBySQLText(sqlQueryText)
        End Function

        ''' <summary>
        ''' Get a MovilesList by execute a SQL Query Text
        ''' </summary>
        Public Function GetBySQLQuery(sqlQueryText As String) As ObjectList(Of T)
            Return MyBase.GetObjectListBySQLText(sqlQueryText)
        End Function

        
        ''' <summary>
        ''' GetOne By Params
        ''' </summary>
        Public Overloads Function GetOne(IdMovil As System.Int32) As t
            Return MyBase.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "Moviles_GetOne", IdMovil)
        End Function
        


        ' GetOne By Objects and Params
            

        


        'Database Queries 
        


        #Region "IGenericGateway"

        Private Function GetOne2(ByVal identifier As IUniqueIdentifiable) As Object Implements IGenericGateway.GetOne
            Return MyBase.GetOne(identifier)
        End Function

        Private Function GetAll2() As Object Implements IGenericGateway.GetAll
            Return MyBase.GetAll()
        End Function

        Private Function GetByParent2(parentEntity As IUniqueIdentifiable) As Object Implements IGenericGateway.GetByParent
            Return MyBase.GetByParent(parentEntity)
        End Function

        #End Region

    End Class

End Namespace




